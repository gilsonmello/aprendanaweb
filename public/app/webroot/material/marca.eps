%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: MAIS - LOGOMARCA.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: TagZag
%%CreationDate: 29/08/13
%%BoundingBox: 0 0 1646 246
%%HiResBoundingBox: 0 0 1645.5621 245.1368
%%CropBox: 0 0 1645.5621 245.1368
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 20 8%%BeginData: 3924 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD09FF7DA8A8FFFFFFA8A87DFD0BFFA8FD0DFF84855A5A305A5AA9%FD41FFAFFD045A305A84FD0CFF7D27F87DFFFFFF7DF827A8FD09FF52277D%FD0BFF5A5A7EFFCFFFA87E2F59FD3EFFA9605AA9A8FFA8AF5A2F2FFD0BFF%84F82727FFFFFF2727F8A8FD09FF7DF8A8FD09FFAF3685FFFF7E7E5AFFFF%FF2F53FD3CFFA96184FFFFA8597EA8FFFF532FFD0AFF5227F827A8FF7D27%F82753FFFFFFA8A8FFFFA8FFAFA9FFFFFFA87DFD05FF5A85A87EFF7E0D5A%AEA87DFF2853FD3BFF5A7EFF7DFF7E302FFFA884CF2F29FD09FF7D207D27%7DFF7D2759207DFFFF522727525227A87D20A8A852202727A8FFFF8485FF%7E36AFFF5A84FF532FA8FF06A9FD39FFA95AFF7E36A8FF5984FF7E07A9A8%2F7EFD08FF27277D2727FF27287D2728FF2727277D2727F8A852277D52F8%7D7D277DFFA95AA8FF7D5A7EFF7EFFA82F07A8FF532FFD39FF5AA9FF8436%7ECFA8A8A8282F7EFF5253FD07FFA82727FF52277D2752FF27527D2727FF%FFFF2727A87D27A8522752A8FFFFFFA95AFFFFFF535AA8FFFF7E0D5ACFFF%7D2FFD38FFA85AAFFFA85A5AA9FFFF7D0D53FFFFA828FD07FFA8F827FFA8%F827F8A8FF27277DF852FFFFFF7DF8A852277DFF2727F852A8FF7E5AA87E%FF7E0D7ECAA8282F7EA853A828FD38FFA953A97DFF59365AFFA82F077EA8%7D8428FD07FF7D2752FFFF272727FFFF2727522727FFFFFF2727A87D27A8%FFFFA8522052FF855AFF53FFA8365AFF7E2F2FFF5359A82EA9FD37FF847E%A85AAFFF2F5AA8A82F53AE7E53A828FD07FF7DF852FFFF522752FFFF52F8%7D2727277D2727F8A852277D7D27A8592727FF7E5AA85A7EFF2FA8FFFF2F%7EA828537D28FD38FFA92FFF537EA85A7EFFA85953FF28597D28FD07FF7D%277DFFFFA8F8A8FFFF52277DFFFD0627A87DF8A87D27F82727A8FFFF2FFF%7D5AFFFD06A87E28A82853FD39FF54A8A82FFFA8FFA8A9A8AF7D287D5328%FD12FFA8FFFFFF7DA8A8FFA8FD05FFA8A87DFD04FF5A53FF2F7ECAFF287E%A8A828597D287DFD39FF5353A85359FFA85353FFA8535284057DFD07FFA8%7DAFFD0FFFA8FD05FF7EFFAFFD05FFA82F7EFF7DFF7D292FA87D7DA85228%FD3BFF07A8FF7EA8A8282FA8A853A82853FD08FFA8527D7D7D52A87D7D52%7D527D5252527D5353527D525252535252527D7DFFFFFF7E077DFFA87D28%537D847D5228FD3CFF7E067ECAFF592F2F7E7DA82828A8FD08FFA87D5253%52527D7D5252527D527D27535252525952527D5252527D7D527DFD04FF7E%2F2EA8A8A87D7E532828FD3EFF8406537EA884A87D59282EA8FFFFA8FFA8%FF7DA8FFFFA8FFFFFFA8FD0BFFA8A8A8FFFFA8FFFFA8A8A8FD07FFA85306%282828052853FD40FFA92E28062E28282853A8FFFFFF7D7D7DA85252A87D%A8A8A87DFD05A87DA8FFA8A8A87DFFA87DA8A852A8A8FF2752FD09A8FF7E%7E7DA9FD45FFA87DA8A8FD06FF53525227272752522727275227522727F8%527D7DF85252527D7D2752275227287D7D7D27275227272752277DFD55FF%A8FF7DA8A8A87DFD05A852527DA8A8FFA884A8FFA8FF7DA87DA87DA87DFF%A8FF7DA87DA87EA8A8A87DFD61FFA9A8FD70FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2013-08-16T10:50:06-03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:ModifyDate>2013-08-16T10:50:07-03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2013-08-16T10:50:07-03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>40</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAKAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXx95w/Ojztpn5u&#xA;ancW2rXbaBpmr+k+nrI31doreTg8fH7NJBG2KafQ/wCb3ndfLv5YanrthPxuLmBYdLnj6+pdUWOR&#xA;K90VjIPlih5X/wA4v/mD5q17zNrGl6/qtzqJ+pJdWy3Ts/ARyqjFa9OXrLikvome7tbcKbiZIQxo&#xA;pkYLU+AqRihVxV5d+XGnfnNb+e/ME3m+6Wby1IZP0cvKJlL+ophMCIeUaCKoYN38Tvir0k6jp4uh&#xA;aG6iF2dxbmRfUI/1K8sVRBIUFmNANyT0AxVg2peYrvVhPLb366N5dtm9OXVXIR5mJ40iY04gtsO/&#xA;6szxijjAscWQ9O73uv8AGnlkeH04x17/AHMV83WPkzQ9Risb/Rr7VJp41k+uGcgtyYrRaOvJgV3F&#xA;B1y7BlzZATEgUubHij9QJtHXnlzV/L1yjeStZePURF9abytqEwlimiB+IICaoa/DyB6/tDKRqBk/&#xA;vBt/ODb4Jh9B+BZj5D872Pm7RjeQxm1vraQ2+p6dJ/e286bMjAgGh/ZNPxBAxs+E45VzHQt+LIJi&#xA;2SZS2OxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVjeu6/ftf8A6E0NVbUOIa5uX3jt0Pc+Le2ZeHDH&#xA;h45/T0He4efPPiEMY9XU9Aw7zBYeWbfQ49e1B7rzTHLL6PrxTj0gw5KW5Ky8U5Jw2J3Iy/HmyGXD&#xA;CoMZ4oCPFO5ISx8t6BPocOvaHqF55QuJ5fRtnkuA0UkhbgqsjM3NWYUAqPlhyaiYlwTAmuPDAx4o&#xA;ExZJ5I896lNrMvlDzXElr5ntk9WCWPaC9gH+7Yv8r+ZfnsKEDGzYY1xw+n7m/FkN8Mvq+9nmYres&#xA;nmiggknlbjFEpeRj2VRUn7sVfGHkHypN528pfmVqhiJvYY4L617n1vVmuZFU0+IlIyv+yGKV975s&#xA;vvP/AJZ/Lv8AL2By11DOYL1h8VAsnoWz/wDPO25E4qybSru18jf85K63FHFSzjtbnhCpA/djTxeI&#xA;lanr6YGK9Eu/Lf8AL/VPzs1nWfMfmvWJ44LaRY1WGhfnJVhHEH5LHHGvbjvX54q7TvJuo+T/APnI&#xA;ny5oV3fvqUNvLCdOuZK8/qrK5jRgSacDyWnTwoNsVVvy9TzC/nH8118usy60bXUPqRSvqc/ru4jp&#xA;v6hWoT/KpirEvJth+VepWMmn+bdR1Ly95u+t8jrDqZrenMEq6CkiP9oFm6N8VaVXFX1V5puDpX5e&#xA;WtnZX0mom6S2sbbUZZFkedZQB6jSIAr84wfiHWtcytHEHJZ5DdxtTIiG3XZKfPWl6fL5Y9GxPqN5&#xA;Wnj+sQ0O3KBWZytaVCTiTn2HL3y3TZSMty/ia9RiBx8I6K/lptM816RpF/eMDeaDMRITQ14p8PIn&#xA;s1I3J8VwagSwzkBykE4SMkQTzi888u383nP82pvMIkZdO06slu4JWlvFWO3Su1PULGRlPiwzIyRG&#xA;LT8P8UmmJOTNfSLI/L+qW1r+c+n3mluG0zzrprvIBUK81shmWYDbf01A+k5infEQecS5QFTvvezZ&#xA;ht7sVdirsVdirsVdirsVdirsVdirsVdiqld3C21rNcOKrCjSMB4ICT+rDEWaQTQeeeW4LXVfK01t&#xA;dz+nqvmqK8nL71KowjNCOy+op4+5zN1MuHJQ+mFONpxcLPOSSeR7mDUrPVfJmoD0TKj+kmxMUsZ4&#xA;uAOnKN1Vh7jMjViuHLFo0tC8RY7+bd2dR13RvIekf3FgIkZeo+sSqFTnT/fcJ5E/5eHRChLLJdUb&#xA;4ccUw/NG6s9N0zS9b02Yyan5KvLVXlZi0hidUDRSMd29RXQmvj75i6ckyIPKbk5BQB/mvdcwnISb&#xA;zpb6rc+UNbttIi9fVLixuIbGLkqVmkiZY/icqo+I9yMVec/844/l15k8neXNXh8yWIsr2+u1KwmS&#xA;GblCkQAJMLSLuzMKE/Riksd/KT8itb8sfmxqet6laLHodh9ZGgT+pE5k9Z+EbcFdnTjAzA8gNziq&#xA;/wDMb8qfOWq/nfp/mXT9KN75ekFrHqcwnt4yIt4bgBJJFc0h32XFDFNL8i/nt+VXmK/i8n2f6Y0m&#xA;8+zJxSWGVFJ9NpI+aPHKgahp+IxSjvLP5ZfnVd/m7o/nTzXYK6mdJ724S4tqQIqFFjESychwFNkB&#xA;+da4qnPkP8ufzV8u+b/Pet2mnwWtzqcd0dCuLuWGWGR5LsSqGSGQuvKOtOQABpXwxQxXzj5e/O3z&#xA;tpdnouteR4DrcEw9TzIBDHM6ioo0iOI+NCK0qNthil6xr3lLU/Lv5MabpwlF3feW1t7mV0qVYwtW&#xA;TjXfiiuevYZmaKQGSj/EKcXVxJhY6bqcerW1t53S9b995a8820QWVt4xcpCI1jfwLRqFp3J/yTku&#xA;C8ZH8eM/Yx46yA/wzH2rdO0/y15QtbTSNV9K7u9ZvZoYHlVHqoDenXkBQcFUGn7b06YMuWeY2P4Q&#xA;yxY44hXeWF67p/8Ag3ypfaLpLevrHmS6e1tKH4lt2qByOxpHBXk3Zmr0yzxfFkDLlEMI4/DB4eZK&#xA;O/L61e//ADY0Oytf3ln5O0txNMQRR54fq6Kf8plIb78qnL0En+It0I7gdz6AzDbnYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FVG9thdWc9szcRPG8RYdQHUrX8cMTRBQRYeG2mo39t5P0rVYEJ1XyRe3Frq9&#xA;oK8xBI/70letOIUV/wBY9s20wDlIP05Bt73XRJGMEc4Hf8e5kl9p/l2w1PUvPk7Rz6RLYLdRRUDA&#xA;yMtXZVPw1dFTj4sxzE8WZgMXW3J8OPH4nl+Ck19p3lzTdcn8/wAbxrpw0/14oo1ABkKf3qAUHxQ0&#xA;UDuTh8WXB4Xmjw4mXH5PObs6xqPlmHR7j4tb876skzQ1oYxI8ZA3P2Y1jTr9mtD0y2wJ7coBQCRv&#xA;1fVsN7ZTsiw3EcrSJ6sYR1YtHWnMUO612rmtcpB3N5a6npWoRaXdrcTCKSHnZzJ6iSsh4gOCQj7g&#xA;ivTriry3Rrb88tJ0gabYacPhjLWk15cwTkPF9aqLjncXEnK4LW5AjdkWjboDTCqax3P53Lo1uwtf&#xA;UvzfzhxMLBZfqgRPq3qiOb0VQvz9X02ZwPsg4qhYLn/nIMwmQ2tuJEA9KGcWY9QksD6xilYLxrX9&#xA;2d1A/a5DFUE19/zkhS7aPT0MSwp9TR/0aJ3l9VOXIrcGJTx5+I48f2qjFVsk/wCfT6nPOLNUuY/X&#xA;ihjWayLm0eRWikS3Nx6XLkvHlIa8Q29SFxVdf/8AK976ymsbmKCc3DSC/tLVrRZLeL15BAI2M0XI&#xA;SxhCeZHwV/a2Kq0P+d7anDM0iTahHbzxXNnDJY+rBG89qyusBnSGR3RZKNJso2BBPxKvUPLKa1ce&#xA;VdPj8zRL+l5bVF1aH92U9ZkpKv7stGRWv2dsQaV5XrXl/wAweQxcWsWmy+Y/IE8v1iK3gBe806Tl&#xA;6nwKDyZFYVDAih3qD9rPGSOXe+HJ9hcTgOParh9zB/PHmPyN5r1K01UeZJ7OWwQLFbek6GNw3Msv&#xA;JR8fQGlegyeHxMQI4btGSMclG+SJXzBqnm3UBD5M0yXVtSKmMapLG0dpbI5BYvJIFofhBIoOVB9q&#xA;gGUDFwj1mh3NwN8ntn5Z/l7a+S9Ee3ab67q99J9Y1bUSKGaY9hXfglTx+k98oy5OI+TZGNMvypk7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXmnnjyZ5i07XJfOHk2NLi6njEeuaC5Cx3sa7c0J2EoH3/&#xA;ADqGzMWWMo8E/ge5x54yJccfiO95v5n83+TNY8t/4XvJrvyrJFKGn0yeB1ZODFzFuCojEm6iopQb&#xA;AbZbCE4T4/rYSMZR4fpSix80aKulWvlvSRdeaLiA0trOGF3Z2DmROR48eCt0+1T6MjOE5SMj6WWM&#xA;CI4Ru9U/Kz8sNWtNVbzj5vCfp50MWnachDx2MLbH4twZWFa0OwJ8dqMmQVwx5fe3Rj1KFm/J7zjZ&#xA;NeS6BrqWjmdodMQPLAYNNLzzpEZY1diYri65cKcXVFViBlDNAWn5OfmdpUWqDSPMcMDahM06RxTT&#xA;2qrLSACR2ijdnqsLqU22PwsDXFUzl/Lj84CbinnQtCzyNBAJJozwUn0Y2mAeRapLIruKmojYVK4q&#xA;kUvkv8+f0oulQ61cpEVnkOuG7LW0aPHP6VuEJ9WRlkdB6pj5DwooxVl/l/yJ+ZNissl/5rku7pre&#xA;WCJmkkeJGezjijkMbKFZkuUZ+XcHxOKpPp/5Yfm8LMJqHnaZ7lQFBhuJwtDHdcqkoCT6ktvRqVor&#xA;e2Kpp5m8h/mLqOqLqGnaxb2csVnbWfqRyzwyzCNZGlMkiIxWk8iyDj9sLxagJxVK2/LH81o5r2e2&#xA;8yRJPdzGSaeOeeA3H98I3dY4qRGISR/AtQ/p0JHI4qifM35P+ZL/AFTVPMWl639T80TwWttY3qs0&#xA;KhI44kuuZjRnVpTF8JBYKO1ScVQo/Lv87hL8Pm5KK3wXD3Fw53gMZkeARRxsfUoyx1CruWLmlFUV&#xA;beRPzhtryzuh5iiuEtSsgs5r279OqSOxhkYQlrhJlZQzuAycaKDXFXpE/l/RL1xPf6ZaT3TKBJJJ&#xA;DHKa+HJ1qRhEiOq0j4YYoY1ihRY4kFERAFUDwAG2RVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVQ19pmm36ql9aQ3aIaos8aSAE+AYGmEEjkrrHTdOsEaOxtYbRGNWSCNYwT7hQMSSeaonAr/&#xA;AP/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Corel PDF Engine Version 15.2.0.697</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Untitled-1</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>296.999959</stDim:w>
            <stDim:h>209.999929</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:0380117407206811822ADE9447BA3CD1</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0380117407206811822ADE9447BA3CD1</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:0380117407206811822ADE9447BA3CD1</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0380117407206811822ADE9447BA3CD1</stEvt:instanceID>
                  <stEvt:when>2013-08-16T10:50:07-03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -245.137 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 245.137 li
1645.56 245.137 li
1645.56 0 li
cp
clp
601.773 208.521 mo
659.196 208.521 706.033 161.684 706.033 104.261 cv
706.033 46.8359 659.196 0 601.773 0 cv
544.347 0 497.512 46.8359 497.512 104.261 cv
497.512 161.684 544.347 208.521 601.773 208.521 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
level3{
gsave
[223.259 0 0 223.259 542.737 38.812 ]ct
<<
/PatternType 2
/Shading
/0 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.69 0 0 0 ]
/C1 [.58 .31 0 0 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.58 .31 0 0 ]
/C1 [.79 .49 0 0 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.79 .49 0 0 ]
/C1 [1 .79 .13 .15 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 .79 .13 .15 ]
/C1 [1 .9 .3 .3 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 .9 .3 .3 ]
/C1 [1 .9 .3 .3 ]
/N 1 
>>
]
/Bounds [.145455 .36 .612121 .824242 ]
/Encode [0 1 0 1 0 1 0 1 0 1 ]
>>
>> /Gradient add_res /0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[223.259 0 0 223.259 542.737 38.812 ]ct
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~YHP+2XK8J&WMuhoVP^2cUSFQWTV.pKSXl:?R[TY3Q^=#'Pa%DtQC!u,R[]h<StD[LU8+N\VPgAlWiN5'
Xfek3Z*L^C[C3QS\[oDc]tV7s_8=+.`Q#s>ai_cLbg"GZcd:(fe'umtf%8R-g"P39h;7#Gi8N\Uj5f=a
kNM-olKdg'mI'H4naZ2Ao_%qOp\=R\qtp<irr<#us8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
~>
<~!!39-#RUtM&/,cp)&jS<+XAB_.P*2+1,V!N4$>eo6UjU=9MSA[;,U=k<)lt#=BJ^0>?kH>?=.)K@U`hX
AS,RfBPD3sCi!s+DfB]9EcZ>FG'8(SH$XgaI!pKpJV&N.L51SAMN!OTO-#NgPa.Q%R@9V8SY)RKU8+Q^
Vl6SpXKAY/Yd1UB[C3TU]">Vg^VI\&_o9X9aN;TIbKJ,Rc-=PZcd0tbdF$Cje'lgre^i='f@\a/g"P07
gYCT?h;7#Ghr*GOiSrkWj5f:_jlPUcjlPUcjlPUcjlPUcjlPUcjlPUcjlPUcjlPUcjlPUcjlPUcjlPUc
~>
<~zzzzzzzzzzzzzzzzzzzzzzz!!!!"!<N<)"9\l3"pP;;#RC_C$47.K$k*RS%Ls![&.fEc&eYik'GM8t()
Ic((`=20)B0V8*$$%@*ZlIH+<_pQ,:"Q^-7:2j.Olr"/M8Y/0JP=<1GgsI2E*TU3]]>b4[)%o5X@_'6U
X@47Rp!@8kM`M9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R~>
<~zzzzzzzzzzzzzzzzzzzzzzz!!!$#!WiH,"9er5#6tM?#mgqH$OdFQ%Ls![&.oKe&ebrn'bqK#(Dmu,)&
aG5*#ot?*ZlIH+X&$R,:"N\,pjue-n-Sp.kE5'/hSe20ekF>1GgsH2E*TT3BB2_4?Pbj5<hD!5sdq,6q
'R77n?0B8kVfN9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceCMYK
RadialShade
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
638.258 176.772 mo
664.142 164.71 682.158 138.435 682.158 108.081 cv
682.158 100.465 681.022 93.1079 678.913 86.166 cv
666.144 116.629 652.725 146.875 638.258 176.772 cv
cp
584.492 180.563 mo
591.439 182.676 598.803 183.815 606.425 183.815 cv
614.049 183.815 621.417 182.673 628.367 180.561 cv
606.429 132.895 li
584.492 180.563 li
584.492 180.563 li
cp
533.943 86.1538 mo
531.831 93.0996 530.692 100.461 530.692 108.081 cv
530.692 138.438 548.714 164.717 574.603 176.776 cv
560.132 146.875 546.711 116.623 533.943 86.1538 cv
533.943 86.1538 li
cp
628.149 35.5381 mo
621.263 33.4668 613.97 32.3481 606.425 32.3481 cv
598.882 32.3481 591.592 33.4658 584.708 35.5352 cv
606.429 84.1938 li
628.149 35.5381 li
628.149 35.5381 li
cp
567.227 43.3262 mo
558.516 48.6245 550.953 55.6323 545 63.874 cv
579.644 145.68 li
595.167 111.285 li
606.429 111.285 li
617.692 111.285 li
633.215 145.68 li
667.855 63.8809 li
661.904 55.6387 654.34 48.6294 645.629 43.3296 cv
617.697 106.109 li
606.429 106.109 li
595.164 106.109 li
567.227 43.3262 li
567.227 43.3262 li
cp
606.425 18.2036 mo
655.927 18.2036 696.303 58.5791 696.303 108.081 cv
696.303 157.586 655.927 197.96 606.425 197.96 cv
556.922 197.96 516.546 157.586 516.546 108.081 cv
516.546 58.5791 556.922 18.2036 606.425 18.2036 cv
606.425 18.2036 li
cp
level3{
gsave
[-179.611 -179.611 179.611 -179.611 696.23 197.888 ]ct
<<
/PatternType 2
/Shading
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 .95 .35 .35 ]
/C1 [.91 .81 .22 .16 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>> /Gradient add_res /1 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[-179.611 -179.611 179.611 -179.611 696.23 197.888 ]ct
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8N#srr2orrr2orrVc]nrVc]nrVc]mr;?Kjr;?Kjr;?Hhqtp9fqtp9fqtg0cqYL'bqYL'bq>'j^q>'j^
q>'j]q"XXZq"XXZq"XXYp\4FVp\4FVp\4CTp@e4Rp@e4Rp@\+Op%A"Np%A"No^qeJo^qeJo^qeIoCMSF
oCMSFoCMPDo()ABo()ABo()>@naZ/>naZ/>naQ&;nF5r:nF5r:n*f`6n*f`6n*f`5mdBN2mdBN2mdBK0
mHs<.mHs<.mHj3+m-O**m-O**lg*m&lg*m&lg*m&lK[["lK[["lK[[!l07Hsl07Hsl07Eqkih6okih6o
~>
<~o()>@naZ/>naQ&;nF5r:nF,i7n*f`6mdBN2mdBN1mHs<.mHs9,m-O**m-F!'lg*m&lK[["lK[["l07Hs
l07Hrkih6okih3mkND$kkN:phk2tggjlPUcjlPUcjQ,C_jQ,C^j5]1[j5].Yio8tWio/kTiSibSi8EPO
i8EPNhr!>Khr!>JhVR,GhVR)Eh;-oCh;$f@gt^]?gY:K;gY:K:g=k97g=k65g"G'3g"G$1f\"j/f[na,
f@SX+f%/F'f%/F&e^`4#e^`1!eC<!teC2mqe'ldpe'c[mdaHRldF$@hdF$@gd*U.dd*U+bcd0q`cd'h]
~>
<~=]nj/=BJ[-=BJX+='&I)='&F'<`W7%<`W4#<E3%!<E)ps<)cgr<)Z^o;c?Un;c6Lk;GpCj;,L1f;,L1f
:f'tb:f'tb:JXb^:JXb^:/4PZ:/4PY9he>V9he>U9MA,R9MA,Q91qoN91qoM8kM]J8kMZH8P)KF8P)HD
84Z9B84Z6@7n6'>7n,s;7Rfj:7R]a777BX6779O36psF26pj=/6UO4.6:+"*6:+"*5s[e&5s[e&5X7S"
5X7S!5<h@s5<h@r5!D.o5!D.n4Ztqk4Ztqj4?P_g4?P\e4$,Mc4$,Ja3]];_3]]8]3B9)[3B9&Y3&ilW
~>
<~=]nj/=BJ[,='&I)<`W7%<`W4#<E3$u<)cgr;c?Un;c?Rl;GpCi;,L1f:f'tb:esk_:JXb]:/4PZ9he>V
9h\5S9MA,Q91qoN8kM]J8kDTG8P)HD84Z9B7n6'>7n,s;7Rfg877BX56psF26pj=/6UO1,6:+")5s[e&
5sR\#5X7Ou5<h@r5!D.o4Ztqk4Ztni4?P_f4$,Mc3]];_3]]8]3B9)Z3&ilW2`EZS2`<QP2E!HN2)R6K
1c.$G1c$pD1G^gB1,:U?0ekC;0eb:80JG.50/"t3/hSb//hJY,/M/M)/1`>'.k<,#.k3"u.Olkr.4H\o
~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/1 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
632.858 172.203 mo
658.741 160.141 676.757 133.864 676.757 103.513 cv
676.757 95.896 675.62 88.5386 673.51 81.5967 cv
632.858 172.203 li
cp
579.091 175.994 mo
586.037 178.106 593.403 179.246 601.025 179.246 cv
608.649 179.246 616.016 178.104 622.965 175.993 cv
601.029 128.327 li
579.091 175.994 li
579.091 175.994 li
cp
528.542 81.5859 mo
526.43 88.5303 525.291 95.8916 525.291 103.513 cv
525.291 133.87 543.313 160.147 569.202 172.208 cv
528.542 81.5859 li
528.542 81.5859 li
cp
623.497 31.3418 mo
616.611 29.2715 609.318 28.1528 601.773 28.1528 cv
594.228 28.1528 586.939 29.2705 580.055 31.3408 cv
601.777 79.9985 li
623.497 31.3418 li
623.497 31.3418 li
cp
562.575 39.1299 mo
553.863 44.4292 546.3 51.437 540.346 59.6787 cv
574.99 141.484 li
590.513 107.089 li
613.039 107.089 li
628.562 141.484 li
663.203 59.6855 li
657.25 51.4434 649.688 44.4336 640.977 39.1348 cv
613.042 101.914 li
590.509 101.914 li
562.575 39.1299 li
562.575 39.1299 li
cp
605.085 14.4849 mo
650.255 14.7783 690.903 54.0098 690.903 103.513 cv
690.903 153.015 650.527 193.391 601.025 193.391 cv
551.522 193.391 512.104 153.45 512.104 103.947 cv
512.104 54.4438 555.515 14.7783 600.099 14.1919 cv
605.085 14.4849 li
cp
level3{
gsave
[29.9026 64.0773 -64.0773 29.9026 605.515 112.534 ]ct
<<
/PatternType 2
/Shading
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.2 .1 .15 .2 ]
/C1 [.33 .22 .22 .13 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.33 .22 .22 .13 ]
/C1 [.14 .08 .08 .09 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.14 .08 .08 .09 ]
/C1 [.08 .05 .05 .05 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.08 .05 .05 .05 ]
/C1 [.04 .03 .03 .03 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.04 .03 .03 .03 ]
/C1 [.03 .02 .02 .02 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.03 .02 .02 .02 ]
/C1 [.02 .02 .02 .02 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.02 .02 .02 .02 ]
/C1 [.03 .02 .02 0 ]
/N 1 
>>
]
/Bounds [.18 .34 .54 .67 .8 .93 ]
/Encode [0 1 0 1 0 1 0 1 0 1 0 1 0 1 ]
>>
>> /Gradient add_res /2 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[29.9026 64.0773 -64.0773 29.9026 605.515 112.534 ]ct
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~1,CaE2)[BQ3&s#\4$5Yh5!M7s5sdn*6psI57n6*A8kM`M9MJ8X:Janc;H$On;,C%`9hS)M84Q-;6UF((
5!;"i3]T,W2)I*D0J>%1/1N(s-RL)`,9nBV+sA*Q+WqmM+!2RG*Zc@C*??+>*#fh9)]BV5)&X;/(`4)+
(Ddi&()7Q!'bh>r',)#l&eYfh&J5Qc&.]9^%LrsY%1NaT$k*LO$OR4J$47+H#mgnE#mgnE#mgnE#RC\A
#RC\A#RC\A#R:S>#6tJ=#6tJ=#6tG;"pP89"pP89"pP88"U,&5"U,&5"U,&5"U,&5"U5/8"pP89#6tJ=
~>
<~)&aD4*#ot?*ZlLI+X/*T,U=Z_-7:2i.4Qet/1`A*/h\n40etL?1c.'J2E*TS2Dm<I1,:R<0.nh-.k<(u
-mp>f,U=TY+WqjJ*ZZ4>)AsA.(D[`"'GM2o',)#m'+toj&eYfi&J5Te&J5Qc&.fBa&.]9^%hB0]%LrsY
%LrpW%1NaU%1EXR$k*OQ$O[=M$O[:K$47+I$4."F#mgnD#RC\A#RCY?#6tJ=#6tJ=#6kA:"pP89"pP89
"pP57"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5
~>
<~-71)f-R^Ak.4H_r.P!##/1`A)/M8Y/0/#"50ekC<1,C^B1c.$H2)[?N2`E]T2Dm<I1,:R<0.nh-.k<(u
-mp>f,U=TY+WqjJ*ZZ4>)AsA.(D[`"'GM2o',)#m'+toj&eYfi&J5Te&J5Qc&.fBa&.]9^%hB0]%LrsY
%LrpW%1NaU%1EXR$k*OQ$O[=M$O[:K$47+I$4."F#mgnD#RC\A#RCY?#6tJ=#6tJ=#6kA:"pP89"pP89
"pP57"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5
~>
<~1,:U>0ek@90/"t2/hJY,/1`>&.k3"u.4HYn-mpAh-71#b,pX`\,9nBV+X&!O+<VdK+!2RG*Zc@C*??.?
*#oq;)]K_7)B'M3)&X;/(`4)+(Ddl'()@Z$'bqGu'bh>r'GM2o',)#l&eYfi&J5Te&J,Kb&.f?_%hB0\
%LrsY%1NaU%1EXR$k*OQ$O[=M$O[:K$47+I$4."F#mgnD#RC\A#RCY?#6tJ=#6tJ=#6kA:"pP89"pP89
"pP57"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&4"9\f/!s8T+!W`<&!<<*"
~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/2 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
633.606 172.951 mo
659.489 160.889 677.505 134.612 677.505 104.261 cv
677.505 96.644 676.368 89.2866 674.258 82.3433 cv
633.606 172.951 li
cp
579.839 176.742 mo
586.785 178.854 594.149 179.994 601.773 179.994 cv
609.397 179.994 616.763 178.853 623.712 176.739 cv
601.777 129.074 li
579.839 176.742 li
579.839 176.742 li
cp
529.29 82.3335 mo
527.177 89.2783 526.039 96.6396 526.039 104.261 cv
526.039 134.617 544.061 160.896 569.95 172.955 cv
529.29 82.3335 li
529.29 82.3335 li
cp
623.497 31.7158 mo
616.611 29.6455 609.318 28.5269 601.773 28.5269 cv
594.228 28.5269 586.939 29.6445 580.055 31.7148 cv
601.777 80.3726 li
623.497 31.7158 li
623.497 31.7158 li
cp
562.575 39.5039 mo
553.863 44.8032 546.3 51.811 540.346 60.0527 cv
574.99 141.858 li
590.513 107.463 li
613.039 107.463 li
628.562 141.858 li
663.203 60.0596 li
657.25 51.8169 649.688 44.8076 640.977 39.5083 cv
613.042 102.288 li
590.509 102.288 li
562.575 39.5039 li
562.575 39.5039 li
cp
601.773 14.3823 mo
651.275 14.3823 691.651 54.7568 691.651 104.261 cv
691.651 153.763 651.275 194.139 601.773 194.139 cv
552.27 194.139 511.894 153.763 511.894 104.261 cv
511.894 54.7568 552.27 14.3823 601.773 14.3823 cv
601.773 14.3823 li
cp
level3{
gsave
[-86.3147 -112.38 112.38 -86.3147 660.319 180.486 ]ct
<<
/PatternType 2
/Shading
/2 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[-86.3147 -112.38 112.38 -86.3147 660.319 180.486 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/2 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
251.445 140.838 mo
224.774 140.838 li
215.209 61.5605 li
213.981 51.3833 213.37 44.1489 213.37 39.8555 cv
213.37 37.6484 213.429 35.9922 213.553 34.8887 cv
211.835 45.0684 210.243 52.3633 208.771 56.7783 cv
180.996 140.838 li
165.178 140.838 li
137.77 56.7783 li
137.279 55.186 135.624 47.8887 132.805 34.8887 cv
132.805 38.752 li
132.805 44.7612 132.253 52.3633 131.148 61.5605 cv
121.583 140.838 li
94.9136 140.838 li
114.962 9.32129 li
144.392 9.32129 li
169.776 86.7588 li
170.879 90.3184 172.044 96.2637 173.271 104.602 cv
174.25 96.2637 175.354 90.2539 176.581 86.5762 cv
202.333 9.32129 li
231.395 9.32129 li
251.445 140.838 li
cp
0 0 0 1 cmyk
f
326.673 96.6924 mo
326.673 89.458 324.343 83.3564 319.683 78.3896 cv
315.021 73.4243 309.382 70.9409 302.761 70.9409 cv
296.015 70.9409 290.283 73.4561 285.564 78.4824 cv
280.841 83.5117 278.482 89.582 278.482 96.6924 cv
278.482 103.93 280.873 109.936 285.656 114.718 cv
290.437 119.5 296.076 121.892 302.578 121.892 cv
309.199 121.892 314.871 119.564 319.591 114.902 cv
324.31 110.243 326.673 104.173 326.673 96.6924 cv
cp
350.033 140.838 mo
325.203 140.838 li
325.203 131.825 li
319.345 140.165 309.277 144.333 295.003 144.333 cv
283.291 144.333 273.41 140.102 265.356 131.641 cv
256.815 122.69 252.546 111.103 252.546 96.876 cv
252.546 82.8975 257.329 71.3716 266.892 62.2954 cv
275.476 53.9575 285.224 49.7876 296.138 49.7876 cv
302.761 49.7876 308.892 51.0752 314.533 53.6509 cv
320.173 56.2251 323.914 59.5366 325.753 63.583 cv
325.753 52.7305 li
350.033 52.7305 li
350.033 140.838 li
cp
f
390.5 140.838 mo
364.931 140.838 li
364.931 52.7305 li
390.5 52.7305 li
390.5 140.838 li
cp
392.707 23.853 mo
392.707 28.0229 391.203 31.5781 388.201 34.521 cv
385.195 37.4644 381.669 38.9351 377.623 38.9351 cv
373.576 38.9351 370.082 37.4351 367.138 34.4292 cv
364.195 31.4253 362.724 27.8994 362.724 23.853 cv
362.724 19.8066 364.195 16.3105 367.138 13.3677 cv
370.082 10.4248 373.576 8.9541 377.623 8.9541 cv
381.791 8.9541 385.349 10.3965 388.292 13.2769 cv
391.234 16.1592 392.707 19.6851 392.707 23.853 cv
cp
f
472.535 115.822 mo
472.535 124.406 469.191 131.305 462.507 136.516 cv
455.824 141.726 446.658 144.333 435.011 144.333 cv
425.814 144.333 417.996 142.645 411.558 139.273 cv
405.121 135.902 400.859 131.273 398.775 125.388 cv
418.455 115.27 li
419.927 122.628 425.261 126.307 434.458 126.307 cv
443.408 126.307 447.886 123.427 447.886 117.661 cv
447.886 114.229 446.167 111.654 442.736 109.936 cv
438.197 108.221 433.599 106.505 428.941 104.785 cv
419.251 101.106 412.384 97.4912 408.339 93.9326 cv
403.677 89.7666 401.349 84.5527 401.349 78.2988 cv
401.349 69.8379 404.689 62.9111 411.375 57.5132 cv
418.056 52.1182 427.039 49.4204 438.322 49.4204 cv
454.876 49.4204 465.912 55.4902 471.431 67.6294 cv
452.667 77.0107 li
450.582 70.2681 445.679 66.8945 437.953 66.8945 cv
429.492 66.8945 425.261 69.7163 425.261 75.356 cv
425.261 78.5449 427.101 81.1201 430.779 83.0801 cv
432.619 84.0635 437.646 85.9033 445.863 88.5986 cv
455.179 91.665 461.958 95.2832 466.187 99.4512 cv
470.417 103.621 472.535 109.079 472.535 115.822 cv
cp
f
119.628 182.887 mo
119.628 185.871 118.632 188.253 116.643 190.033 cv
114.562 191.903 111.742 192.837 108.185 192.837 cv
103.119 192.837 99.6802 191.18 97.8711 187.862 cv
101.716 183.52 li
102.771 186.052 104.762 187.318 107.687 187.318 cv
109.344 187.318 110.634 186.936 111.554 186.168 cv
112.474 185.4 112.933 184.368 112.933 183.074 cv
112.933 181.841 112.3 180.816 111.034 180.003 cv
109.315 179.13 107.581 178.241 105.833 177.338 cv
103.238 175.984 101.399 174.675 100.314 173.409 cv
98.9868 171.935 98.3242 170.128 98.3242 167.991 cv
98.3242 165.372 99.3633 163.196 101.444 161.465 cv
103.525 159.734 106.284 158.869 109.722 158.869 cv
113.522 158.869 116.461 160.286 118.542 163.12 cv
114.472 167.01 li
113.506 165.142 111.894 164.206 109.632 164.206 cv
108.244 164.206 107.136 164.553 106.307 165.246 cv
105.478 165.94 105.063 166.829 105.063 167.914 cv
105.063 169.211 105.697 170.267 106.963 171.081 cv
107.205 171.231 108.742 171.956 111.577 173.252 cv
116.943 175.695 119.628 178.906 119.628 182.887 cv
cp
f
143.961 181.71 mo
143.961 185.479 143.08 188.276 141.316 190.101 cv
139.552 191.926 136.786 192.837 133.016 192.837 cv
129.156 192.837 126.344 191.926 124.58 190.101 cv
122.816 188.276 121.934 185.479 121.934 181.71 cv
121.934 170.313 li
128.177 170.313 li
128.177 181.71 li
128.177 183.55 128.53 184.899 129.239 185.759 cv
129.948 186.617 131.176 187.048 132.926 187.048 cv
134.645 187.048 135.881 186.595 136.635 185.69 cv
137.327 184.877 137.674 183.55 137.674 181.71 cv
137.674 170.313 li
143.961 170.313 li
143.961 181.71 li
cp
f
164.632 181.122 mo
164.632 179.344 164.059 177.844 162.914 176.622 cv
161.767 175.4 160.38 174.789 158.751 174.789 cv
157.093 174.789 155.683 175.408 154.523 176.645 cv
153.361 177.882 152.781 179.374 152.781 181.122 cv
152.781 182.902 153.369 184.379 154.545 185.556 cv
155.721 186.73 157.109 187.318 158.707 187.318 cv
160.335 187.318 161.729 186.746 162.89 185.601 cv
164.051 184.454 164.632 182.962 164.632 181.122 cv
cp
170.376 191.978 mo
164.27 191.978 li
164.27 189.762 li
162.83 191.812 160.354 192.837 156.845 192.837 cv
153.963 192.837 151.534 191.796 149.554 189.716 cv
147.454 187.515 146.404 184.665 146.404 181.167 cv
146.404 177.729 147.58 174.896 149.932 172.664 cv
152.042 170.613 154.44 169.589 157.124 169.589 cv
158.751 169.589 160.26 169.904 161.647 170.538 cv
163.034 171.171 163.954 171.985 164.406 172.98 cv
164.406 170.313 li
170.376 170.313 li
170.376 191.978 li
cp
f
199.053 191.345 mo
197.364 192.339 195.435 192.837 193.262 192.837 cv
189.855 192.837 187.073 191.751 184.918 189.58 cv
182.762 187.409 181.684 184.59 181.684 181.122 cv
181.684 177.685 182.77 174.902 184.94 172.776 cv
187.111 170.65 189.916 169.589 193.354 169.589 cv
195.554 169.589 197.454 170.04 199.053 170.945 cv
199.008 177.277 li
197.65 175.83 195.961 175.106 193.941 175.106 cv
192.193 175.106 190.782 175.645 189.712 176.719 cv
188.642 177.793 188.107 179.238 188.107 181.055 cv
188.107 182.871 188.642 184.322 189.712 185.413 cv
190.782 186.503 192.252 187.048 194.122 187.048 cv
196.082 187.048 197.711 186.294 199.008 184.785 cv
199.053 191.345 li
cp
f
217.914 181.167 mo
217.914 179.6 217.363 178.243 216.263 177.096 cv
215.162 175.951 213.813 175.378 212.214 175.378 cv
210.586 175.378 209.229 175.943 208.144 177.073 cv
207.058 178.205 206.515 179.569 206.515 181.167 cv
206.515 182.826 207.074 184.214 208.189 185.328 cv
209.304 186.444 210.646 187.003 212.214 187.003 cv
213.813 187.003 215.162 186.444 216.263 185.328 cv
217.363 184.214 217.914 182.826 217.914 181.167 cv
cp
224.336 181.212 mo
224.336 184.53 223.206 187.296 220.944 189.513 cv
218.683 191.729 215.788 192.837 212.259 192.837 cv
208.701 192.837 205.792 191.722 203.531 189.49 cv
201.269 187.259 200.138 184.5 200.138 181.212 cv
200.138 177.927 201.283 175.167 203.576 172.936 cv
205.867 170.704 208.761 169.589 212.259 169.589 cv
215.788 169.589 218.683 170.69 220.944 172.891 cv
223.206 175.092 224.336 177.866 224.336 181.212 cv
cp
f
248.806 191.978 mo
242.519 191.978 li
242.519 181.259 li
242.519 178.906 242.308 177.293 241.886 176.419 cv
241.312 175.272 240.15 174.699 238.404 174.699 cv
236.624 174.699 235.221 175.394 234.197 176.78 cv
233.472 177.774 233.111 179.374 233.111 181.574 cv
233.111 191.978 li
226.824 191.978 li
226.824 170.313 li
232.974 170.313 li
232.974 173.705 li
235.176 170.961 237.845 169.589 240.981 169.589 cv
244.329 169.589 246.634 170.735 247.902 173.026 cv
248.503 174.111 248.806 175.981 248.806 178.635 cv
248.806 191.978 li
cp
f
268.48 191.345 mo
266.792 192.339 264.863 192.837 262.692 192.837 cv
259.284 192.837 256.502 191.751 254.347 189.58 cv
252.19 187.409 251.113 184.59 251.113 181.122 cv
251.113 177.685 252.199 174.902 254.37 172.776 cv
256.541 170.65 259.344 169.589 262.782 169.589 cv
264.983 169.589 266.882 170.04 268.48 170.945 cv
268.435 177.277 li
267.078 175.83 265.39 175.106 263.371 175.106 cv
261.621 175.106 260.21 175.645 259.141 176.719 cv
258.07 177.793 257.535 179.238 257.535 181.055 cv
257.535 182.871 258.07 184.322 259.141 185.413 cv
260.21 186.503 261.681 187.048 263.55 187.048 cv
265.511 187.048 267.138 186.294 268.435 184.785 cv
268.48 191.345 li
cp
f
285.849 178.906 mo
285.488 176.132 283.875 174.744 281.009 174.744 cv
278.175 174.744 276.501 176.132 275.99 178.906 cv
285.849 178.906 li
cp
292.181 181.077 mo
292.181 181.439 292.152 181.981 292.091 182.706 cv
275.808 182.706 li
276.291 185.781 278.054 187.318 281.099 187.318 cv
283.363 187.318 285.05 186.444 286.166 184.695 cv
291.232 187.229 li
288.91 190.968 285.488 192.837 280.964 192.837 cv
277.437 192.837 274.654 191.781 272.619 189.671 cv
270.583 187.562 269.566 184.757 269.566 181.259 cv
269.566 177.882 270.628 175.092 272.755 172.891 cv
274.882 170.69 277.632 169.589 281.009 169.589 cv
284.447 169.589 287.167 170.605 289.175 172.641 cv
291.179 174.677 292.181 177.488 292.181 181.077 cv
cp
f
310.951 185.826 mo
310.951 187.938 310.13 189.633 308.488 190.915 cv
306.843 192.196 304.589 192.837 301.724 192.837 cv
299.462 192.837 297.541 192.422 295.958 191.593 cv
294.375 190.764 293.328 189.625 292.814 188.178 cv
297.654 185.69 li
298.015 187.5 299.328 188.405 301.589 188.405 cv
303.791 188.405 304.89 187.696 304.89 186.279 cv
304.89 185.435 304.468 184.802 303.625 184.379 cv
302.507 183.957 301.378 183.535 300.232 183.112 cv
297.849 182.208 296.162 181.319 295.166 180.443 cv
294.019 179.419 293.449 178.137 293.449 176.6 cv
293.449 174.519 294.269 172.814 295.912 171.487 cv
297.556 170.162 299.765 169.498 302.541 169.498 cv
306.609 169.498 309.324 170.99 310.681 173.976 cv
306.068 176.282 li
305.554 174.624 304.349 173.795 302.449 173.795 cv
300.367 173.795 299.328 174.489 299.328 175.876 cv
299.328 176.66 299.781 177.293 300.685 177.774 cv
301.138 178.017 302.373 178.47 304.394 179.132 cv
306.683 179.887 308.351 180.776 309.39 181.801 cv
310.433 182.826 310.951 184.169 310.951 185.826 cv
cp
f
329.767 185.826 mo
329.767 187.938 328.945 189.633 327.302 190.915 cv
325.658 192.196 323.404 192.837 320.541 192.837 cv
318.279 192.837 316.357 192.422 314.773 191.593 cv
313.191 190.764 312.142 189.625 311.63 188.178 cv
316.468 185.69 li
316.832 187.5 318.144 188.405 320.406 188.405 cv
322.605 188.405 323.707 187.696 323.707 186.279 cv
323.707 185.435 323.285 184.802 322.441 184.379 cv
321.324 183.957 320.195 183.535 319.048 183.112 cv
316.666 182.208 314.976 181.319 313.982 180.443 cv
312.835 179.419 312.263 178.137 312.263 176.6 cv
312.263 174.519 313.083 172.814 314.728 171.487 cv
316.371 170.162 318.58 169.498 321.355 169.498 cv
325.425 169.498 328.14 170.99 329.496 173.976 cv
324.882 176.282 li
324.369 174.624 323.164 173.795 321.263 173.795 cv
319.183 173.795 318.144 174.489 318.144 175.876 cv
318.144 176.66 318.595 177.293 319.501 177.774 cv
319.953 178.017 321.189 178.47 323.208 179.132 cv
325.5 179.887 327.166 180.776 328.207 181.801 cv
329.248 182.826 329.767 184.169 329.767 185.826 cv
cp
f
338.587 191.978 mo
332.3 191.978 li
332.3 170.313 li
338.587 170.313 li
338.587 191.978 li
cp
339.128 163.211 mo
339.128 164.235 338.761 165.11 338.021 165.835 cv
337.283 166.557 336.416 166.919 335.421 166.919 cv
334.425 166.919 333.568 166.55 332.841 165.811 cv
332.119 165.072 331.757 164.206 331.757 163.211 cv
331.757 162.215 332.119 161.356 332.841 160.633 cv
333.568 159.908 334.425 159.546 335.421 159.546 cv
336.447 159.546 337.32 159.901 338.044 160.61 cv
338.767 161.318 339.128 162.186 339.128 163.211 cv
cp
f
358.849 181.167 mo
358.849 179.6 358.3 178.243 357.199 177.096 cv
356.097 175.951 354.75 175.378 353.15 175.378 cv
351.523 175.378 350.166 175.943 349.082 177.073 cv
347.996 178.205 347.453 179.569 347.453 181.167 cv
347.453 182.826 348.009 184.214 349.126 185.328 cv
350.24 186.444 351.583 187.003 353.15 187.003 cv
354.75 187.003 356.097 186.444 357.199 185.328 cv
358.3 184.214 358.849 182.826 358.849 181.167 cv
cp
365.273 181.212 mo
365.273 184.53 364.142 187.296 361.88 189.513 cv
359.621 191.729 356.724 192.837 353.197 192.837 cv
349.638 192.837 346.728 191.722 344.466 189.49 cv
342.205 187.259 341.074 184.5 341.074 181.212 cv
341.074 177.927 342.22 175.167 344.511 172.936 cv
346.802 170.704 349.699 169.589 353.197 169.589 cv
356.724 169.589 359.621 170.69 361.88 172.891 cv
364.142 175.092 365.273 177.866 365.273 181.212 cv
cp
f
389.742 191.978 mo
383.455 191.978 li
383.455 181.259 li
383.455 178.906 383.244 177.293 382.824 176.419 cv
382.25 175.272 381.087 174.699 379.339 174.699 cv
377.56 174.699 376.158 175.394 375.134 176.78 cv
374.41 177.774 374.046 179.374 374.046 181.574 cv
374.046 191.978 li
367.761 191.978 li
367.761 170.313 li
373.912 170.313 li
373.912 173.705 li
376.113 170.961 378.783 169.589 381.917 169.589 cv
385.265 169.589 387.572 170.735 388.837 173.026 cv
389.441 174.111 389.742 175.981 389.742 178.635 cv
389.742 191.978 li
cp
f
411.091 158.959 mo
404.171 167.101 li
401.05 167.101 li
405.392 158.959 li
411.091 158.959 li
cp
410.324 181.122 mo
410.324 179.344 409.75 177.844 408.603 176.622 cv
407.458 175.4 406.072 174.789 404.443 174.789 cv
402.785 174.789 401.375 175.408 400.212 176.645 cv
399.052 177.882 398.472 179.374 398.472 181.122 cv
398.472 182.902 399.06 184.379 400.236 185.556 cv
401.412 186.73 402.798 187.318 404.398 187.318 cv
406.027 187.318 407.421 186.746 408.582 185.601 cv
409.742 184.454 410.324 182.962 410.324 181.122 cv
cp
416.068 191.978 mo
409.96 191.978 li
409.96 189.762 li
408.521 191.812 406.044 192.837 402.535 192.837 cv
399.654 192.837 397.224 191.796 395.244 189.716 cv
393.144 187.515 392.095 184.665 392.095 181.167 cv
392.095 177.729 393.271 174.896 395.623 172.664 cv
397.734 170.613 400.13 169.589 402.814 169.589 cv
404.443 169.589 405.951 169.904 407.337 170.538 cv
408.724 171.171 409.644 171.985 410.097 172.98 cv
410.097 170.313 li
416.068 170.313 li
416.068 191.978 li
cp
f
435.291 169.859 mo
434.341 176.645 li
433.437 176.252 432.455 176.057 431.4 176.057 cv
429.441 176.057 428.054 176.562 427.24 177.571 cv
426.423 178.582 426.017 180.203 426.017 182.434 cv
426.017 191.978 li
419.73 191.978 li
419.73 170.313 li
426.017 170.313 li
425.792 175.876 li
427.058 171.685 429.441 169.589 432.939 169.589 cv
433.3 169.589 434.083 169.679 435.291 169.859 cv
cp
f
443.07 191.978 mo
436.783 191.978 li
436.783 170.313 li
443.07 170.313 li
443.07 191.978 li
cp
443.613 163.211 mo
443.613 164.235 443.242 165.11 442.503 165.835 cv
441.765 166.557 440.898 166.919 439.904 166.919 cv
438.908 166.919 438.048 166.55 437.326 165.811 cv
436.601 165.072 436.24 164.206 436.24 163.211 cv
436.24 162.215 436.601 161.356 437.326 160.633 cv
438.048 159.908 438.908 159.546 439.904 159.546 cv
440.929 159.546 441.802 159.901 442.527 160.61 cv
443.25 161.318 443.613 162.186 443.613 163.211 cv
cp
f
463.832 181.122 mo
463.832 179.344 463.257 177.844 462.111 176.622 cv
460.966 175.4 459.58 174.789 457.951 174.789 cv
456.292 174.789 454.882 175.408 453.72 176.645 cv
452.56 177.882 451.98 179.374 451.98 181.122 cv
451.98 182.902 452.568 184.379 453.744 185.556 cv
454.919 186.73 456.306 187.318 457.906 187.318 cv
459.533 187.318 460.929 186.746 462.089 185.601 cv
463.25 184.454 463.832 182.962 463.832 181.122 cv
cp
469.576 191.978 mo
463.468 191.978 li
463.468 189.762 li
462.029 191.812 459.552 192.837 456.042 192.837 cv
453.162 192.837 450.732 191.796 448.751 189.716 cv
446.652 187.515 445.603 184.665 445.603 181.167 cv
445.603 177.729 446.779 174.896 449.13 172.664 cv
451.24 170.613 453.638 169.589 456.322 169.589 cv
457.951 169.589 459.458 169.904 460.845 170.538 cv
462.232 171.171 463.152 171.985 463.605 172.98 cv
463.605 170.313 li
469.576 170.313 li
469.576 191.978 li
cp
f
30.6646 203.66 mo
18.5801 236.142 li
11.9932 236.142 li
0 203.66 li
7.67725 203.66 li
13.9922 223.922 li
14.2944 224.892 14.7495 226.936 15.355 230.055 cv
15.7485 227.358 16.188 225.238 16.6724 223.694 cv
23.0781 203.66 li
30.6646 203.66 li
cp
f
47.5635 225.284 mo
47.5635 223.71 47.0107 222.347 45.9063 221.195 cv
44.8003 220.045 43.4453 219.47 41.8408 219.47 cv
40.2046 219.47 38.8413 220.038 37.7515 221.173 cv
36.6616 222.309 36.1167 223.68 36.1167 225.284 cv
36.1167 226.951 36.6763 228.345 37.7964 229.464 cv
38.917 230.585 40.2651 231.145 41.8408 231.145 cv
43.4453 231.145 44.8003 230.585 45.9063 229.464 cv
47.0107 228.345 47.5635 226.951 47.5635 225.284 cv
cp
54.0156 225.329 mo
54.0156 228.662 52.8799 231.44 50.6074 233.666 cv
48.3364 235.893 45.4287 237.006 41.8857 237.006 cv
38.312 237.006 35.3896 235.886 33.1172 233.644 cv
30.8462 231.403 29.7104 228.631 29.7104 225.329 cv
29.7104 222.029 30.8608 219.258 33.1636 217.017 cv
35.4648 214.775 38.3716 213.654 41.8857 213.654 cv
45.4287 213.654 48.3364 214.761 50.6074 216.972 cv
52.8799 219.182 54.0156 221.969 54.0156 225.329 cv
cp
f
62.374 236.142 mo
56.0586 236.142 li
56.0586 202.206 li
62.374 202.206 li
62.374 236.142 li
cp
f
88.6772 236.142 mo
80.8628 236.142 li
72.1411 224.603 li
72.1411 236.142 li
65.8257 236.142 li
65.8257 202.206 li
72.1411 202.206 li
72.1411 224.013 li
80.2271 214.382 li
87.813 214.382 li
79.0459 224.013 li
88.6772 236.142 li
cp
f
105.576 229.964 mo
105.576 232.084 104.75 233.787 103.101 235.074 cv
101.449 236.362 99.186 237.006 96.3091 237.006 cv
94.0371 237.006 92.1064 236.589 90.5166 235.756 cv
88.9268 234.924 87.8735 233.779 87.3589 232.325 cv
92.2202 229.827 li
92.583 231.645 93.9014 232.554 96.1724 232.554 cv
98.3823 232.554 99.4893 231.841 99.4893 230.417 cv
99.4893 229.57 99.0645 228.935 98.2163 228.51 cv
97.0957 228.086 95.96 227.662 94.8101 227.237 cv
92.417 226.329 90.7212 225.437 89.7212 224.558 cv
88.5703 223.528 87.9951 222.24 87.9951 220.696 cv
87.9951 218.606 88.8198 216.896 90.4707 215.563 cv
92.1211 214.23 94.3394 213.563 97.126 213.563 cv
101.215 213.563 103.941 215.063 105.303 218.062 cv
100.669 220.379 li
100.154 218.713 98.9434 217.88 97.0352 217.88 cv
94.9463 217.88 93.9014 218.577 93.9014 219.97 cv
93.9014 220.757 94.355 221.394 95.2642 221.878 cv
95.7183 222.12 96.96 222.574 98.9893 223.24 cv
101.291 223.998 102.964 224.892 104.009 225.921 cv
105.054 226.951 105.576 228.298 105.576 229.964 cv
cp
f
142.646 214.382 mo
135.104 236.142 li
128.38 236.142 li
125.109 224.876 li
124.807 223.847 124.352 222.12 123.748 219.696 cv
123.353 221.847 122.975 223.543 122.611 224.784 cv
119.25 236.142 li
112.526 236.142 li
104.985 214.382 li
111.89 214.382 li
115.207 225.193 li
115.509 226.103 115.917 227.798 116.434 230.281 cv
116.645 228.556 116.979 226.874 117.433 225.238 cv
120.34 214.382 li
127.246 214.382 li
130.379 225.647 li
130.531 226.133 130.789 227.677 131.153 230.281 cv
131.394 229.101 131.803 227.541 132.378 225.603 cv
135.786 214.382 li
142.646 214.382 li
cp
f
160.363 225.238 mo
160.363 223.452 159.788 221.945 158.637 220.719 cv
157.485 219.492 156.093 218.88 154.457 218.88 cv
152.792 218.88 151.375 219.5 150.209 220.741 cv
149.043 221.984 148.461 223.483 148.461 225.238 cv
148.461 227.026 149.051 228.51 150.232 229.69 cv
151.413 230.873 152.806 231.463 154.412 231.463 cv
156.047 231.463 157.448 230.889 158.613 229.736 cv
159.78 228.586 160.363 227.087 160.363 225.238 cv
cp
166.132 236.142 mo
160 236.142 li
160 233.915 li
158.553 235.977 156.066 237.006 152.541 237.006 cv
149.648 237.006 147.208 235.961 145.219 233.87 cv
143.109 231.66 142.055 228.798 142.055 225.284 cv
142.055 221.831 143.236 218.985 145.599 216.743 cv
147.718 214.685 150.126 213.654 152.822 213.654 cv
154.457 213.654 155.971 213.973 157.365 214.608 cv
158.757 215.244 159.681 216.063 160.136 217.063 cv
160.136 214.382 li
166.132 214.382 li
166.132 236.142 li
cp
f
186.303 225.262 mo
186.303 223.348 185.712 221.782 184.531 220.566 cv
183.41 219.441 182.047 218.88 180.442 218.88 cv
178.777 218.88 177.353 219.472 176.172 220.657 cv
174.991 221.843 174.4 223.378 174.4 225.262 cv
174.4 227.087 174.945 228.531 176.036 229.595 cv
177.126 230.659 178.564 231.19 180.351 231.19 cv
182.138 231.19 183.577 230.674 184.667 229.64 cv
185.757 228.606 186.303 227.147 186.303 225.262 cv
cp
192.026 234.871 mo
192.026 236.777 191.951 238.125 191.799 238.914 cv
191.557 240.215 191.027 241.29 190.209 242.139 cv
188.332 244.138 185.167 245.137 180.715 245.137 cv
173.355 245.137 169.523 242.866 169.221 238.322 cv
176.172 238.322 li
176.354 239.958 177.868 240.775 180.715 240.775 cv
184.258 240.775 186.03 238.852 186.03 235.007 cv
186.03 233.507 li
184.424 235.567 181.972 236.597 178.671 236.597 cv
175.611 236.597 173.098 235.596 171.129 233.592 cv
169.04 231.498 167.995 228.706 167.995 225.216 cv
167.995 221.939 169.1 219.163 171.311 216.886 cv
173.43 214.731 175.884 213.654 178.671 213.654 cv
182.275 213.654 184.743 214.79 186.075 217.063 cv
186.075 214.382 li
192.026 214.382 li
192.026 234.871 li
cp
f
210.562 223.014 mo
210.199 220.227 208.577 218.833 205.701 218.833 cv
202.853 218.833 201.173 220.227 200.659 223.014 cv
210.562 223.014 li
cp
216.922 225.193 mo
216.922 225.558 216.891 226.103 216.831 226.828 cv
200.477 226.828 li
200.961 229.919 202.732 231.463 205.792 231.463 cv
208.063 231.463 209.759 230.585 210.879 228.827 cv
215.968 231.371 li
213.635 235.128 210.199 237.006 205.656 237.006 cv
202.111 237.006 199.318 235.945 197.274 233.825 cv
195.23 231.705 194.208 228.89 194.208 225.376 cv
194.208 221.984 195.275 219.182 197.41 216.972 cv
199.545 214.761 202.309 213.654 205.701 213.654 cv
209.154 213.654 211.886 214.677 213.901 216.721 cv
215.915 218.765 216.922 221.59 216.922 225.193 cv
cp
f
241.044 236.142 mo
234.73 236.142 li
234.73 225.376 li
234.73 223.014 234.517 221.394 234.093 220.515 cv
233.517 219.364 232.351 218.788 230.595 218.788 cv
228.808 218.788 227.4 219.485 226.371 220.877 cv
225.644 221.878 225.28 223.483 225.28 225.693 cv
225.28 236.142 li
218.966 236.142 li
218.966 214.382 li
225.144 214.382 li
225.144 217.788 li
227.354 215.033 230.035 213.654 233.185 213.654 cv
236.546 213.654 238.864 214.806 240.134 217.107 cv
240.742 218.197 241.044 220.076 241.044 222.74 cv
241.044 236.142 li
cp
f
267.892 223.014 mo
267.529 220.227 265.908 218.833 263.031 218.833 cv
260.183 218.833 258.503 220.227 257.99 223.014 cv
267.892 223.014 li
cp
274.251 225.193 mo
274.251 225.558 274.222 226.103 274.162 226.828 cv
257.807 226.828 li
258.292 229.919 260.062 231.463 263.123 231.463 cv
265.394 231.463 267.089 230.585 268.21 228.827 cv
273.298 231.371 li
270.964 235.128 267.529 237.006 262.986 237.006 cv
259.442 237.006 256.648 235.945 254.605 233.825 cv
252.56 231.705 251.539 228.89 251.539 225.376 cv
251.539 221.984 252.605 219.182 254.741 216.972 cv
256.875 214.761 259.64 213.654 263.031 213.654 cv
266.484 213.654 269.216 214.677 271.232 216.721 cv
273.246 218.765 274.251 221.59 274.251 225.193 cv
cp
f
311.64 236.142 mo
305.324 236.142 li
305.324 225.376 li
305.324 223.256 305.189 221.816 304.916 221.06 cv
304.431 219.546 303.355 218.788 301.691 218.788 cv
300.025 218.788 298.835 219.417 298.125 220.673 cv
297.412 221.931 297.056 223.893 297.056 226.557 cv
297.056 236.142 li
290.742 236.142 li
290.742 225.348 li
290.742 223.313 290.621 221.901 290.378 221.111 cv
289.894 219.563 288.894 218.788 287.38 218.788 cv
285.685 218.788 284.466 219.419 283.724 220.679 cv
282.98 221.939 282.611 223.89 282.611 226.532 cv
282.611 236.142 li
276.296 236.142 li
276.296 214.382 li
282.611 214.382 li
282.611 217.788 li
284.609 215.033 287.046 213.654 289.923 213.654 cv
293.529 213.654 295.8 215.139 296.74 218.106 cv
298.767 215.139 301.312 213.654 304.371 213.654 cv
307.49 213.654 309.625 214.79 310.777 217.063 cv
311.351 218.183 311.64 220.076 311.64 222.74 cv
311.64 236.142 li
cp
f
337.261 225.058 mo
337.261 229.086 336.853 231.841 336.035 233.325 cv
334.671 235.778 332.173 237.006 328.541 237.006 cv
323.935 237.006 321.24 234.764 320.453 230.281 cv
325.496 227.873 li
325.707 229.934 326.523 230.964 327.949 230.964 cv
328.978 230.964 329.644 230.539 329.947 229.69 cv
330.189 229.025 330.31 227.692 330.31 225.693 cv
330.31 203.66 li
337.261 203.66 li
337.261 225.058 li
cp
f
357.66 225.284 mo
357.66 223.71 357.107 222.347 356 221.195 cv
354.894 220.045 353.539 219.47 351.935 219.47 cv
350.298 219.47 348.937 220.038 347.845 221.173 cv
346.755 222.309 346.21 223.68 346.21 225.284 cv
346.21 226.951 346.771 228.345 347.892 229.464 cv
349.011 230.585 350.359 231.145 351.935 231.145 cv
353.539 231.145 354.894 230.585 356 229.464 cv
357.107 228.345 357.66 226.951 357.66 225.284 cv
cp
364.111 225.329 mo
364.111 228.662 362.974 231.44 360.703 233.666 cv
358.431 235.893 355.525 237.006 351.98 237.006 cv
348.406 237.006 345.484 235.886 343.212 233.644 cv
340.941 231.403 339.806 228.631 339.806 225.329 cv
339.806 222.029 340.957 219.258 343.257 217.017 cv
345.558 214.775 348.466 213.654 351.98 213.654 cv
355.525 213.654 358.431 214.761 360.703 216.972 cv
362.974 219.182 364.111 221.969 364.111 225.329 cv
cp
f
383.099 225.238 mo
383.099 223.452 382.523 221.945 381.373 220.719 cv
380.22 219.492 378.828 218.88 377.193 218.88 cv
375.527 218.88 374.111 219.5 372.945 220.741 cv
371.779 221.984 371.197 223.483 371.197 225.238 cv
371.197 227.026 371.787 228.51 372.968 229.69 cv
374.15 230.873 375.541 231.463 377.148 231.463 cv
378.783 231.463 380.183 230.889 381.349 229.736 cv
382.515 228.586 383.099 227.087 383.099 225.238 cv
cp
384.416 204.069 mo
383.599 207.643 382.054 209.429 379.783 209.429 cv
379.207 209.429 378.662 209.354 378.148 209.202 cv
376.193 208.612 li
375.679 208.461 375.195 208.386 374.74 208.386 cv
373.771 208.386 373.119 208.961 372.787 210.111 cv
370.333 210.111 li
371.089 206.629 372.605 204.886 374.876 204.886 cv
375.359 204.886 375.996 204.993 376.785 205.205 cv
378.828 205.75 li
379.283 205.872 379.691 205.931 380.054 205.931 cv
381.023 205.931 381.66 205.311 381.962 204.069 cv
384.416 204.069 li
cp
388.869 236.142 mo
382.736 236.142 li
382.736 233.915 li
381.289 235.977 378.802 237.006 375.277 237.006 cv
372.384 237.006 369.943 235.961 367.955 233.87 cv
365.845 231.66 364.791 228.798 364.791 225.284 cv
364.791 221.831 365.972 218.985 368.333 216.743 cv
370.453 214.685 372.861 213.654 375.556 213.654 cv
377.193 213.654 378.707 213.973 380.101 214.608 cv
381.492 215.244 382.417 216.063 382.871 217.063 cv
382.871 214.382 li
388.869 214.382 li
388.869 236.142 li
cp
f
408.539 225.284 mo
408.539 223.71 407.986 222.347 406.88 221.195 cv
405.775 220.045 404.419 219.47 402.814 219.47 cv
401.179 219.47 399.816 220.038 398.726 221.173 cv
397.636 222.309 397.091 223.68 397.091 225.284 cv
397.091 226.951 397.652 228.345 398.771 229.464 cv
399.892 230.585 401.24 231.145 402.814 231.145 cv
404.419 231.145 405.775 230.585 406.88 229.464 cv
407.986 228.345 408.539 226.951 408.539 225.284 cv
cp
414.99 225.329 mo
414.99 228.662 413.853 231.44 411.583 233.666 cv
409.31 235.893 406.404 237.006 402.861 237.006 cv
399.287 237.006 396.363 235.886 394.093 233.644 cv
391.822 231.403 390.685 228.631 390.685 225.329 cv
390.685 222.029 391.835 219.258 394.138 217.017 cv
396.439 214.775 399.347 213.654 402.861 213.654 cv
406.404 213.654 409.31 214.761 411.583 216.972 cv
413.853 219.182 414.99 221.969 414.99 225.329 cv
cp
f
439.613 213.383 mo
439.613 210.323 437.81 208.793 434.207 208.793 cv
433.207 208.793 li
433.207 218.333 li
434.207 218.333 li
437.81 218.333 439.613 216.684 439.613 213.383 cv
cp
446.699 213.654 mo
446.699 216.774 445.677 219.235 443.632 221.037 cv
441.587 222.839 438.75 223.739 435.115 223.739 cv
433.207 223.739 li
433.207 236.142 li
426.21 236.142 li
426.21 203.66 li
434.207 203.66 li
442.533 203.66 446.699 206.992 446.699 213.654 cv
cp
f
463.599 223.014 mo
463.234 220.227 461.615 218.833 458.738 218.833 cv
455.89 218.833 454.208 220.227 453.695 223.014 cv
463.599 223.014 li
cp
469.958 225.193 mo
469.958 225.558 469.927 226.103 469.867 226.828 cv
453.511 226.828 li
453.998 229.919 455.769 231.463 458.828 231.463 cv
461.099 231.463 462.794 230.585 463.916 228.827 cv
469.003 231.371 li
466.671 235.128 463.234 237.006 458.693 237.006 cv
455.148 237.006 452.355 235.945 450.31 233.825 cv
448.265 231.705 447.244 228.89 447.244 225.376 cv
447.244 221.984 448.31 219.182 450.447 216.972 cv
452.582 214.761 455.345 213.654 458.738 213.654 cv
462.189 213.654 464.921 214.677 466.937 216.721 cv
468.951 218.765 469.958 221.59 469.958 225.193 cv
cp
f
488.355 229.964 mo
488.355 232.084 487.531 233.787 485.88 235.074 cv
484.23 236.362 481.966 237.006 479.087 237.006 cv
476.818 237.006 474.886 236.589 473.296 235.756 cv
471.707 234.924 470.652 233.779 470.14 232.325 cv
475 229.827 li
475.363 231.645 476.681 232.554 478.953 232.554 cv
481.164 232.554 482.269 231.841 482.269 230.417 cv
482.269 229.57 481.843 228.935 480.998 228.51 cv
479.876 228.086 478.74 227.662 477.589 227.237 cv
475.197 226.329 473.5 225.437 472.501 224.558 cv
471.349 223.528 470.775 222.24 470.775 220.696 cv
470.775 218.606 471.599 216.896 473.251 215.563 cv
474.902 214.23 477.119 213.563 479.906 213.563 cv
483.996 213.563 486.72 215.063 488.083 218.062 cv
483.449 220.379 li
482.935 218.713 481.724 217.88 479.816 217.88 cv
477.726 217.88 476.681 218.577 476.681 219.97 cv
476.681 220.757 477.136 221.394 478.042 221.878 cv
478.498 222.12 479.74 222.574 481.769 223.24 cv
484.07 223.998 485.744 224.892 486.789 225.921 cv
487.833 226.951 488.355 228.298 488.355 229.964 cv
cp
f
506.8 229.964 mo
506.8 232.084 505.974 233.787 504.324 235.074 cv
502.671 236.362 500.41 237.006 497.533 237.006 cv
495.261 237.006 493.33 236.589 491.74 235.756 cv
490.15 234.924 489.097 233.779 488.582 232.325 cv
493.443 229.827 li
493.808 231.645 495.125 232.554 497.396 232.554 cv
499.605 232.554 500.712 231.841 500.712 230.417 cv
500.712 229.57 500.289 228.935 499.441 228.51 cv
498.32 228.086 497.183 227.662 496.033 227.237 cv
493.64 226.329 491.945 225.437 490.945 224.558 cv
489.794 223.528 489.218 222.24 489.218 220.696 cv
489.218 218.606 490.042 216.896 491.695 215.563 cv
493.345 214.23 495.562 213.563 498.349 213.563 cv
502.439 213.563 505.164 215.063 506.527 218.062 cv
501.894 220.379 li
501.378 218.713 500.167 217.88 498.259 217.88 cv
496.169 217.88 495.125 218.577 495.125 219.97 cv
495.125 220.757 495.578 221.394 496.488 221.878 cv
496.941 222.12 498.183 222.574 500.212 223.24 cv
502.513 223.998 504.187 224.892 505.232 225.921 cv
506.277 226.951 506.8 228.298 506.8 229.964 cv
cp
f
525.333 225.284 mo
525.333 223.71 524.781 222.347 523.677 221.195 cv
522.57 220.045 521.214 219.47 519.609 219.47 cv
517.974 219.47 516.611 220.038 515.521 221.173 cv
514.431 222.309 513.886 223.68 513.886 225.284 cv
513.886 226.951 514.447 228.345 515.566 229.464 cv
516.687 230.585 518.035 231.145 519.609 231.145 cv
521.214 231.145 522.57 230.585 523.677 229.464 cv
524.781 228.345 525.333 226.951 525.333 225.284 cv
cp
531.785 225.329 mo
531.785 228.662 530.648 231.44 528.378 233.666 cv
526.107 235.893 523.199 237.006 519.656 237.006 cv
516.082 237.006 513.16 235.886 510.888 233.644 cv
508.615 231.403 507.48 228.631 507.48 225.329 cv
507.48 222.029 508.63 219.258 510.933 217.017 cv
513.234 214.775 516.142 213.654 519.656 213.654 cv
523.199 213.654 526.107 214.761 528.378 216.972 cv
530.648 219.182 531.785 221.969 531.785 225.329 cv
cp
f
550.775 225.238 mo
550.775 223.452 550.199 221.945 549.048 220.719 cv
547.896 219.492 546.503 218.88 544.869 218.88 cv
543.203 218.88 541.787 219.5 540.621 220.741 cv
539.455 221.984 538.873 223.483 538.873 225.238 cv
538.873 227.026 539.462 228.51 540.642 229.69 cv
541.826 230.873 543.218 231.463 544.824 231.463 cv
546.458 231.463 547.859 230.889 549.025 229.736 cv
550.191 228.586 550.775 227.087 550.775 225.238 cv
cp
556.542 236.142 mo
550.41 236.142 li
550.41 233.915 li
548.964 235.977 546.478 237.006 542.953 237.006 cv
540.058 237.006 537.619 235.961 535.63 233.87 cv
533.521 231.66 532.466 228.798 532.466 225.284 cv
532.466 221.831 533.646 218.985 536.009 216.743 cv
538.128 214.685 540.537 213.654 543.234 213.654 cv
544.869 213.654 546.382 213.973 547.777 214.608 cv
549.167 215.244 550.093 216.063 550.546 217.063 cv
550.546 214.382 li
556.542 214.382 li
556.542 236.142 li
cp
f
567.447 233.008 mo
567.447 234.068 567.076 234.961 566.333 235.688 cv
565.591 236.415 564.689 236.777 563.63 236.777 cv
562.57 236.777 561.669 236.407 560.927 235.665 cv
560.185 234.924 559.814 234.037 559.814 233.008 cv
559.814 231.948 560.185 231.047 560.927 230.304 cv
561.669 229.563 562.57 229.191 563.63 229.191 cv
564.689 229.191 565.591 229.563 566.333 230.304 cv
567.076 231.047 567.447 231.948 567.447 233.008 cv
cp
f
1541.3 208.521 mo
1598.73 208.521 1645.56 161.684 1645.56 104.261 cv
1645.56 46.8359 1598.73 0 1541.3 0 cv
1483.88 0 1437.04 46.8359 1437.04 104.261 cv
1437.04 161.684 1483.88 208.521 1541.3 208.521 cv
cp
level3{
gsave
[223.259 0 0 223.259 1482.27 38.812 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[223.259 0 0 223.259 1482.27 38.812 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
1577.79 176.772 mo
1603.67 164.71 1621.69 138.435 1621.69 108.081 cv
1621.69 100.465 1620.55 93.1079 1618.44 86.166 cv
1605.67 116.629 1592.25 146.875 1577.79 176.772 cv
cp
1524.02 180.563 mo
1530.97 182.676 1538.33 183.815 1545.95 183.815 cv
1553.58 183.815 1560.95 182.673 1567.9 180.561 cv
1545.96 132.895 li
1524.02 180.563 li
1524.02 180.563 li
cp
1473.47 86.1538 mo
1471.36 93.0996 1470.22 100.461 1470.22 108.081 cv
1470.22 138.438 1488.24 164.717 1514.13 176.776 cv
1499.66 146.875 1486.24 116.623 1473.47 86.1538 cv
1473.47 86.1538 li
cp
1567.68 35.5381 mo
1560.79 33.4668 1553.5 32.3481 1545.95 32.3481 cv
1538.41 32.3481 1531.12 33.4658 1524.24 35.5352 cv
1545.96 84.1938 li
1567.68 35.5381 li
1567.68 35.5381 li
cp
1506.76 43.3262 mo
1498.05 48.6245 1490.48 55.6323 1484.53 63.874 cv
1519.17 145.68 li
1534.7 111.285 li
1545.96 111.285 li
1557.22 111.285 li
1572.74 145.68 li
1607.38 63.8809 li
1601.43 55.6387 1593.87 48.6294 1585.16 43.3296 cv
1557.23 106.109 li
1545.96 106.109 li
1534.69 106.109 li
1506.76 43.3262 li
1506.76 43.3262 li
cp
1545.95 18.2036 mo
1595.46 18.2036 1635.83 58.5791 1635.83 108.081 cv
1635.83 157.586 1595.46 197.96 1545.95 197.96 cv
1496.45 197.96 1456.08 157.586 1456.08 108.081 cv
1456.08 58.5791 1496.45 18.2036 1545.95 18.2036 cv
1545.95 18.2036 li
cp
level3{
gsave
[-179.611 -179.611 179.611 -179.611 1635.76 197.888 ]ct
<<
/PatternType 2
/Shading
/1 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[-179.611 -179.611 179.611 -179.611 1635.76 197.888 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/1 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
1572.39 172.203 mo
1598.27 160.141 1616.29 133.864 1616.29 103.513 cv
1616.29 95.896 1615.15 88.5386 1613.04 81.5967 cv
1572.39 172.203 li
cp
1518.62 175.994 mo
1525.57 178.106 1532.93 179.246 1540.55 179.246 cv
1548.18 179.246 1555.55 178.104 1562.49 175.993 cv
1540.56 128.327 li
1518.62 175.994 li
1518.62 175.994 li
cp
1468.07 81.5859 mo
1465.96 88.5303 1464.82 95.8916 1464.82 103.513 cv
1464.82 133.87 1482.84 160.147 1508.73 172.208 cv
1468.07 81.5859 li
1468.07 81.5859 li
cp
1563.03 31.3418 mo
1556.14 29.2715 1548.85 28.1528 1541.3 28.1528 cv
1533.76 28.1528 1526.47 29.2705 1519.58 31.3408 cv
1541.31 79.9985 li
1563.03 31.3418 li
1563.03 31.3418 li
cp
1502.1 39.1299 mo
1493.39 44.4292 1485.83 51.437 1479.88 59.6787 cv
1514.52 141.484 li
1530.04 107.089 li
1552.57 107.089 li
1568.09 141.484 li
1602.73 59.6855 li
1596.78 51.4434 1589.22 44.4336 1580.51 39.1348 cv
1552.57 101.914 li
1530.04 101.914 li
1502.1 39.1299 li
1502.1 39.1299 li
cp
1544.61 14.4849 mo
1589.78 14.7783 1630.43 54.0098 1630.43 103.513 cv
1630.43 153.015 1590.06 193.391 1540.55 193.391 cv
1491.05 193.391 1451.63 153.45 1451.63 103.947 cv
1451.63 54.4438 1495.04 14.7783 1539.63 14.1919 cv
1544.61 14.4849 li
cp
level3{
gsave
[29.9024 64.0769 -64.0769 29.9024 1545.04 112.534 ]ct
<<
/PatternType 2
/Shading
/2 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[29.9024 64.0769 -64.0769 29.9024 1545.04 112.534 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/2 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
1573.14 172.951 mo
1599.02 160.889 1617.03 134.612 1617.03 104.261 cv
1617.03 96.644 1615.9 89.2866 1613.79 82.3433 cv
1573.14 172.951 li
cp
1519.37 176.742 mo
1526.31 178.854 1533.68 179.994 1541.3 179.994 cv
1548.93 179.994 1556.29 178.853 1563.24 176.739 cv
1541.31 129.074 li
1519.37 176.742 li
1519.37 176.742 li
cp
1468.82 82.3335 mo
1466.71 89.2783 1465.57 96.6396 1465.57 104.261 cv
1465.57 134.617 1483.59 160.896 1509.48 172.955 cv
1468.82 82.3335 li
1468.82 82.3335 li
cp
1563.03 31.7158 mo
1556.14 29.6455 1548.85 28.5269 1541.3 28.5269 cv
1533.76 28.5269 1526.47 29.6445 1519.58 31.7148 cv
1541.31 80.3726 li
1563.03 31.7158 li
1563.03 31.7158 li
cp
1502.1 39.5039 mo
1493.39 44.8032 1485.83 51.811 1479.88 60.0527 cv
1514.52 141.858 li
1530.04 107.463 li
1552.57 107.463 li
1568.09 141.858 li
1602.73 60.0596 li
1596.78 51.8169 1589.22 44.8076 1580.51 39.5083 cv
1552.57 102.288 li
1530.04 102.288 li
1502.1 39.5039 li
1502.1 39.5039 li
cp
1541.3 14.3823 mo
1590.8 14.3823 1631.18 54.7568 1631.18 104.261 cv
1631.18 153.763 1590.8 194.139 1541.3 194.139 cv
1491.8 194.139 1451.42 153.763 1451.42 104.261 cv
1451.42 54.7568 1491.8 14.3823 1541.3 14.3823 cv
1541.3 14.3823 li
cp
level3{
gsave
[-86.3151 -112.381 112.381 -86.3151 1599.85 180.487 ]ct
<<
/PatternType 2
/Shading
/2 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[-86.3151 -112.381 112.381 -86.3151 1599.85 180.487 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/2 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
1190.97 140.838 mo
1164.3 140.838 li
1154.74 61.5605 li
1153.51 51.3833 1152.9 44.1489 1152.9 39.8555 cv
1152.9 37.6484 1152.96 35.9922 1153.08 34.8887 cv
1151.36 45.0684 1149.77 52.3633 1148.3 56.7783 cv
1120.52 140.838 li
1104.71 140.838 li
1077.3 56.7783 li
1076.81 55.186 1075.15 47.8887 1072.33 34.8887 cv
1072.33 38.752 li
1072.33 44.7612 1071.78 52.3633 1070.68 61.5605 cv
1061.11 140.838 li
1034.44 140.838 li
1054.49 9.32129 li
1083.92 9.32129 li
1109.31 86.7588 li
1110.41 90.3184 1111.57 96.2637 1112.8 104.602 cv
1113.78 96.2637 1114.88 90.2539 1116.11 86.5762 cv
1141.86 9.32129 li
1170.92 9.32129 li
1190.97 140.838 li
cp
0 0 0 0 cmyk
f
1266.2 96.6924 mo
1266.2 89.458 1263.87 83.3564 1259.21 78.3896 cv
1254.55 73.4243 1248.91 70.9409 1242.29 70.9409 cv
1235.54 70.9409 1229.81 73.4561 1225.09 78.4824 cv
1220.37 83.5117 1218.01 89.582 1218.01 96.6924 cv
1218.01 103.93 1220.4 109.936 1225.19 114.718 cv
1229.97 119.5 1235.6 121.892 1242.11 121.892 cv
1248.73 121.892 1254.4 119.564 1259.12 114.902 cv
1263.84 110.243 1266.2 104.173 1266.2 96.6924 cv
cp
1289.56 140.838 mo
1264.73 140.838 li
1264.73 131.825 li
1258.87 140.165 1248.81 144.333 1234.53 144.333 cv
1222.82 144.333 1212.94 140.102 1204.89 131.641 cv
1196.34 122.69 1192.08 111.103 1192.08 96.876 cv
1192.08 82.8975 1196.86 71.3716 1206.42 62.2954 cv
1215.01 53.9575 1224.75 49.7876 1235.67 49.7876 cv
1242.29 49.7876 1248.42 51.0752 1254.06 53.6509 cv
1259.7 56.2251 1263.44 59.5366 1265.28 63.583 cv
1265.28 52.7305 li
1289.56 52.7305 li
1289.56 140.838 li
cp
f
1330.03 140.838 mo
1304.46 140.838 li
1304.46 52.7305 li
1330.03 52.7305 li
1330.03 140.838 li
cp
1332.24 23.853 mo
1332.24 28.0229 1330.73 31.5781 1327.73 34.521 cv
1324.72 37.4644 1321.2 38.9351 1317.15 38.9351 cv
1313.1 38.9351 1309.61 37.4351 1306.67 34.4292 cv
1303.72 31.4253 1302.25 27.8994 1302.25 23.853 cv
1302.25 19.8066 1303.72 16.3105 1306.67 13.3677 cv
1309.61 10.4248 1313.1 8.9541 1317.15 8.9541 cv
1321.32 8.9541 1324.88 10.3965 1327.82 13.2769 cv
1330.76 16.1592 1332.24 19.6851 1332.24 23.853 cv
cp
f
1412.06 115.822 mo
1412.06 124.406 1408.72 131.305 1402.04 136.516 cv
1395.35 141.726 1386.19 144.333 1374.54 144.333 cv
1365.34 144.333 1357.52 142.645 1351.09 139.273 cv
1344.65 135.902 1340.39 131.273 1338.3 125.388 cv
1357.98 115.27 li
1359.46 122.628 1364.79 126.307 1373.99 126.307 cv
1382.94 126.307 1387.42 123.427 1387.42 117.661 cv
1387.42 114.229 1385.7 111.654 1382.27 109.936 cv
1377.73 108.221 1373.13 106.505 1368.47 104.785 cv
1358.78 101.106 1351.91 97.4912 1347.87 93.9326 cv
1343.21 89.7666 1340.88 84.5527 1340.88 78.2988 cv
1340.88 69.8379 1344.22 62.9111 1350.9 57.5132 cv
1357.59 52.1182 1366.57 49.4204 1377.85 49.4204 cv
1394.41 49.4204 1405.44 55.4902 1410.96 67.6294 cv
1392.2 77.0107 li
1390.11 70.2681 1385.21 66.8945 1377.48 66.8945 cv
1369.02 66.8945 1364.79 69.7163 1364.79 75.356 cv
1364.79 78.5449 1366.63 81.1201 1370.31 83.0801 cv
1372.15 84.0635 1377.18 85.9033 1385.39 88.5986 cv
1394.71 91.665 1401.49 95.2832 1405.72 99.4512 cv
1409.95 103.621 1412.06 109.079 1412.06 115.822 cv
cp
f
1059.16 182.887 mo
1059.16 185.871 1058.16 188.253 1056.17 190.033 cv
1054.09 191.903 1051.27 192.837 1047.71 192.837 cv
1042.65 192.837 1039.21 191.18 1037.4 187.862 cv
1041.25 183.52 li
1042.3 186.052 1044.29 187.318 1047.22 187.318 cv
1048.87 187.318 1050.16 186.936 1051.08 186.168 cv
1052 185.4 1052.46 184.368 1052.46 183.074 cv
1052.46 181.841 1051.83 180.816 1050.56 180.003 cv
1048.84 179.13 1047.11 178.241 1045.36 177.338 cv
1042.77 175.984 1040.93 174.675 1039.84 173.409 cv
1038.52 171.935 1037.85 170.128 1037.85 167.991 cv
1037.85 165.372 1038.89 163.196 1040.97 161.465 cv
1043.05 159.734 1045.81 158.869 1049.25 158.869 cv
1053.05 158.869 1055.99 160.286 1058.07 163.12 cv
1054 167.01 li
1053.04 165.142 1051.42 164.206 1049.16 164.206 cv
1047.77 164.206 1046.67 164.553 1045.84 165.246 cv
1045.01 165.94 1044.59 166.829 1044.59 167.914 cv
1044.59 169.211 1045.23 170.267 1046.49 171.081 cv
1046.73 171.231 1048.27 171.956 1051.11 173.252 cv
1056.47 175.695 1059.16 178.906 1059.16 182.887 cv
cp
f
1083.49 181.71 mo
1083.49 185.479 1082.61 188.276 1080.85 190.101 cv
1079.08 191.926 1076.31 192.837 1072.54 192.837 cv
1068.69 192.837 1065.87 191.926 1064.11 190.101 cv
1062.35 188.276 1061.46 185.479 1061.46 181.71 cv
1061.46 170.313 li
1067.71 170.313 li
1067.71 181.71 li
1067.71 183.55 1068.06 184.899 1068.77 185.759 cv
1069.48 186.617 1070.71 187.048 1072.45 187.048 cv
1074.17 187.048 1075.41 186.595 1076.16 185.69 cv
1076.86 184.877 1077.2 183.55 1077.2 181.71 cv
1077.2 170.313 li
1083.49 170.313 li
1083.49 181.71 li
cp
f
1104.16 181.122 mo
1104.16 179.344 1103.59 177.844 1102.44 176.622 cv
1101.3 175.4 1099.91 174.789 1098.28 174.789 cv
1096.62 174.789 1095.21 175.408 1094.05 176.645 cv
1092.89 177.882 1092.31 179.374 1092.31 181.122 cv
1092.31 182.902 1092.9 184.379 1094.07 185.556 cv
1095.25 186.73 1096.64 187.318 1098.24 187.318 cv
1099.86 187.318 1101.26 186.746 1102.42 185.601 cv
1103.58 184.454 1104.16 182.962 1104.16 181.122 cv
cp
1109.91 191.978 mo
1103.8 191.978 li
1103.8 189.762 li
1102.36 191.812 1099.88 192.837 1096.37 192.837 cv
1093.49 192.837 1091.06 191.796 1089.08 189.716 cv
1086.98 187.515 1085.93 184.665 1085.93 181.167 cv
1085.93 177.729 1087.11 174.896 1089.46 172.664 cv
1091.57 170.613 1093.97 169.589 1096.65 169.589 cv
1098.28 169.589 1099.79 169.904 1101.18 170.538 cv
1102.56 171.171 1103.48 171.985 1103.94 172.98 cv
1103.94 170.313 li
1109.91 170.313 li
1109.91 191.978 li
cp
f
1138.58 191.345 mo
1136.89 192.339 1134.96 192.837 1132.79 192.837 cv
1129.38 192.837 1126.6 191.751 1124.45 189.58 cv
1122.29 187.409 1121.21 184.59 1121.21 181.122 cv
1121.21 177.685 1122.3 174.902 1124.47 172.776 cv
1126.64 170.65 1129.44 169.589 1132.88 169.589 cv
1135.08 169.589 1136.98 170.04 1138.58 170.945 cv
1138.54 177.277 li
1137.18 175.83 1135.49 175.106 1133.47 175.106 cv
1131.72 175.106 1130.31 175.645 1129.24 176.719 cv
1128.17 177.793 1127.64 179.238 1127.64 181.055 cv
1127.64 182.871 1128.17 184.322 1129.24 185.413 cv
1130.31 186.503 1131.78 187.048 1133.65 187.048 cv
1135.61 187.048 1137.24 186.294 1138.54 184.785 cv
1138.58 191.345 li
cp
f
1157.44 181.167 mo
1157.44 179.6 1156.89 178.243 1155.79 177.096 cv
1154.69 175.951 1153.34 175.378 1151.74 175.378 cv
1150.12 175.378 1148.76 175.943 1147.67 177.073 cv
1146.59 178.205 1146.04 179.569 1146.04 181.167 cv
1146.04 182.826 1146.6 184.214 1147.72 185.328 cv
1148.83 186.444 1150.18 187.003 1151.74 187.003 cv
1153.34 187.003 1154.69 186.444 1155.79 185.328 cv
1156.89 184.214 1157.44 182.826 1157.44 181.167 cv
cp
1163.86 181.212 mo
1163.86 184.53 1162.73 187.296 1160.47 189.513 cv
1158.21 191.729 1155.32 192.837 1151.79 192.837 cv
1148.23 192.837 1145.32 191.722 1143.06 189.49 cv
1140.8 187.259 1139.67 184.5 1139.67 181.212 cv
1139.67 177.927 1140.81 175.167 1143.1 172.936 cv
1145.4 170.704 1148.29 169.589 1151.79 169.589 cv
1155.32 169.589 1158.21 170.69 1160.47 172.891 cv
1162.73 175.092 1163.86 177.866 1163.86 181.212 cv
cp
f
1188.34 191.978 mo
1182.05 191.978 li
1182.05 181.259 li
1182.05 178.906 1181.84 177.293 1181.42 176.419 cv
1180.84 175.272 1179.68 174.699 1177.93 174.699 cv
1176.15 174.699 1174.75 175.394 1173.73 176.78 cv
1173 177.774 1172.64 179.374 1172.64 181.574 cv
1172.64 191.978 li
1166.35 191.978 li
1166.35 170.313 li
1172.5 170.313 li
1172.5 173.705 li
1174.71 170.961 1177.37 169.589 1180.51 169.589 cv
1183.86 169.589 1186.16 170.735 1187.43 173.026 cv
1188.03 174.111 1188.34 175.981 1188.34 178.635 cv
1188.34 191.978 li
cp
f
1208.01 191.345 mo
1206.32 192.339 1204.39 192.837 1202.22 192.837 cv
1198.81 192.837 1196.03 191.751 1193.88 189.58 cv
1191.72 187.409 1190.64 184.59 1190.64 181.122 cv
1190.64 177.685 1191.73 174.902 1193.9 172.776 cv
1196.07 170.65 1198.87 169.589 1202.31 169.589 cv
1204.51 169.589 1206.41 170.04 1208.01 170.945 cv
1207.96 177.277 li
1206.61 175.83 1204.92 175.106 1202.9 175.106 cv
1201.15 175.106 1199.74 175.645 1198.67 176.719 cv
1197.6 177.793 1197.06 179.238 1197.06 181.055 cv
1197.06 182.871 1197.6 184.322 1198.67 185.413 cv
1199.74 186.503 1201.21 187.048 1203.08 187.048 cv
1205.04 187.048 1206.67 186.294 1207.96 184.785 cv
1208.01 191.345 li
cp
f
1225.38 178.906 mo
1225.02 176.132 1223.4 174.744 1220.54 174.744 cv
1217.7 174.744 1216.03 176.132 1215.52 178.906 cv
1225.38 178.906 li
cp
1231.71 181.077 mo
1231.71 181.439 1231.68 181.981 1231.62 182.706 cv
1215.34 182.706 li
1215.82 185.781 1217.58 187.318 1220.63 187.318 cv
1222.89 187.318 1224.58 186.444 1225.69 184.695 cv
1230.76 187.229 li
1228.44 190.968 1225.02 192.837 1220.49 192.837 cv
1216.97 192.837 1214.18 191.781 1212.15 189.671 cv
1210.11 187.562 1209.1 184.757 1209.1 181.259 cv
1209.1 177.882 1210.16 175.092 1212.28 172.891 cv
1214.41 170.69 1217.16 169.589 1220.54 169.589 cv
1223.98 169.589 1226.7 170.605 1228.7 172.641 cv
1230.71 174.677 1231.71 177.488 1231.71 181.077 cv
cp
f
1250.48 185.826 mo
1250.48 187.938 1249.66 189.633 1248.02 190.915 cv
1246.37 192.196 1244.12 192.837 1241.25 192.837 cv
1238.99 192.837 1237.07 192.422 1235.49 191.593 cv
1233.9 190.764 1232.86 189.625 1232.34 188.178 cv
1237.18 185.69 li
1237.54 187.5 1238.86 188.405 1241.12 188.405 cv
1243.32 188.405 1244.42 187.696 1244.42 186.279 cv
1244.42 185.435 1244 184.802 1243.15 184.379 cv
1242.04 183.957 1240.91 183.535 1239.76 183.112 cv
1237.38 182.208 1235.69 181.319 1234.69 180.443 cv
1233.55 179.419 1232.98 178.137 1232.98 176.6 cv
1232.98 174.519 1233.8 172.814 1235.44 171.487 cv
1237.09 170.162 1239.29 169.498 1242.07 169.498 cv
1246.14 169.498 1248.85 170.99 1250.21 173.976 cv
1245.6 176.282 li
1245.08 174.624 1243.88 173.795 1241.98 173.795 cv
1239.9 173.795 1238.86 174.489 1238.86 175.876 cv
1238.86 176.66 1239.31 177.293 1240.21 177.774 cv
1240.67 178.017 1241.9 178.47 1243.92 179.132 cv
1246.21 179.887 1247.88 180.776 1248.92 181.801 cv
1249.96 182.826 1250.48 184.169 1250.48 185.826 cv
cp
f
1269.3 185.826 mo
1269.3 187.938 1268.47 189.633 1266.83 190.915 cv
1265.19 192.196 1262.93 192.837 1260.07 192.837 cv
1257.81 192.837 1255.89 192.422 1254.3 191.593 cv
1252.72 190.764 1251.67 189.625 1251.16 188.178 cv
1256 185.69 li
1256.36 187.5 1257.67 188.405 1259.94 188.405 cv
1262.13 188.405 1263.24 187.696 1263.24 186.279 cv
1263.24 185.435 1262.81 184.802 1261.97 184.379 cv
1260.85 183.957 1259.72 183.535 1258.58 183.112 cv
1256.19 182.208 1254.51 181.319 1253.51 180.443 cv
1252.36 179.419 1251.79 178.137 1251.79 176.6 cv
1251.79 174.519 1252.61 172.814 1254.26 171.487 cv
1255.9 170.162 1258.11 169.498 1260.88 169.498 cv
1264.95 169.498 1267.67 170.99 1269.02 173.976 cv
1264.41 176.282 li
1263.9 174.624 1262.69 173.795 1260.79 173.795 cv
1258.71 173.795 1257.67 174.489 1257.67 175.876 cv
1257.67 176.66 1258.12 177.293 1259.03 177.774 cv
1259.48 178.017 1260.72 178.47 1262.74 179.132 cv
1265.03 179.887 1266.69 180.776 1267.74 181.801 cv
1268.78 182.826 1269.3 184.169 1269.3 185.826 cv
cp
f
1278.12 191.978 mo
1271.83 191.978 li
1271.83 170.313 li
1278.12 170.313 li
1278.12 191.978 li
cp
1278.66 163.211 mo
1278.66 164.235 1278.29 165.11 1277.55 165.835 cv
1276.81 166.557 1275.94 166.919 1274.95 166.919 cv
1273.95 166.919 1273.1 166.55 1272.37 165.811 cv
1271.65 165.072 1271.29 164.206 1271.29 163.211 cv
1271.29 162.215 1271.65 161.356 1272.37 160.633 cv
1273.1 159.908 1273.95 159.546 1274.95 159.546 cv
1275.98 159.546 1276.85 159.901 1277.57 160.61 cv
1278.3 161.318 1278.66 162.186 1278.66 163.211 cv
cp
f
1298.38 181.167 mo
1298.38 179.6 1297.83 178.243 1296.73 177.096 cv
1295.63 175.951 1294.28 175.378 1292.68 175.378 cv
1291.05 175.378 1289.69 175.943 1288.61 177.073 cv
1287.52 178.205 1286.98 179.569 1286.98 181.167 cv
1286.98 182.826 1287.54 184.214 1288.66 185.328 cv
1289.77 186.444 1291.11 187.003 1292.68 187.003 cv
1294.28 187.003 1295.63 186.444 1296.73 185.328 cv
1297.83 184.214 1298.38 182.826 1298.38 181.167 cv
cp
1304.8 181.212 mo
1304.8 184.53 1303.67 187.296 1301.41 189.513 cv
1299.15 191.729 1296.25 192.837 1292.73 192.837 cv
1289.17 192.837 1286.26 191.722 1284 189.49 cv
1281.73 187.259 1280.6 184.5 1280.6 181.212 cv
1280.6 177.927 1281.75 175.167 1284.04 172.936 cv
1286.33 170.704 1289.23 169.589 1292.73 169.589 cv
1296.25 169.589 1299.15 170.69 1301.41 172.891 cv
1303.67 175.092 1304.8 177.866 1304.8 181.212 cv
cp
f
1329.27 191.978 mo
1322.98 191.978 li
1322.98 181.259 li
1322.98 178.906 1322.77 177.293 1322.35 176.419 cv
1321.78 175.272 1320.62 174.699 1318.87 174.699 cv
1317.09 174.699 1315.69 175.394 1314.66 176.78 cv
1313.94 177.774 1313.58 179.374 1313.58 181.574 cv
1313.58 191.978 li
1307.29 191.978 li
1307.29 170.313 li
1313.44 170.313 li
1313.44 173.705 li
1315.64 170.961 1318.31 169.589 1321.45 169.589 cv
1324.79 169.589 1327.1 170.735 1328.37 173.026 cv
1328.97 174.111 1329.27 175.981 1329.27 178.635 cv
1329.27 191.978 li
cp
f
1350.62 158.959 mo
1343.7 167.101 li
1340.58 167.101 li
1344.92 158.959 li
1350.62 158.959 li
cp
1349.85 181.122 mo
1349.85 179.344 1349.28 177.844 1348.13 176.622 cv
1346.99 175.4 1345.6 174.789 1343.97 174.789 cv
1342.31 174.789 1340.9 175.408 1339.74 176.645 cv
1338.58 177.882 1338 179.374 1338 181.122 cv
1338 182.902 1338.59 184.379 1339.77 185.556 cv
1340.94 186.73 1342.33 187.318 1343.93 187.318 cv
1345.56 187.318 1346.95 186.746 1348.11 185.601 cv
1349.27 184.454 1349.85 182.962 1349.85 181.122 cv
cp
1355.6 191.978 mo
1349.49 191.978 li
1349.49 189.762 li
1348.05 191.812 1345.57 192.837 1342.06 192.837 cv
1339.18 192.837 1336.75 191.796 1334.77 189.716 cv
1332.67 187.515 1331.62 184.665 1331.62 181.167 cv
1331.62 177.729 1332.8 174.896 1335.15 172.664 cv
1337.26 170.613 1339.66 169.589 1342.34 169.589 cv
1343.97 169.589 1345.48 169.904 1346.87 170.538 cv
1348.25 171.171 1349.17 171.985 1349.63 172.98 cv
1349.63 170.313 li
1355.6 170.313 li
1355.6 191.978 li
cp
f
1374.82 169.859 mo
1373.87 176.645 li
1372.97 176.252 1371.98 176.057 1370.93 176.057 cv
1368.97 176.057 1367.58 176.562 1366.77 177.571 cv
1365.95 178.582 1365.55 180.203 1365.55 182.434 cv
1365.55 191.978 li
1359.26 191.978 li
1359.26 170.313 li
1365.55 170.313 li
1365.32 175.876 li
1366.59 171.685 1368.97 169.589 1372.47 169.589 cv
1372.83 169.589 1373.61 169.679 1374.82 169.859 cv
cp
f
1382.6 191.978 mo
1376.31 191.978 li
1376.31 170.313 li
1382.6 170.313 li
1382.6 191.978 li
cp
1383.14 163.211 mo
1383.14 164.235 1382.77 165.11 1382.03 165.835 cv
1381.29 166.557 1380.43 166.919 1379.43 166.919 cv
1378.44 166.919 1377.58 166.55 1376.85 165.811 cv
1376.13 165.072 1375.77 164.206 1375.77 163.211 cv
1375.77 162.215 1376.13 161.356 1376.85 160.633 cv
1377.58 159.908 1378.44 159.546 1379.43 159.546 cv
1380.46 159.546 1381.33 159.901 1382.06 160.61 cv
1382.78 161.318 1383.14 162.186 1383.14 163.211 cv
cp
f
1403.36 181.122 mo
1403.36 179.344 1402.79 177.844 1401.64 176.622 cv
1400.5 175.4 1399.11 174.789 1397.48 174.789 cv
1395.82 174.789 1394.41 175.408 1393.25 176.645 cv
1392.09 177.882 1391.51 179.374 1391.51 181.122 cv
1391.51 182.902 1392.1 184.379 1393.27 185.556 cv
1394.45 186.73 1395.84 187.318 1397.44 187.318 cv
1399.06 187.318 1400.46 186.746 1401.62 185.601 cv
1402.78 184.454 1403.36 182.962 1403.36 181.122 cv
cp
1409.1 191.978 mo
1403 191.978 li
1403 189.762 li
1401.56 191.812 1399.08 192.837 1395.57 192.837 cv
1392.69 192.837 1390.26 191.796 1388.28 189.716 cv
1386.18 187.515 1385.13 184.665 1385.13 181.167 cv
1385.13 177.729 1386.31 174.896 1388.66 172.664 cv
1390.77 170.613 1393.17 169.589 1395.85 169.589 cv
1397.48 169.589 1398.99 169.904 1400.37 170.538 cv
1401.76 171.171 1402.68 171.985 1403.13 172.98 cv
1403.13 170.313 li
1409.1 170.313 li
1409.1 191.978 li
cp
f
970.194 203.66 mo
958.109 236.142 li
951.523 236.142 li
939.529 203.66 li
947.207 203.66 li
953.521 223.922 li
953.824 224.892 954.279 226.936 954.884 230.055 cv
955.278 227.358 955.717 225.238 956.202 223.694 cv
962.607 203.66 li
970.194 203.66 li
cp
f
987.093 225.284 mo
987.093 223.71 986.541 222.347 985.435 221.195 cv
984.33 220.045 982.974 219.47 981.371 219.47 cv
979.734 219.47 978.371 220.038 977.281 221.173 cv
976.191 222.309 975.646 223.68 975.646 225.284 cv
975.646 226.951 976.206 228.345 977.326 229.464 cv
978.447 230.585 979.794 231.145 981.371 231.145 cv
982.974 231.145 984.33 230.585 985.435 229.464 cv
986.541 228.345 987.093 226.951 987.093 225.284 cv
cp
993.544 225.329 mo
993.544 228.662 992.41 231.44 990.136 233.666 cv
987.866 235.893 984.958 237.006 981.416 237.006 cv
977.841 237.006 974.919 235.886 972.646 233.644 cv
970.375 231.403 969.24 228.631 969.24 225.329 cv
969.24 222.029 970.39 219.258 972.693 217.017 cv
974.994 214.775 977.901 213.654 981.416 213.654 cv
984.958 213.654 987.866 214.761 990.136 216.972 cv
992.41 219.182 993.544 221.969 993.544 225.329 cv
cp
f
1001.9 236.142 mo
995.587 236.142 li
995.587 202.206 li
1001.9 202.206 li
1001.9 236.142 li
cp
f
1028.21 236.142 mo
1020.39 236.142 li
1011.67 224.603 li
1011.67 236.142 li
1005.35 236.142 li
1005.35 202.206 li
1011.67 202.206 li
1011.67 224.013 li
1019.76 214.382 li
1027.34 214.382 li
1018.58 224.013 li
1028.21 236.142 li
cp
f
1045.1 229.964 mo
1045.1 232.084 1044.28 233.787 1042.63 235.074 cv
1040.98 236.362 1038.72 237.006 1035.84 237.006 cv
1033.57 237.006 1031.64 236.589 1030.05 235.756 cv
1028.46 234.924 1027.4 233.779 1026.89 232.325 cv
1031.75 229.827 li
1032.11 231.645 1033.43 232.554 1035.7 232.554 cv
1037.91 232.554 1039.02 231.841 1039.02 230.417 cv
1039.02 229.57 1038.59 228.935 1037.75 228.51 cv
1036.62 228.086 1035.49 227.662 1034.34 227.237 cv
1031.95 226.329 1030.25 225.437 1029.25 224.558 cv
1028.1 223.528 1027.52 222.24 1027.52 220.696 cv
1027.52 218.606 1028.35 216.896 1030 215.563 cv
1031.65 214.23 1033.87 213.563 1036.66 213.563 cv
1040.74 213.563 1043.47 215.063 1044.83 218.062 cv
1040.2 220.379 li
1039.68 218.713 1038.47 217.88 1036.56 217.88 cv
1034.48 217.88 1033.43 218.577 1033.43 219.97 cv
1033.43 220.757 1033.88 221.394 1034.79 221.878 cv
1035.25 222.12 1036.49 222.574 1038.52 223.24 cv
1040.82 223.998 1042.49 224.892 1043.54 225.921 cv
1044.58 226.951 1045.1 228.298 1045.1 229.964 cv
cp
f
1082.18 214.382 mo
1074.63 236.142 li
1067.91 236.142 li
1064.64 224.876 li
1064.34 223.847 1063.88 222.12 1063.28 219.696 cv
1062.88 221.847 1062.5 223.543 1062.14 224.784 cv
1058.78 236.142 li
1052.06 236.142 li
1044.52 214.382 li
1051.42 214.382 li
1054.74 225.193 li
1055.04 226.103 1055.45 227.798 1055.96 230.281 cv
1056.17 228.556 1056.51 226.874 1056.96 225.238 cv
1059.87 214.382 li
1066.77 214.382 li
1069.91 225.647 li
1070.06 226.133 1070.32 227.677 1070.68 230.281 cv
1070.92 229.101 1071.33 227.541 1071.91 225.603 cv
1075.31 214.382 li
1082.18 214.382 li
cp
f
1099.89 225.238 mo
1099.89 223.452 1099.32 221.945 1098.17 220.719 cv
1097.02 219.492 1095.62 218.88 1093.99 218.88 cv
1092.32 218.88 1090.9 219.5 1089.74 220.741 cv
1088.57 221.984 1087.99 223.483 1087.99 225.238 cv
1087.99 227.026 1088.58 228.51 1089.76 229.69 cv
1090.94 230.873 1092.34 231.463 1093.94 231.463 cv
1095.58 231.463 1096.98 230.889 1098.14 229.736 cv
1099.31 228.586 1099.89 227.087 1099.89 225.238 cv
cp
1105.66 236.142 mo
1099.53 236.142 li
1099.53 233.915 li
1098.08 235.977 1095.6 237.006 1092.07 237.006 cv
1089.18 237.006 1086.74 235.961 1084.75 233.87 cv
1082.64 231.66 1081.58 228.798 1081.58 225.284 cv
1081.58 221.831 1082.77 218.985 1085.13 216.743 cv
1087.25 214.685 1089.66 213.654 1092.35 213.654 cv
1093.99 213.654 1095.5 213.973 1096.89 214.608 cv
1098.29 215.244 1099.21 216.063 1099.67 217.063 cv
1099.67 214.382 li
1105.66 214.382 li
1105.66 236.142 li
cp
f
1125.83 225.262 mo
1125.83 223.348 1125.24 221.782 1124.06 220.566 cv
1122.94 219.441 1121.58 218.88 1119.97 218.88 cv
1118.31 218.88 1116.88 219.472 1115.7 220.657 cv
1114.52 221.843 1113.93 223.378 1113.93 225.262 cv
1113.93 227.087 1114.47 228.531 1115.57 229.595 cv
1116.66 230.659 1118.09 231.19 1119.88 231.19 cv
1121.67 231.19 1123.11 230.674 1124.2 229.64 cv
1125.29 228.606 1125.83 227.147 1125.83 225.262 cv
cp
1131.56 234.871 mo
1131.56 236.777 1131.48 238.125 1131.33 238.914 cv
1131.09 240.215 1130.56 241.29 1129.74 242.139 cv
1127.86 244.138 1124.7 245.137 1120.24 245.137 cv
1112.88 245.137 1109.05 242.866 1108.75 238.322 cv
1115.7 238.322 li
1115.88 239.958 1117.4 240.775 1120.24 240.775 cv
1123.79 240.775 1125.56 238.852 1125.56 235.007 cv
1125.56 233.507 li
1123.95 235.567 1121.5 236.597 1118.2 236.597 cv
1115.14 236.597 1112.63 235.596 1110.66 233.592 cv
1108.57 231.498 1107.52 228.706 1107.52 225.216 cv
1107.52 221.939 1108.63 219.163 1110.84 216.886 cv
1112.96 214.731 1115.41 213.654 1118.2 213.654 cv
1121.8 213.654 1124.27 214.79 1125.6 217.063 cv
1125.6 214.382 li
1131.56 214.382 li
1131.56 234.871 li
cp
f
1150.09 223.014 mo
1149.73 220.227 1148.11 218.833 1145.23 218.833 cv
1142.38 218.833 1140.7 220.227 1140.19 223.014 cv
1150.09 223.014 li
cp
1156.45 225.193 mo
1156.45 225.558 1156.42 226.103 1156.36 226.828 cv
1140.01 226.828 li
1140.49 229.919 1142.26 231.463 1145.32 231.463 cv
1147.59 231.463 1149.29 230.585 1150.41 228.827 cv
1155.5 231.371 li
1153.16 235.128 1149.73 237.006 1145.19 237.006 cv
1141.64 237.006 1138.85 235.945 1136.8 233.825 cv
1134.76 231.705 1133.74 228.89 1133.74 225.376 cv
1133.74 221.984 1134.8 219.182 1136.94 216.972 cv
1139.07 214.761 1141.84 213.654 1145.23 213.654 cv
1148.68 213.654 1151.42 214.677 1153.43 216.721 cv
1155.44 218.765 1156.45 221.59 1156.45 225.193 cv
cp
f
1180.57 236.142 mo
1174.26 236.142 li
1174.26 225.376 li
1174.26 223.014 1174.05 221.394 1173.62 220.515 cv
1173.05 219.364 1171.88 218.788 1170.12 218.788 cv
1168.34 218.788 1166.93 219.485 1165.9 220.877 cv
1165.17 221.878 1164.81 223.483 1164.81 225.693 cv
1164.81 236.142 li
1158.5 236.142 li
1158.5 214.382 li
1164.67 214.382 li
1164.67 217.788 li
1166.88 215.033 1169.56 213.654 1172.71 213.654 cv
1176.08 213.654 1178.39 214.806 1179.66 217.107 cv
1180.27 218.197 1180.57 220.076 1180.57 222.74 cv
1180.57 236.142 li
cp
f
1207.42 223.014 mo
1207.06 220.227 1205.44 218.833 1202.56 218.833 cv
1199.71 218.833 1198.03 220.227 1197.52 223.014 cv
1207.42 223.014 li
cp
1213.78 225.193 mo
1213.78 225.558 1213.75 226.103 1213.69 226.828 cv
1197.34 226.828 li
1197.82 229.919 1199.59 231.463 1202.65 231.463 cv
1204.92 231.463 1206.62 230.585 1207.74 228.827 cv
1212.83 231.371 li
1210.49 235.128 1207.06 237.006 1202.52 237.006 cv
1198.97 237.006 1196.18 235.945 1194.13 233.825 cv
1192.09 231.705 1191.07 228.89 1191.07 225.376 cv
1191.07 221.984 1192.13 219.182 1194.27 216.972 cv
1196.4 214.761 1199.17 213.654 1202.56 213.654 cv
1206.01 213.654 1208.75 214.677 1210.76 216.721 cv
1212.77 218.765 1213.78 221.59 1213.78 225.193 cv
cp
f
1251.17 236.142 mo
1244.85 236.142 li
1244.85 225.376 li
1244.85 223.256 1244.72 221.816 1244.44 221.06 cv
1243.96 219.546 1242.88 218.788 1241.22 218.788 cv
1239.55 218.788 1238.36 219.417 1237.65 220.673 cv
1236.94 221.931 1236.59 223.893 1236.59 226.557 cv
1236.59 236.142 li
1230.27 236.142 li
1230.27 225.348 li
1230.27 223.313 1230.15 221.901 1229.91 221.111 cv
1229.42 219.563 1228.42 218.788 1226.91 218.788 cv
1225.21 218.788 1224 219.419 1223.25 220.679 cv
1222.51 221.939 1222.14 223.89 1222.14 226.532 cv
1222.14 236.142 li
1215.83 236.142 li
1215.83 214.382 li
1222.14 214.382 li
1222.14 217.788 li
1224.14 215.033 1226.58 213.654 1229.45 213.654 cv
1233.06 213.654 1235.33 215.139 1236.27 218.106 cv
1238.3 215.139 1240.84 213.654 1243.9 213.654 cv
1247.02 213.654 1249.15 214.79 1250.31 217.063 cv
1250.88 218.183 1251.17 220.076 1251.17 222.74 cv
1251.17 236.142 li
cp
f
1276.79 225.058 mo
1276.79 229.086 1276.38 231.841 1275.56 233.325 cv
1274.2 235.778 1271.7 237.006 1268.07 237.006 cv
1263.46 237.006 1260.77 234.764 1259.98 230.281 cv
1265.02 227.873 li
1265.24 229.934 1266.05 230.964 1267.48 230.964 cv
1268.51 230.964 1269.17 230.539 1269.48 229.69 cv
1269.72 229.025 1269.84 227.692 1269.84 225.693 cv
1269.84 203.66 li
1276.79 203.66 li
1276.79 225.058 li
cp
f
1297.19 225.284 mo
1297.19 223.71 1296.64 222.347 1295.53 221.195 cv
1294.42 220.045 1293.07 219.47 1291.46 219.47 cv
1289.83 219.47 1288.47 220.038 1287.37 221.173 cv
1286.28 222.309 1285.74 223.68 1285.74 225.284 cv
1285.74 226.951 1286.3 228.345 1287.42 229.464 cv
1288.54 230.585 1289.89 231.145 1291.46 231.145 cv
1293.07 231.145 1294.42 230.585 1295.53 229.464 cv
1296.64 228.345 1297.19 226.951 1297.19 225.284 cv
cp
1303.64 225.329 mo
1303.64 228.662 1302.5 231.44 1300.23 233.666 cv
1297.96 235.893 1295.05 237.006 1291.51 237.006 cv
1287.94 237.006 1285.01 235.886 1282.74 233.644 cv
1280.47 231.403 1279.34 228.631 1279.34 225.329 cv
1279.34 222.029 1280.49 219.258 1282.79 217.017 cv
1285.09 214.775 1288 213.654 1291.51 213.654 cv
1295.05 213.654 1297.96 214.761 1300.23 216.972 cv
1302.5 219.182 1303.64 221.969 1303.64 225.329 cv
cp
f
1322.63 225.238 mo
1322.63 223.452 1322.05 221.945 1320.9 220.719 cv
1319.75 219.492 1318.36 218.88 1316.72 218.88 cv
1315.06 218.88 1313.64 219.5 1312.47 220.741 cv
1311.31 221.984 1310.73 223.483 1310.73 225.238 cv
1310.73 227.026 1311.32 228.51 1312.5 229.69 cv
1313.68 230.873 1315.07 231.463 1316.68 231.463 cv
1318.31 231.463 1319.71 230.889 1320.88 229.736 cv
1322.04 228.586 1322.63 227.087 1322.63 225.238 cv
cp
1323.94 204.069 mo
1323.13 207.643 1321.58 209.429 1319.31 209.429 cv
1318.74 209.429 1318.19 209.354 1317.68 209.202 cv
1315.72 208.612 li
1315.21 208.461 1314.72 208.386 1314.27 208.386 cv
1313.3 208.386 1312.65 208.961 1312.32 210.111 cv
1309.86 210.111 li
1310.62 206.629 1312.13 204.886 1314.41 204.886 cv
1314.89 204.886 1315.52 204.993 1316.31 205.205 cv
1318.36 205.75 li
1318.81 205.872 1319.22 205.931 1319.58 205.931 cv
1320.55 205.931 1321.19 205.311 1321.49 204.069 cv
1323.94 204.069 li
cp
1328.4 236.142 mo
1322.27 236.142 li
1322.27 233.915 li
1320.82 235.977 1318.33 237.006 1314.81 237.006 cv
1311.91 237.006 1309.47 235.961 1307.48 233.87 cv
1305.37 231.66 1304.32 228.798 1304.32 225.284 cv
1304.32 221.831 1305.5 218.985 1307.86 216.743 cv
1309.98 214.685 1312.39 213.654 1315.09 213.654 cv
1316.72 213.654 1318.24 213.973 1319.63 214.608 cv
1321.02 215.244 1321.95 216.063 1322.4 217.063 cv
1322.4 214.382 li
1328.4 214.382 li
1328.4 236.142 li
cp
f
1348.07 225.284 mo
1348.07 223.71 1347.52 222.347 1346.41 221.195 cv
1345.3 220.045 1343.95 219.47 1342.34 219.47 cv
1340.71 219.47 1339.35 220.038 1338.26 221.173 cv
1337.17 222.309 1336.62 223.68 1336.62 225.284 cv
1336.62 226.951 1337.18 228.345 1338.3 229.464 cv
1339.42 230.585 1340.77 231.145 1342.34 231.145 cv
1343.95 231.145 1345.3 230.585 1346.41 229.464 cv
1347.52 228.345 1348.07 226.951 1348.07 225.284 cv
cp
1354.52 225.329 mo
1354.52 228.662 1353.38 231.44 1351.11 233.666 cv
1348.84 235.893 1345.93 237.006 1342.39 237.006 cv
1338.82 237.006 1335.89 235.886 1333.62 233.644 cv
1331.35 231.403 1330.21 228.631 1330.21 225.329 cv
1330.21 222.029 1331.36 219.258 1333.67 217.017 cv
1335.97 214.775 1338.88 213.654 1342.39 213.654 cv
1345.93 213.654 1348.84 214.761 1351.11 216.972 cv
1353.38 219.182 1354.52 221.969 1354.52 225.329 cv
cp
f
1379.14 213.383 mo
1379.14 210.323 1377.34 208.793 1373.74 208.793 cv
1372.74 208.793 li
1372.74 218.333 li
1373.74 218.333 li
1377.34 218.333 1379.14 216.684 1379.14 213.383 cv
cp
1386.23 213.654 mo
1386.23 216.774 1385.21 219.235 1383.16 221.037 cv
1381.12 222.839 1378.28 223.739 1374.64 223.739 cv
1372.74 223.739 li
1372.74 236.142 li
1365.74 236.142 li
1365.74 203.66 li
1373.74 203.66 li
1382.06 203.66 1386.23 206.992 1386.23 213.654 cv
cp
f
1403.13 223.014 mo
1402.76 220.227 1401.14 218.833 1398.27 218.833 cv
1395.42 218.833 1393.74 220.227 1393.22 223.014 cv
1403.13 223.014 li
cp
1409.49 225.193 mo
1409.49 225.558 1409.46 226.103 1409.4 226.828 cv
1393.04 226.828 li
1393.53 229.919 1395.3 231.463 1398.36 231.463 cv
1400.63 231.463 1402.32 230.585 1403.44 228.827 cv
1408.53 231.371 li
1406.2 235.128 1402.76 237.006 1398.22 237.006 cv
1394.68 237.006 1391.88 235.945 1389.84 233.825 cv
1387.79 231.705 1386.77 228.89 1386.77 225.376 cv
1386.77 221.984 1387.84 219.182 1389.98 216.972 cv
1392.11 214.761 1394.87 213.654 1398.27 213.654 cv
1401.72 213.654 1404.45 214.677 1406.47 216.721 cv
1408.48 218.765 1409.49 221.59 1409.49 225.193 cv
cp
f
1427.88 229.964 mo
1427.88 232.084 1427.06 233.787 1425.41 235.074 cv
1423.76 236.362 1421.5 237.006 1418.62 237.006 cv
1416.35 237.006 1414.42 236.589 1412.83 235.756 cv
1411.24 234.924 1410.18 233.779 1409.67 232.325 cv
1414.53 229.827 li
1414.89 231.645 1416.21 232.554 1418.48 232.554 cv
1420.69 232.554 1421.8 231.841 1421.8 230.417 cv
1421.8 229.57 1421.37 228.935 1420.53 228.51 cv
1419.41 228.086 1418.27 227.662 1417.12 227.237 cv
1414.73 226.329 1413.03 225.437 1412.03 224.558 cv
1410.88 223.528 1410.3 222.24 1410.3 220.696 cv
1410.3 218.606 1411.13 216.896 1412.78 215.563 cv
1414.43 214.23 1416.65 213.563 1419.44 213.563 cv
1423.52 213.563 1426.25 215.063 1427.61 218.062 cv
1422.98 220.379 li
1422.46 218.713 1421.25 217.88 1419.35 217.88 cv
1417.26 217.88 1416.21 218.577 1416.21 219.97 cv
1416.21 220.757 1416.67 221.394 1417.57 221.878 cv
1418.03 222.12 1419.27 222.574 1421.3 223.24 cv
1423.6 223.998 1425.27 224.892 1426.32 225.921 cv
1427.36 226.951 1427.88 228.298 1427.88 229.964 cv
cp
f
1446.33 229.964 mo
1446.33 232.084 1445.5 233.787 1443.85 235.074 cv
1442.2 236.362 1439.94 237.006 1437.06 237.006 cv
1434.79 237.006 1432.86 236.589 1431.27 235.756 cv
1429.68 234.924 1428.63 233.779 1428.11 232.325 cv
1432.97 229.827 li
1433.34 231.645 1434.65 232.554 1436.93 232.554 cv
1439.13 232.554 1440.24 231.841 1440.24 230.417 cv
1440.24 229.57 1439.82 228.935 1438.97 228.51 cv
1437.85 228.086 1436.71 227.662 1435.56 227.237 cv
1433.17 226.329 1431.47 225.437 1430.47 224.558 cv
1429.32 223.528 1428.75 222.24 1428.75 220.696 cv
1428.75 218.606 1429.57 216.896 1431.22 215.563 cv
1432.87 214.23 1435.09 213.563 1437.88 213.563 cv
1441.97 213.563 1444.69 215.063 1446.06 218.062 cv
1441.42 220.379 li
1440.91 218.713 1439.7 217.88 1437.79 217.88 cv
1435.7 217.88 1434.65 218.577 1434.65 219.97 cv
1434.65 220.757 1435.11 221.394 1436.02 221.878 cv
1436.47 222.12 1437.71 222.574 1439.74 223.24 cv
1442.04 223.998 1443.72 224.892 1444.76 225.921 cv
1445.81 226.951 1446.33 228.298 1446.33 229.964 cv
cp
f
1464.86 225.284 mo
1464.86 223.71 1464.31 222.347 1463.21 221.195 cv
1462.1 220.045 1460.74 219.47 1459.14 219.47 cv
1457.5 219.47 1456.14 220.038 1455.05 221.173 cv
1453.96 222.309 1453.42 223.68 1453.42 225.284 cv
1453.42 226.951 1453.98 228.345 1455.1 229.464 cv
1456.22 230.585 1457.56 231.145 1459.14 231.145 cv
1460.74 231.145 1462.1 230.585 1463.21 229.464 cv
1464.31 228.345 1464.86 226.951 1464.86 225.284 cv
cp
1471.31 225.329 mo
1471.31 228.662 1470.18 231.44 1467.91 233.666 cv
1465.64 235.893 1462.73 237.006 1459.19 237.006 cv
1455.61 237.006 1452.69 235.886 1450.42 233.644 cv
1448.14 231.403 1447.01 228.631 1447.01 225.329 cv
1447.01 222.029 1448.16 219.258 1450.46 217.017 cv
1452.76 214.775 1455.67 213.654 1459.19 213.654 cv
1462.73 213.654 1465.64 214.761 1467.91 216.972 cv
1470.18 219.182 1471.31 221.969 1471.31 225.329 cv
cp
f
1490.3 225.238 mo
1490.3 223.452 1489.73 221.945 1488.58 220.719 cv
1487.43 219.492 1486.03 218.88 1484.4 218.88 cv
1482.73 218.88 1481.32 219.5 1480.15 220.741 cv
1478.98 221.984 1478.4 223.483 1478.4 225.238 cv
1478.4 227.026 1478.99 228.51 1480.17 229.69 cv
1481.35 230.873 1482.75 231.463 1484.35 231.463 cv
1485.99 231.463 1487.39 230.889 1488.55 229.736 cv
1489.72 228.586 1490.3 227.087 1490.3 225.238 cv
cp
1496.07 236.142 mo
1489.94 236.142 li
1489.94 233.915 li
1488.49 235.977 1486.01 237.006 1482.48 237.006 cv
1479.59 237.006 1477.15 235.961 1475.16 233.87 cv
1473.05 231.66 1472 228.798 1472 225.284 cv
1472 221.831 1473.18 218.985 1475.54 216.743 cv
1477.66 214.685 1480.07 213.654 1482.76 213.654 cv
1484.4 213.654 1485.91 213.973 1487.31 214.608 cv
1488.7 215.244 1489.62 216.063 1490.08 217.063 cv
1490.08 214.382 li
1496.07 214.382 li
1496.07 236.142 li
cp
f
1506.98 233.008 mo
1506.98 234.068 1506.6 234.961 1505.86 235.688 cv
1505.12 236.415 1504.22 236.777 1503.16 236.777 cv
1502.1 236.777 1501.2 236.407 1500.46 235.665 cv
1499.71 234.924 1499.34 234.037 1499.34 233.008 cv
1499.34 231.948 1499.71 231.047 1500.46 230.304 cv
1501.2 229.563 1502.1 229.191 1503.16 229.191 cv
1504.22 229.191 1505.12 229.563 1505.86 230.304 cv
1506.6 231.047 1506.98 231.948 1506.98 233.008 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 16.0.0%%For: (TagZag) ()%%Title: (MAIS - LOGOMARCA.eps)%%CreationDate: 29/08/13 14:35%%Canvassize: 16383%AI9_DataStream%Gb"-6kB8>edO9EKJ9M"JfO.V?i(S7<@63/q@%1j=)"?6pI6Z$#S0)t1kP/BM<_4=]9ddg5q`A;XkqOnnX//]oWKL4Y10NoAF;h:,%H`?o:8mG6R3E_L)]ZNn;SB1$$A9+Sjef;27j`Nj&Yc<r>77k>l@U@JCJ\74KFVWf8FC0O3R[rD/^\c_)%*ICL[m*uOQiF%/ieR2N%GZ'U[1u%Ec^Z))5rUht4/FLYV[8snBlh8*Y_`6!*3@s6FVp\AAh)P9,H>3'R!):7<nVK)J3InQ2=o=<!lI5/;Paj[f6\$"7KJo"T%_jc&iNg2SBr1rc+Rd[ApYhsk")m/hG]rub^'46a^<*mbk0Nq31o9uO,nJj3<H')#>>5P&ieSEcl9nF9L#7O3+DgaA*^mO>,5aWg2%d&Nbs2_hK*pdGsl=e7_ikpn[_RX_`6s&t9J2!^-5TAlg%+.ft@$O4jK'$&BqqW."@h<\Kl>!i:]FKSOf*HiCH2Y:q$?Ye7"DTE?,%J'nZ?p&9;Z#__ZTItk(CB-j^K4TH'(lMi^<FpH($B'5n87A-I?MG(S^T,ddl788VSU)4[\dKqT8r*aclS"I')C^JiN4&CKK-U>l8%Id=\t=Y[]jT=4X!L.u"iLdODJ#kAo*?T8!`:gqkk@C'Ho%X_8?AGCi$+.gpk/j=g93qX8]N#/k2^r8/2V$)b*WRQ^rQ+3b#&s22C%Gj1i/EtCubn4sbg;c3$_fC?1P2G6INIu>L7'h*L"MY(VbL2YPM'Er8$$N?kM=A)MqQD2lDAt-AlF`\YikjT,?eoe'jlW=P0i@!2+%Qa'T%N,P$*pnV073jfkiXjrMgnM`Y8e`](/@L=cBL\=92ig](O&Qfc4Yni?+5HtuaaW)aXL*OQ2XFhb7:E6j#$2Q97#s[r5*"dX/%9,(1/AK2;2ijeM;QK":9:Pqm#5M!\ki@!3UeZd8n%mj$29X.-nKV.m23cYQjKq6(MHUl.O)OWJH5HKS!_bY**;NQp-5,/h0hcL9,%B2Y++Kt`K*_b^1<7n;g)T+l;s_,%.dj24Yb7EQnjYI&fGdGt=]guKQ@Ae[FdFf\%%B&\N)S3i9u;n-MUZt5G-["eAelepu#cG\,h%gN:s;.?4p'YnlG>*$<-+I2>,Q%ZW0-1ca<\3tubC#KkjL&"C4@EZ7>?3JI$U3A4'p;S5rl.+W+I'Q48f8J-#['R$Qhp.ehin'gIl%+,-619ZkVEjqKb]Kc9bWq:D5*oUT+4S?;M/1@\oH536[Gmqr'A[r!0AB=^fK'?`9S&0_dOppQ.k'35cQZX;E=I?WhSndg4KWQ6%Y%"G&bAJ(&nG]C;HkS,S<lAXSk:^Zds_V1777ks%n;IqtM+[q>Og(?lM02uQf-dD,)+oNs.PWR):T2uQg[d_G2,oH.`EU[fC=LS'g6%oPa=SqA[F%87bAq<B.db=t+2TNBY0sC'DaQp`4fbC,J`6A@X*)71MP?8Cra;_t+d/QY<oV_=o^n-)`\;Jc(/XR\5geTH@;J<4.<r%A*_d5=p;L"?Ic&PPP&*JKT`(4E7b]<"RnZNTdJ:Q>HoIG"DpIYj<+2pR6=r-k4`=Z<&C".;,sZ;OcCC;W6$7U;^VJ4cl2.Uf$u7h%JLltuMA0A!IPNO#)uc!h)cQAfp/TVe;M%%La/@$=0'o42a@/qn<V!LDBESBg"7j*VF[StImqYf=?kd^(6iomU-FMd$XCDQf<5?o)%!rg3*"V+sm^GmdBclqdqgsEce-m4`uA&RQ#;FI$"[WKG!W<MChNjSk)'r_a;$Lf(od3u^@$H,/VC?3!(DEX[i^gFBDdh$ON8!pOt%MG7UA88V)"E<KI&H%ZC$O0FNL6=)"KL3abh"3->qj&GS%JV<`O\3NSq_1WBa9jo:A;(5bU?u`eRq#^GjOI=TJ'5iAF&0euHn=4Mk%O[=huJ=7[Y\tGH&+ckQ"at88g%BS):K[6/)-B:b@VGJG6,1dsu#RQI(BT=(h&8=oC+s$[2nU4OV'c[It,h>?(29CNn`/I86o,Hd5%HQJS7U0+1\K^[md7grfDm0RF+5d:Ok+]JaaWCSasgr,J.F@<]+]ct`fdDhB0%8%6/NH0q90,aE2.EiK%P`$qCj)<uolpDP^[Y6(9%.D]AREh'5kBEXju'cS@TF-Y$%UnT"A$lVDPKjq!X;*7])AG/^-Kl@^T,k=X(O;Jrh;+qht6Gn(K7*7c!_"WZV$89nD->/c&R7K-%%OinB"S-XNPGlpQ&EDCi/Bo>HQ,%;O+7)gcU$Gp^IP;nu;AoK6lL2bc2rWo*1B&@^e)%oIVLm174!BUF)P\"qH,F0dn&m6KK38j!?%'(A&K$a^(?+BT<H5Q2cX&3f](r(bEeN<1kl8.q^!oSo(>Y,`Zj<2r:pKjk72KjY31"c0*hd-/*o2JPP3[adI%*+lCi,m"GnI84L,%3/?(c<&2:r.T2DE:rR^q.?rjLM=cNWM^kJTa;dRWb`\EOqbk\#G4lU0DhD4K\Gso7)%fP<JmF3XHk&7D>[!uM&GIM)RFIsUVqb`r%.f=/Q,V?(EOs6#Z<-lC)"DpQkMfT;u_i0pm].S+eiAcB\'iQcRElO1u823_2c,M536_gm>dY[rm87eO9W:k2I:YRVe$Y#W8%a45=%m+^TNeS[fACBhg\;)rA=,cdI?HJA'r\bh*NOFcYOTCfb_mQ5i/I4%h+U]9T+J-,QDl)4ut>9.hW@n5U:p2na^JOeJnmS@c1o@Ant%MN.$s1Odl%*Hq=^s(XIOa"P3dO*!KQ_Fa9UIf1!"JA83Iq0K*.%W&<!Y4nE*q@ML/J""-ihl\fn])=;ZF]qu9r7,V-HVCbH8\NT/%s/Pg?iD#rOl^`>d:<K])%pFJ!P<**oDVHe%ctKaMkQ,_F/#8''K7F<QUBhmjLEH%a]@gm,XL@Ac:;CRHG^JVW(`)DW9DtL!8,T+9%D-P7G+'G]b`M=46s3KohKY5YlmSF%Gp1.-ApJgJis2Xd6[JbH&L]<QB0A"tGepG0gqe3ZhFl;fFlA7\DLU$jSHKhkBK.i^dR$*YZ%J(T'a2p_LA%%CUdM&WWV=s2mRVK$"7o7,;GY9+"OQ[ZX*C'MsI,f!WbdfA5hs(Mq32M/MI4^<#`T7>@;9eq[d7uc"\[i1L'5kMD"%4dV(`nPY,SrS.9sUBOh2-(_^7FR!3Uf&)I]31l4V'umeo(,%OSGHnOm-Z]XmW14XXLiI]8THE6G`/,H<3At>o4S_tA@k"@*:3KS_%+*N>^Vj"QV]&$er=*TQ<H%F"\8r]llAZirdBiXZql(=bOB\.'GbQh0MJg?-Rp`"U?YOWFBba8)KYO`[9nhMk\-3+s;#9a^N<!T*`%\A1hu.Zpd1]E1gM<^irtN/q#E5a!F&cL?APRT,P%;HYJ@77ii]hNS^GQ6]%d"R(s]CLU9Hj&7Lc78XjY;&'hM@jOtd"mCV,6W'f#%KX+DeM?;L`Wh=mi6H;O[Rr=\_QuBffj>HNtqC6b.&;DUn_;.&t7M$@<baGu9KDkQ<,Oi\`7t9G;o;?@%</dHToi&/FMT1]PIq#2a%o*>.j=YdfY,T)[G6dl&273Fo7Lf"n&&dRJ0JP7h\9*MWc5e[kmYla!faW-BX4UctTYf@Bl;$#lq!&kEu(1Hhj?i^[7^e,3C;[,>r%k?$^EG66MZ*P=_?<m>l_85NJJ?8GsL#iZ#nN$4;fYR*>lg'j[85p&E:_EiiE-C&C.fp"7+"k9hTFGGH5N2&3`501$r&sqPba'kh9%=RmoN;J?\PSlm.9*F340$*6U#&q-fo^(@iUd?^T<=jQlIW[K@G;IDB9'!Bo-1@npSOX6m$^hTYkSogi4+1b`HA6K>C7U![jb.Jja%+$9W`YLtK2=!K;ZEr:t`1O*H7m9^$#-rhh+B.C?G\k\F$PT>uTqm*3g8uNYCjJN>L(%P9M5:,lQs)dg!]XFP,IMD@*+ZYDWLu\g'%7LVJ"8lL.:,<o3!;^"A:paM=Ig+*'!_2h3;'_3K4+-7F@LN/t9"IP5_dES>P6&u`]n1pr&.TbYM]g70/.tK6N5Yc#9\bq*faG?3^%VMn-3&TPeq#rL01n7)boJ6Ra_W%]P=7Tb6S=((q`^^(J'&HQ/m+AX<"W$7nE$n/:pCHr4J7#Y628odKPW?i##<%O;DV/iP5Wg7Cm%aE`k7@Tb2(AYlJo[B`O=`!B?SX0O9,Z79VmM++s#QfX*0Q"t'`-p3;:;3;Q\XBhi`#3[Zh,mE"$.S<^?WLV,O5dmB3P#PRaE05k$%VPog1Z<D5Y(FWH<QcQI6V-J]r>eJu[`s<Eq?U^t[mhM[n<]'U!$%nKm:_adI.^_kXN!.X(6<1)g2QLl"$=Hi`WWk[Kn0Er4>(sQ<%C:.*EJR-+DLchklGu0-%ePu=k#cdt=iMVX:@TA""N"NmI%[<=\@U@Jn:!lp7".h#X-*7S`<T.d)1nL@uiP^Y68%haYdA8Y9iQ1%'%iH+(%dgf@aa(rV>U[tKRGTXK26>W_Q>$KV^RU.^()$FD[8RtH7A6LBLKi;QcP6k,DoR<3%PR=Z+LqQ(?#G1-7A+nU&\RAtkF2Ps^%AV1[Q?t(9giGh.n_EtW181(T0,$;Y%[]\_/7P#-@6rpB$<ocbQd>o0GKGceeN51H.b)]QA[&sJsP4<*SbRbs5gO-9\*,Ti*h9hN+%q%PUgPg^ULFCl>L>7Gj@,UuJW/Lg89B=sI!;.I?^=GsP]ihd\eGLd<?]*Z4Zn2BQ%nsC5mVR4SR5*,VM[LuooBFX9`jM,Qd#^PJ`%[]+d\;^l?^n5@P.$:>V'j\2Di.*5:\,!2QA6X>\W:4jXQHj]emn0=&;E/BBm`2SC7'u#_.OM/gl&>U^L;:SUI9W_X]%C:3]V)YGD%WdlWiM(HPT!/?,o_%XSd##4*l1<^l27lnjBN$0\d3<mr+JdI3u1QT`.AL`Ro7aaO\JbfC!,oN9qnb!</ch-t1a%(PAlLgQo+7]9-%mh[e85LTY_%4g<#7@oJl)7,l*e!G1%.ihb]j"3>hnZh^RlC"0!G+`MrN6]qG.\Suh&Jt0KW<Br.djMXKEVN>A3J\FD45GC/a<0r;%=R*';I&m:SLC`Woi<U8_SrFK1>@5'ee#^F*O(4\'D*Hq5=j3*mq_</)+rA#n#QEA.0>F4E?\"jF@JoPEM`7=(qCIB=^2Cjr1jH\P%M\i$nq!EguUu(>8p]'[\LS,gc!X.91$:Xb^^"jY<RfnV4Q^HC%<J4urF)5>LH&\AZXN&LC`ZaCD1rW@R`SJTp8EEFQLZdkG)R..l%rZ@mP)KHSh1iC*GDO73c78F*YD]gM.eU#2?XS)QWjDQYW.!</hGRD%Aisi?[B;bY'g&2e?$mq+\XFJdOTSn/Gj"IpX5ZWTCZ4J\U%_F(9&a+sV>B@*^RS"8/\TYXYR5%smrPLec^HM.:,V-ECIiifjdQTiGDK'$8BFM^]JV\uc)Hb\8#7',-]2F^0<a*[JcZObE4rP4Kq%MmNfs<"M"&NU[F9TiDsI6gIo0nd5Y7X/8JWEkV'GI;mK+R\AV1^H$!$s(]P,RXYi>pq$IQC:Art(mR+^4fE2%&6Vef+4NC@5I_8L%dd8dEERq3Yl_Sd2ff3ZZ%Bo'JYg(1,4*e*gX;B"<(4B43pA=N44IOZMG]ut@#&h^PPZ[R#n6GUuWle4EeT;*VUC.d!PAUasr)5^H%2M0D+dnXj3X[0-rs6$WCs.g0'AiCS)/mNR'YMBE(6^VHRnW_iWDiXLdG\09NmYEgraP/D=2;8r'1YP'EkG11Qi@rAP_$%m69-<t0%T"_dNHs4<!KR-MWU>'`%Km@jmHN.AEk,*j2R+6QVL3mfceH_^!-6)Tg6W^C9]/?6MW[Su-]iO!WO[]X2G<]r(BK'8q)0Y%Qotdlc%[l?BjGPL(q?_^VV)1]?is82gRoU(PE?E@r/HA>Ws-GV=\:fXqXK%'+k3V]g>-F5jQ-NVRQ7*b>Bn^"EE+uB"b_Y)m(&HM(;n1`q<%^Y0]QS-(JBXd>YgF"fXLrbrN,BV29sqU'%:qPI(F*Xj$<rD*SToiJg;CdV@$@'Z&#(I'qrpHTs>mJdhh7gQBj=-TC]<G07e+[AI#%BcKMGOEkD68';]#-D4b2m^$>Le#J$d"HC[3Xf-dKLKWo';"'Hs4_V<2S,W_$2\Ka&%?pFZM:P!-BZuop*2J(l)T.Ua&/c5_1dLQg%V)oZ?^X*[,NR+TY%2Kb4[sq+(Ek\![H37^:e.'Zl?=FVc0U:J^V@nBbm'\s"]Q#VOlN8dr[R>)[fWg$FeM6sd0Pg5n#BqeD4$*k/%MS>A!c$#THV<":qjmEX8$L`;KG.63jIX<"jNLKic&e=3W?S1G7eo]/YS@pD=m*R<b0*Tk\AmF=,:g!cd5ugmVAkDAGdkqT:Bu;FB%Rd(,.WQG:C"_+P/pX%opJ?$QN@I%[@0'%:T<TBMN*h@u+a=_,Rh8]8pDE27I3;bkVKO1#Ki-,[sSQBU^5sqX%?^o$[HTSSi)2tW)%5>=^d#>NljK4jR--7%SXbGJn`kt+m0T'U"NR*"4`)7Eb?Api8/HT2q_n>_=R^J@e$VKaE5jZ,g,HkppA5OGoD'j^oG5WsAW$sU:$%^%eMG6uW2S<%*n`+l++E+3IilosToGmaN!7c1Xn\#bsHE_COi%%%&Gn:L/LSg#&p92;-"dBQ[dfL<jbXU)]!X'6cD0(YK*9J#Tno%cM"$`CV/,T^NS#crYp7[G8SmRpl1j_Xm5o9m.W4!BhA>pCjP(>GW]bN]^DsM&L1BM:2B>"gq_.e5aKD!im"OTTLArn39-LEYE=:R%Igm::s".74M/X*e\2"K08^bJq9uCqF_js'<=g1a4le.Z*9@;]BNEpXQ;5dk-n9-mQk23RIIk^"8kKVUra-`<q/t7Y25sUAdH;s>C%NM39t-DM3mLpYE[.Q2e%Jh2(\::b,%BEAqa@<PReN32*?YMFZ&fbbH?n\S.Ik]k=XETl]0H2Q;@!E+,spB%PNiB[02LArG(#s)OH%pj,a:ck.BJI2PZ=S5h&/Dm]sG98*esL9"_Z!/9=dQ[H"9hX&iUn#kc7O_T]&HFk2&C[g$B]`8L*STDbUXks8G%[mZ05Ifik\)"LR%;/.rIlE5%X=c>'Zo+a>H?n>C;qVbcT"aA/1D6;mk&s*r!oFHiC+'=FuXQlMoUG:I(9j`dEr0.u!>Xij92Up7pX0+e1Ck^*d_=la#%54di/SaP6:T)+9BW$/QUd'LRB5D(:2B&`#Vgs<(^##GCNf-IR]pjJsQ_6BJKcnuS*&X+G+LlJSUokg<Raud;V(EUWGM%!@e&\7G`%T)mm$HGbZ?HbI-j/V!t#a6;>5!I;MFYY^Ae/uZ@"/N,#oq,M0<Wa3=JMC2<@@CI$[*Ne#(3tHk(en*Mj<GB1T3itk1hJ9R3nO=U2%I6X)+fT8g2cOmh$d,n[a'Pk(T0&ok82!1er6?Q1aXBZ!g`("gpHLEPg_*X66HbiCI5m0d3I;?6[_*(_R3I#6I^ZrMR,2#8Bd8@CM%H(9u428GFXdLU>S0*"(9dk]N^n5M2rklf>drC4NUa)*gF0)[96JOKM$pA`>*Ed_]qN5a3f?6Hqqk6%-uW+2oXn=4F!!P3&Y>G:`h%$6J6c[F]m+a.H@FS_&nV&pDkEJfeDN6N?QVS_EaC3$+$)!O*5sea/t#(aO@2ec9p<7,hHLSI0+Y@RPJH=FSm@>#Qk'aM'\QA3=%8%:0A:(O@/<Gp:J#".VS1V^n(k3eu--J6KSI='Xrh0eGJ[dW4tn9VI1C/LL'Xl&-'5"RYbDWfjI4HD!S\%\dTE^ZfnMIbW"7l,*1=>%p#!?O+F/am#!Xd'Hka8-1k:/VeSGIeEKGZaTfj8qV:0gqgH0(r.Udi2>b")6f3ga<2kAm8g,ufE\"_s?oH3-!+*]PN1B:'MWB%o<%:'Y15#ijU,Z^0l&kPsu3*?cd3RTHV?hmF&KD"mG!q<kEM;pWgBNmM<%4W9[rXpJhpYY/6uW&n6'T8MI]COfA-'a=[Q-P[OaQ@g2h%[uK_P?onHq_Ek\p+LU'T3j/R#6L,I`]u_`IRXr+MmrZbo9&AtqW>4P8]RDU/;QALUn$it5*H.Pb76Q*lg-%Z\o7A0c3FPA739`UI%ihh-T=i]0D?H+8?5tB+UcM2p$L.kshrX&)oR>ThZ8!s<PD,$)e&Z,t=5Jl[5(X6$/S9ilF_0+3&]@fA^p>;<N`NaV9R^bBYs52Ta%[p'_ir:P<4CPSA=XU^1gUH*&W5`6D"'&pmdTU:p!IY%CP7`-$Y7"Vf/+-7>=)B-G4e?T0YCrh9/$'(B4Wk'EsNfA1gMR`n_*7I5u%g'-lGUG!W1Lj1$G^-oE3\mKLO7&)^$G"(9qn&p4P^h=j(g+=rWNYZ9bqnHhYi.#hss5>P]s4O['IKSONK(8m/-i?@/$3(8"hnOHG%iTs&hUWnSo@8b<[CZ=^>Re9Fpfg@aRNJi9Q=9%0+N&0/-33p*XU\h6c<b'Vk33WA44T&n(>G+<?cK.mZ\$:t("q]&i-^>VC6d!uS%T[VZn/FK+Zq_0A$p]nPt>-B"qe1'3l\cU<?RanU.B#@nqeH5q)CXSWNLrMAJ@75b&Hkn5?3Eq*Q.\;uNG;ZqZ6r+_*c"tJIC1d)&%V8*g$LY9o6a&']mK!]^4,$GLPX`*::Wjm=//61R!mE_@!Zh8Y+NP!lJSdLnY1Z]jD(3e=C\\cct/=FRqI'+dD8%3dgqpC!ccYrVI%k%Ed<OZg@[,]_\6^_PF=;P\Y";,3`U"(?-S^f<Rpc/[srZ)!5FEiXTDY2u6j?1jQ*2=.6rc;V%h9D86%lS$4nmq?WT?QX)t4);V%%[I1/=<UJ]$Eg>D5bscK_\GjW((Y+PnMmtItci@QtE;dM8aBh$t-?<9b94VB#k;Xq#bGpEc;aX<U>G(:NH<=q@d*h:-V!JtJ.fgde%75Bf2I:qNJ4ePo?$u(fJ=K2X")fl`qV0l^ED$uj)4-/moG+37uhGh^-*";]Be\P8c^9-dD"mMO$e]&98RCj<E:/`V*V6S)T9H;f/%lT^W#\+8O0p641^:+Y+P+Iu-\Zh'2aViUe3ViPn#Vrh*gmIb,fHb%1BG5A/mT(mH>1Z*X1gj41UQFImX?eq5;0:lZ:?!l;f.GsN<%FdcH]Q.C=D<T`JJDNA=0Vq;CA<k>j'C*huoZdZJ=Df)0mY+Bl\b15?TGC2JX'Vq3JR?\h'Q#7Mqp3-JUH_e(<9;-b'Ji&b(,;`^&%=tr'$=^!#?P$SQsMZ'Tm#O)q)ntkWIl<XF`Eclu)VFOc\HB<mWbFEdS]q)i=dabJUWH,qZcMMb\g4.WIC[Y#ZWlt"kb0Qd;Be3tB%4.,K%C4;`AC^M3^f"4j0I?RfN?QOK93`iB*Z)"F)QE'h[-(dqtq4t+6Rm*D"4E7ds`J*+sN.pM>HXV?mT_WTlg$/40G3(g6`EXU*%d'S-!=`[9*\TBA_=PCn-YhS9%Z0j`&R57k1\N;t,4aJeC]ud*U,?<iQrmpKOG`3[/D2C@L3`WjTh4=Gj%W5T1cVBPUboP\:A'+]I%G;&8F<p;6SSKE7ZG^$_P4s&3gRgID906UR3G,ISAB=I&Zb/L\oV\SWWHdo_j4iklT1nL"7]fH<'F7m%,n/^gpWqk09lh$;9Q.mkc%FBZreg=#h/dV18s*p[\:imG6ahfBS=-(ds$(%.dpSFPkYG\lg3ZLtbk4N_soq!mnNag]`:F#3LWfBFIQ>Wo$I:6ETPF7k]g],mR3%H?Is1+6DXE:1(rHCXQbcjf1j5Xj7Hcm7u'?=A,afJ&F*th.B/<4^Lp45?=tsT[WSJ>LTZqDmDj1TDGjoe)]9>g`,K7Q4uqMr2rs`%S8m)S]5?mk2_#/qEi,]_&)HHO<e':HVjjZ#f'X5_Ea^)?/2]2;<"^!Jb54q2fZ^F47sEU"@C/rZ3OaIDZNHcd-!ZufK[TAqknNBf%Egh33olkVnqFNd)]KA/mWcGoFmuK(uDqrY08XXuV%)3Fl9'=1deC)FTcXK4WI.b/0QI7I$2WUamdloJ'@E[g_YqE%la&Vt`6nR<!%EsGpD5b<uCptJO2i+u?_HWoJ?)Z'ke)G>B=06;o*?^fm,<UTX)pWW*j'6dd^*4h`q2U#Hm4274[pq2$Ak:X1Q;gqMRmP=='pO9]>%i*a:s,ZNh"W2//+XtCCRoVlo+iR9sXl92W@p[j"5[@e=1N/^"cidN?,ZJXCah!McNi:lk&pMbPmm!<DVlsAcpI_THBhS.UPa3.K1%n*(V^Ucdm*:S7J;QMg<fm.7l]iq6sCd-'Z:4C;9>XSG"BkP%d8p3\Ugg?"AZKpL'>NAQ.VH[jH?WVkDZ=Bum&qI*&7S0XEKHc2dR%JL?Z8EQmZ50p1AHg7V6tP"uq''5Q%QDssT%qApp+Rdbdkp\Z2@[eb-d4>#`^cO>jF,hb^@e[W\b\q;4W]f+Gg8]EWghD\)^Zue<@%6jiYbRs]7W0O-*Z/iM6!i`oN%X(uu/j(d[Rrj>u`(%sHQg3M"hm5`ihBLLPre+:5^7',pl0C%t1p=a`!gajF[SL*bKYCDA?"2a_J%c15$#$a')g1sEbG.QBL?-OsS@T+dOA:NE>=F+!2uqq/%(WVj#k>YB1P4-a]drB$RN2%$K]6&Sn%Ej^hRWDBF"(a$3sl[GBg#B[PJ%diEbLZ+)c3GM4.?A-Q)4U8(Y(8%S[Z=>`1rDEH3,QXW%Ac50q]]A*>21S=F/P]3*fVr1:$kA]nGWH<2O]Hjpi#D0\nhbK$si7f],%%Lp$K(lP0DVLPMtdHS&gVeD.dU,SB+Mr_uuXJ[:BSR9JWh32a]T<ACL6O@8P>`I7-FFOk(?M]?+6YSi&rWC+W+`^94g(3uC96Xs"%qs.l@@fK<a@Udo[nQUD7P0[;RG6V=]S&0smp"9*4SEXDpB1s^kj(,EQi1V`P^;UF+m!_`*-HQLUo9[oB1HIM(i2NC4=<j*Trq870%@+4i2$2h?$1d:3V(#-fR`TWuc?%oIG%(9ji`Y^B3njYKNHt3c"'Kah,2oW$b!oUl""+`#[98/F=,mg(M^ORUh\_UYdX=?CVAZJu1%@Gm>^!e[rU8s0)d!U8[_(a&:i4i_c0YfB7Uji@_0O#,>jnt7)WfS<o-Hhp#]aT.oY7'=laAL`VZPL9tOI<:.CR5'iccO?jW=&W.Q%,`(9iR=4t0(X-#??VsSlk:H%\T=]r1q-^k1h?V8[Z"`9eZc[RPh4RD#ZCIX:h]3:l2qadt")IPUHn78f26&WpD5IUIA;BA?0+tG[%S!>qcTeAM4+<]F\LOhN"FS3FTp&<)k.p9^U4Y*Mlj"[o8IfCP-csfSui#G,-bm+c=IPajkM]9A%>0e/.gF$@5Un9]R8$tlXjj!.Q%<N\@Wr"V>eQm]:H]L-do"bZ$`kM,ll/mFn.0d'Gl0FPf]q.j[]965>\0R1XtAEr&s2YJoqD9TI<7O("X*T%g(G;$gWKJ@hu3etrj%nC0,p[2VBSVk59>oa\<o9_)GSK?EkUnF0@#MbG=S_#"ZW57HIa&:9X#@!k]ek\)GM8eI/@B>Hj!nV)pK/*HAK#'kU]AVJgeV&49:%7/@rJaf!]#eoAO#LXfifWp>5.@e-lDSJItph//KX-*u%!Qm1"gZ-Cl:Q?FHS:UYD^HS)<CZLgO%ZIWA\_'#F!%R:>s>CFg:.*J(N%1[1DPbm3H)Rs5O0#N52p+jdH\&$bq5$AOpiA'bbJ=T.K)2N;_$hp![TV?gJIDTo(V_Vnt"j[`m"9Ae>W_cV_#2pNQ'<`6C__jF)k%NJfM9Z=V$aL)]#&a&ONn5Pb^1[rlNA``-,&Tmbg<.f(9?eltH/i9JN]TH%GNCen79#4so7UKP-[CFK)?36GqW9"sc4P2a@DrkVRd%$$Z8UiRiFu7h-d=O2Y0ON'X<g:Tq_A,SgQJ0I[P?#d1mI57(9K`-9oK5[qi4hf.]3>=Au["p*H'b;1D:RYI.sK%u$1N-B:F-p*q.%nGM,H.8[3;n%]ObE7ciTK2,kqn_lDmIdakl%]@>`$BtXgiI"T*i7rH21?E[l,63P\s1K@W!!J@$Qs&tu+,jcIUk`([DP!-)QK371%m:N@RjHiNSCGQgbi'X_cb@n.U+.jN8T'cDn?Y5*?a$Wnc'_ap0Ba*P=UW=?pME?p]SD\Z[M`I[0f:I&@q`&;`d3Wd@ASs+mKHr7;%n?j(jkDb4,R6?G&N5j=36!,6P4=#h'H%fUo1/.8H-Z36r*;U-s(+$a>0'M3J1uSm)p\1>IX7"I>EpH[O"rePYF-(,)a!oC\a*h(g%Jr#Q0Mh1ZAC\D$')LkMRpPq'i:$KofPG-0a(,mn1#oE0W4c4g1oI(/pqd[Uh/.(?IWm+1#3!e`VK`0EY5#HreXpbYT7^.PmqbB".%fmMJc>Ye/5kCf%Gqel'C0cJ=-q9!EgWV;b\`KJ'-mc5C&634mkf`$]@Rm6rR>$Qpp5r*TnqkuOt>8FL(<-0:0#^\;.=V"NA"?k'a%0h\e@XUJd?YOF8&Zd(M0E.'q/q?/m[m?928/LcRk$]%km@og6"E5"_r[mFT@P:r(m`_"'D)iI4dV,ONt][uqqgK>R*)UC9\dS=C$%ULJ&,WS5H_J0l$to9%&`;^g%bF1:OX3^)b+?=-C>_I-"RB[#R^9rr4D0#s\^Zo($S<&PMG.-j\aLB/;=dD0medk6I]ALeA:\9V<s%$*bbY0;k+L8/Es1a0OWU,T8N$+joM6LiHLXTWtaIR^],HEG9FX\W7-gb;5O_UUqUqGq?=n-o*'X's^&L22_/7LSj"qe>"DJc)dC>%1_SL4+BTt(8]Y!p`/fLeUGu^!<5Fu$"autRpSKPkMaE4JH`kN\B\.Iq3ML).I:Wdh;cc`,O:.&%$e\W]0maXXpOeg"Z0)&Z9eY.g%NaPHmW]<!qq+@%$G'm#2hc?8YdV<FK/J,9(bFoDNGn4a>lGfTdVZLou2Hd-8eqHenG6nuPG/gWnlZ3:CI$tVMRWs53^Lgp3htukG%YcRB9g(5/1[-t\MThc(4)k53gB5,N7ag9?'osqu.BJF15HL4'T+:b=+5t%C9&(Ik2iPO@.IC3Lf0(b5Zr*4,eD&AoR=&QQ[g8tfc%;Ib"b5+;Pq!6F!Co_1^2:YFJVI"fp>b243cW/Q!q8AE\6E#'e-F@YBhUp71;[kCusD?iWGJn1ts@nJF$@o:.D8B\%^<i4L6.HBr(%#DTD[\'t/(`,LASDAbXO]UUgPFFB?oW?p0AM(%n)?RP4f81h).f0G@Als4[n^NBG5%Rc@8\K#UV[rO[N2i>1T$Cd1\kVC`S%5o!=%`6feT6Kr*"E?#Y0]a'\Yj;S_EMqXQEA:GJAD8*E)@<j&=@jD)s5:l/m>R"J=0d(XCI,K!![3nan2J>@]jYi,`[bFmVVojDIVcqOc%[N93#)^eXK5o32>-AO2eQpJc'$r*!Sa)7Uic(JQB$(*&p/i\L/c5)p&LQ:WK,D2$03BU:O?#TugRk6To%UF#X>sPjV=?1K>)0B]'%i&!H9_&7@?Cr+57k^kVSW"tjdLFtQ=%QSeM3HW(TFEB(ojj6"H,R:-Y=`FI`oe"Cjo?Y5KNW;t181srX[W22K)f2%n>m(md,_+gu%Y]gh[od`]Jkri/fCG36u)W+i>).K$7:M*q$43M5XVjYHa$;//CglLX+`Y[!(fKLjYn[W^1,%Stf*hPN72$MF#K%!+:8<GYL_]i._%+SD7Jo!h84A&t+Z.V:n>)*J,\O,(PU6)\E.@5CGsR^G0,;Bga_3aMtW]:X9Vc#_K2BX6C&><tCLI8"f'4(:<5TLqD:QP>bP(4@]h%YI"GNG\dSPa:1F1NgcXVAII)/MpQU7&0t3pP5,qhB"\I7@1e[D8Z)0kVn$b5Gc$jSjREDM0THl-_\f0\&F"=j8ULSPcG1T,\li[5%A/iooFme[b+uRVPZS>TsOn-;p@@0&07NUIIcWD&4!I9&&bKD]&Dj_&<q5:)II?S'oVKBm#q!F_;nAf0BA3#<l7NPph*r+rEI%EF<%fpqdko(ZH%bV3WO4!OSA$V@RZ$5`5pYPd"r`u\dT.08Hck.c3s!QIISDoT\^3)*o.^b7iWd]q2VA3YcYcU>'MGMFq1d>T5qZ:E*)%$]l,f%3SrnS38X>q,$>R^>n>AH0g0Ci9Un36h3HXgY$J[R5$PR>TCKb7fs\4cJrRPVtXq'g(,Q>M/kco@P$0&Od2%/2p=54c?$QX%kC+g?,0(Mt@cLm"E[0koa)\us8Zi)RllC5[=$^'d;jG'Y/,!E@54h0%P@N^],CMNh<9I@lM_nr:Kd=`n80._h./+4GM=%S*]=p)X%T'ERO1EQ$"H+J=h6aD"(p[3:bSUep=k:-tGJD78da9(=gE=S)3'1"d4)Cm!F!#"^UQjl7`7:`JU]:o<`?:;fp,rt##lU,ka##g\^%M9+=3p9ci%6q1E`8M,2_ENFhMkVhde+-H*dpV6F!Nl]#_Um1oINp(1j&L0%sk:)NMZtUa?R"Qft1/]KUaQu?OaMah7kP7VY+slE>%2@O&-XRr$u>nR=-Z#&Q)L#eps17%Z_2b8mkPIPWO6:>2<?t@TK\9Y&C80*\/DV2\:F4P8*Dks)'U[fePa1OES5N:7JYk0[*\e$#h%0Josc>fao/jOH]@*t=aM,kE`5lkX/b#_O/4&?(eVrT:;!Wuf@'-20GMPkd*;Za200nR:F)32\EAB#MqT+)]g(a.h\5L%3f3o&8e(%HL?a%n_4AqLPrl6Fdd\;`_L,$ib"_l(O@:h9_.-DG!h[pjp^h>fUIg^VW!L)iTM>-G=LAhoAP)&3+n`l([R(U/aI4[F_?e=Ns[LM%06uVAOjFdac*iS8-P@=2Ah`r[hrbSPX?=`-Agc[$/BeFKb/hldnQ0s,4&4s!'H4/7$u'A>*.-+k0aS_'aXkl![H#s7$t-8%n<%lV%K-@t6m%/s^qf4@ll+Xk;e*ptL6Xe6LjkE\cW@?6(-80eZB25rVoA,kJoGor_eDD/tHYmU:S'eBNEuH`H-gYZ;#i7(GB?Y)RWPu#P%1(CF7FeShL>/&amY==NT%Qb+O'6m\*N,N6.&XJFD;#=e!f&t>+%ks$$^gFFl8GtEhN7;4@a[j,FSj>gq5F7j27Okc$PDiIWBDRQd%Ch4A"WL1@7ILNT!?_;99(/0g?6W54H1326=!s2qR)F!hlNb_Ju_^*,o]q`Uu'opgR;0MRk#8u'/%mLGJ(9)9HX>H+!r^\No`.$fM%WGqiL&BusFNp_]/8WTB&'onfXqA?;,,5Pq*"(/l4/6G@Y6q_oJDNG,g&`1)Lc%EauUP1'Z:lSrNgN*C/li8fX2>"9E-EporgkQ;n%0/!$3ULOp@KI*.]ds4fT(Pp6*bBj[oDK^Tl3pGD@&^2lki'"$I_-S<5H[,2'?AkC9>>Q!dO5K,F.Jc=]M&1t4-'n:,q*_Z3p'WMb%5K=/M0+uGE70UGs@*N^9\,R^pL$MOb:e'd,:DRIsioIa)Noje*I\e:BmA.P&=E`br%@.d@m,b4lA@L(3_V(hoL7ORC%n_"lbkZES%0%K[[<1,+J;>qGVO$Um*$/*'l]N!YN<#iT4cTgl7/b'BkM;%4F):PSN\i@?;g,HoEr`J%R[G:@H!P8Y1G'iCWSN?6"He@l7YY0E\%Y$V#eXTrsZc)h-*a7m;,n(VR9IU9SW6Z4k2_euWc]BGt=:=gKMSpW=MnU;C=l5e20SU5\]C<dj'-R,qMs*=HO&)tS`gP2XA+#BfI%]U_d-'P^J23./p:L]r.2puU?\muF>APhJLnZ0M,hT"LgFrqBN3GokN&]B@=$[3tU,QI3Z)Y?9\(2p"'GqJko0T@HYV?DNJrKf`G+%RjK*&NqD1._J^E6m->%hb059f>^-s#N(`5Z`ts3n>M*L3;9%dAQJ08+W);t#M2LqeRi%mG([gZU\rVLl2Wj7R!M/?Bbq,@0bIn`K%%ML"TcH?afN5A;S:$7d7(OeQl\Ckt10u6t4f%G.O\TBf<At)NX`At2kB@HZGX_4(skI$F_S.e5`A^cA#;4L?=S_#o^pY+piflTuX%dTej5Q'"YEl+GVSB:Vc[T//7GCq>Gc>YUV\a)&DtEp5\f7An;*o28%48!%[*flUOC0rrh\b,4dQV=V2OB?G$O0D\ga6I%-OcDrC(%Km/:)FC)M"*]YHDB%'J3Z15-a681<mCc\b)\hPoT+e-b-Qd-u!C5Qgg0?_h8><RBmSX7-3hO?3WCc\cM'&m!<1n2eD^g`]*3ajq;%(S,tU7OHEX@jtq@XT[jS$+&m/rCUF=9UJPp+N#r\rA1u2c)1(N&9A&<T2CJ2:$DY@p&1/l8FfNU&o(kY-&@sCr8&_0T]<E!8J@^_%V1mC0R)OJr+kFVkm]5+3\?4'"\ql*=d$nki-7'6ms*N]kPMr:A!1l1jFqa7`1t$gI.pL>jp-H12Kj@"1$.?o_%Kn9(FH-Kel![&G%0EHDrU.Z>1O%<O&57:5IB[?&XNUAuN#Jke*bApp22dt"#*A@-@%hm>9O*JoT/5!j*l>,fYlltej]82;c1H7OEWb_%T/5G)\m\6U.%q-7u"AjgXUC[O;0MXHDj`lqF$^#j4n,]KrFmO$TQ!IB=-Mga#pY4cLqB@5J+c"Z!)Q^-%!F*[J3pL75d+[Zq-]_3D,\^qa654oXN%qn@E,h)eV'0<"L"`"=jWNSI5EZFqjD-8NN!)MsZ+DqK(]J>?,=N\Y5+3><M"MiG.$K;&+^M-U.odfE8o3$LQ+DCAuccXo*Mao.j#%`rP!o2F9jRI%8#N#\h7dY^0,1@QWVK4Pu]8fZll@E244f@DamT,@$[4)Y60t0Z":cm_mi:c.#9nmI+ZN>#P"2YM[Sq=8mNuGG@72%Ts<]M_MllJ^8O0_&6+[6heUTe&m/qE4/f@HTsqkIA4?n(Pt-"X9U;)e3Qi?M05#K]iMA&e@D]R)eK)h^pWn629OgiMXT\(W*2f@l%:C3]]9QjXJ_gfLG!k&Ms[oX:kLdrZ,'J$h(H]:cf..]u?QllGp_$tU[q3>#[:ID"Yg"fjQG/ITBCOFhTm[23gcTCR7be3JViGPBZ%o#As&o!p2fg1fc^i@aVIrWr<Cd;HIPq)@G2XI\R0];VWrDr6%?S_/Xo2"Pc3-X&o6XQAV-rC6MI_<?``r7lP+V#+af2C%9hKP!E:%g$R7YF%+f>'[7!AF%+fN0!U_L6?M>]M7()"c\:+?>rbZ/qoIog8Cut.2N0_WBlnD*k&4N0.ko;ZQM8(2!Rl#3,c5@_dc@IJ][N7"%P13h9K6P=\I8M#/B^?t\G!WUlmQE(oZ-N]^1-uW&2=]L8j&\G;K,o3G?g4>L<`8aD]o8Y>Te!,C5R"#>NGBBFd.LF@02O]fZeI/u%Xhc!=m_1,gg`4pdhLD/g/IGbG^^"D'9li/A#f^J"h;c\o?@WL/Xc?f,Pk/VmXVpZ+]^)KZ[t+=W-'9/2Ap2uTJ/!*K8)tXkHhM?u%LE4_?$jms_qL)e^&5*p5H@,JtB(oTha&XDURbu#i^,!gtbDQW%Jjm7>(WMDPNmtH8J5>n+:6Ca2pTVmK/%TpggtLPXDa%G+k;i"'%KEo2l$1I:Dk;)`oC`^(O=]o4C6(*5;H)L]%b5HZK3qr#`Ol(M3p$9!DS!k*c%^`"Z3AX]KC>*(pUZn*UVsS;J076nIFlgN;R3Xo\%Xu$@!l[j&Q>YXCAHob9i(XBaJ8$>Zt8K;M2_Vna:+Sg5mSUJ6Cm<#=q;EsNhPrfF.+4TPkP&I8s_<"/'X4(16k5K3\j=VEOD<ba-%jI8GkFSWB8'rBdIcW>me0Kq@Zq<uAhol4Z'nqY&*L76$pRJW`%kd5P%UqT<m.^bn_^P]<2?%d'Ye._RY&%\gcj:[%OqH>c>MH/;p%Tn!O7*&b"P/S7k2MRjC@FJ4VXr'7_pn9I,n/_u:7SEk/N9B8Xl>p]+U'RM3<0V6;;=r!3c[d<<dNL,pm[mSVe:2_D,)KV72n(o**%?g+*RW*+=PG6cE[kZN*Q]@gY'!9J^gc'\*62;hM]$I.ek=Jos%E>U%5q.gbK6oFa!g5%K9S*Y*_i0FITebcE*XY<W(XfF6\jgiLX%:EL[ZcJmVKbQ0P5n)WY8P8j0="uL%9e2IahjM9&S3Im7``PT9RC>^_H8F\FtV@e9!D<F@_%N][j#ue%Pc:<<qkFrM366:N&mZ8#]%,J.j54R<E:'lXl$)5*[kp!KK`T3BQhXc,?Wk[T\#;eSM(gV@k$&c.V&am>;2`ceTJ2F\mYp>aRCe)XWEKUd*kLWbL\oZqFH5Na/@%29oAt,6?,1;ZRd4\X!oBo(OB,Ee`Fr1I==@]fhuk5;Z4b1,JPIgm&Yg1#I@Yl[H*Y)B51+"#(LZb;0XJAp*5A2!2Dj3=3\,'%07t%KcM\V'4q87[18aOV2^rJka[q;3Ii0KC5e8Yk_-c:#LITXnsER1;0)^Ham\Nsq)'n`NHuZ3@UipLqM;_F*5K?O;F@bj_c;W@?A5Yi%!.F>sOolPcA*&W/Z#A.`p5u+^!Ck<7o_"?-0>0k5dA;4(hT.V;V0oupWAD5P0-mPOUJ(Dld=oRSQh%]JfH7\hO%)Ve]`BeOV0lkh%ma#4^LHL;VrRjj>`kT9/P"YU5UC%9+e+6I3@QRM%_TmmFDtRUY0q6/8:u8\XNLe2QF0FI(B1#C4YFk:1AoKYmIBVNbqimi4lPH(6%2hSH1aM!&OT+)Os?GB&,PuHT+B4Jt4Pi9I#'A_u`&U:?`//c97\$4nBYMXSm>a+%1kN3'5Xa]]/.[/`T(Hf(?q^]^sf.Zo"^Su,O%1%+]B*`-ZBp\KU2:n>kEI_ch/`KF`t3=E@K06m2Zf!mg?B\[t5Jeaj"*h2q25K=P9O^%d]3.]4lY@$eMWS!0toaB+.R)Qaf_709#%G9<IW]mf"ta#E7rIa2!L\,,oje2m<:IfA*DBJ6^&f.VA7L!$[bn+@&^:EfVTB9ae*J#f2'mrd'*rIWX8;")`i?GGD-f=i-%A)?P7%QNbC1-;9j%!0)[<O')%eLM"oHIaR?X2#$iLN95Ddhh:aoNHpD:msTT4k<1N.qG!7"ETue8]9\6tmC&!nY@$e=<\&[WRYI$^lPFr?%LOCi%FSGW7.9E*td;6g!o^np+Hi:hCfIZI`$bk/02YZ`qD:45d+5b"ll.FkY%.<dE>OhE`a#gtCoNo;ZX8)T=bQR\:"XRC.IoF+&%qKr0'fuptWDq_;"BP%a\?9-QLI_fV+P?C-#]m_lJ]s;T)\W:\,/6nhEpnj$_\Sh)0mQS@`=h"KZXuu.FRku#>a@Vou?9cIe*4aU\%oJ2&GrQJe1mp#ah*1Qq6^Yk)H`.FPr]mde8]7I5TjZIhGl5)U$l,8td?GD?qb-CC-o94at<kfO>*\7QRlK:3FIc>_QJoC=?,pSe3%FunB2$*g'?H%LDAJoC;iZ,`Rd`!5)`a$^W>]%:j%)eO\KrHp%c(2tI1f7r)H(M1ACo_81c.gM#n]%'/h3,53SRD3broYS\0%kFl"%fJ)+8j\!?0g4cg4!?\uEhO1fCZ8ibNlFCA+5b+%D4ma8jX-jHU!g4m<V*NSo3b8Dcd$/SVd8RC,mr+`([L0p[]csZY3Z")?jsm/6%k#:YX/l(^17.NOJR(ts`@d.mq,EZ@5?-KBfI-[3.e[(ah7I.;'<NEkB>kN;YKraU5(.%NC\uc'Pqc(m]#J3K%gqhUs4*TItIW4J*%U<['2[][-`_8dL=`=:SWe`6K:pFCHQibl)hC$sqkm[/?K]RJn4cGUn#/7'uLc\JLKI_T5AoEY-Hec$*:\V_^15>PHtYbWnG8T6T+%gs2a$X0H`YF/6Qf>s6uW-^GR4f-^s[C:f]m3T&[tr:it2c09qWe9q-N\LZp&a"P32.r3=?,%0CXgQRYh#t[\Q=Y,sheh/S<gd8=J%V'fPE).LsHjHg>\QqhshaH^WgjpFZ>*l4,)$X!U4J?eLj'a`7Wo?BG%4f8,TUKke[lc;VnoQ=b?>h\1PV>V$.H[FT/[Z?K`#4mnu%$YHOgN;b`LX-n+tk`.1CSe<k-nW^(\WDDTD5H\t\bdr`bkO`b!g%V$5ZK&(2ctr)Zl$]"7]9l-+IMEL+U3MgA*aYHb(+S$0,4h6b%9k7#^<YN$\dN3j!_VEljqLI@u#nO0m8%4X`rgnm"f=s1q]BMbQ6AEYD"b+#+YEiDc!fnRRg0-X1oEgq#<T-c,Ds'8Iqu4;1hla\M%K?k8rkOR\>EC'UCEa1)$+Fg,19Gu`:2j`K_*S`qKH@/rnc<rrXpi@aH_`r4^T*LP,"NZ4(p%@o\k6gc4=8_>)%#XqsIQ`3D)!V<m%)f")U5i@\Lbt%(;k#$Q#]P]n]kNiF?l1T/HI'?hZ++P+"?8N`Do@AOa+C2:4FP0u-[S'cYD3qTQ"/b8Kh)sUW]*q=!4p12rVhKoB%miQdn`fn=6pmoYc&Wh"DS>g%_5I"`N[BmKg^V"4M=ILNaia3MO'n_)\E2dMsc)pS>V*JoZjBjiiO^P*"n]'f>Bbp;:fB0@$%-A[2%Z@dTtk9Qk>7?2I_3Yg)4>H?E"Wjm=/4=di2n&r\6f=-CTrbg`Np,f@CG1ikH^#PD)+h^fYRpiWmUSe@_UetA3]bm'riQ4E-qr(S&%0:r1p[&UTp'+W('B<#%b4%P]N0\@JV%(b4VMC+6g8.5hTS*I%7$[ttP'Ip$B!g3Dq$IjiaDp\4$""oi9iXOpQr^CF>(VbgX2i0Fi%?2[[ZcWd0`Vq2h"kI+d4HcoR(eDsi*J`g0\CmjeJMX5u<kCPEg5(Cc<=Dej'HFWU!`X2&(A2UEc+1G:]Ws)^KO]<GYI?tGbr\,<-%9=6tEm7tX>oJ%Q_!BtCM@=%>DDg`;OHACr%)9[Zn!RGKIq<Fh^a_9pBXa55g)=hbA-$.=t'a8k?0.s?.4kH:RGIO[18"7kkQ5f/'%,\+`VK[NSlC+JT^<P>@aWEc`.W9F\2(ZgFci`Sa;HRHcQn`."I;d\@[rn:-HPg\sua];j>[8FIdJ)+*_1ZoRZAG'$gq[+&9EWu'q%%r=[qcn:_sh#!g`&]iBWQ*9kk]el.)AeblP+:n%!D+*.W!1t#4PK&d,VY<o[K$9PV'U]R&Z/1*teRd/D[!42@dW-Z,D+`!R*(a(!%=aCH2ii5e.Fn8",UBVKieiTLpODg1apMN11#CL^Z"*_TJVeslQ=ac+#Hp;,c/!.,Z]0.?K&],4f\<kNDZIGK3eG/C*g,/VL+4s&r%g*o79()u8q<NfrUaH\TFkn)(X!u8&8nJ$3%QRPm<n&OqcOWb">h^'0?b`b9-lJ#Io.TH,m\fA(ubRk0)b44jl!R$c\1X@sTbH*Q.%!hRfaT[["Zh<[0qNTt+%OZpA,;=Tg501q)&:ckD$VUpi/n7q8peAGptTGR._3@aS/r+M`]har?`P"fI#cV%pZ>VWhrk\1o"]_)\7%=MHSn!Nt;2^+HC:aO72*rOMd8ebLg[Dd=rch%VMCJ#=d.GKLuJ^sq/jg1DpT=ejl/^J?E0_FLo$Fnuc64"[pVMgagXqKo9Te%_kF%AU!9pa7!dK`J]V\:jG,CS<<CqRcQip@B%+$P+>4[^OA7?X?rWOHFu7@c_m&;`SUNM=K]<P^gE^A^4[$L*,_Yb/Y5UQbL8;(QKU==%`gI9k*LqF9diKa^M]5VVV;mcALK[-4T?$?p?4ZJW54+$jgQ7o.:WltCpE*1rr7Q/+r3kI-nNsf?b/IgS;/u%HqsuqYEVZtHFnt*Q%[+sNa&8>hu]MX$u&6"e:7BrYFRPMWuE43/PD73'/WRPX)kG6(8I2<:1b3i>H:ogu!P%?"6Q'UgPjJAF,f7]C^_D^&4On$,qEf.TK%>\<#/0eq7pNBJOaLE8;A!(Jd57\;]9=TdPdh,q&D0Z4j/J*2ER]c]&@]JRBhaF<jn:lHHg40su#:*52Q3V\lmoG5O%j\e"!drLM+%FK5kf[<$YTDf]$/PFb(Y)@Y"q^maOrNDD=_a(.AT<Z6Bn27Ka^f6;"+_i$qU=ZQJ;4P;*J0XHs[VQPl<lKH,S7QUX>C>^BMs#dRa%4rDs=4uSOOa)".j$t4=e:`4&W7@e5!jO@X%Jl"sO3Na,>?\d\0_*=Sh>UIW>>&=,q@^Kbl<0&ol=OK3;%n8'$9l6gp07fn,B,3;,%VWKVB]f(RLkn26uc*D>kKp!7qV*$,UVfm,\bkAQKip5i+%K&/1YF+^[/6-S'_h[63npIh;G0sNrp)dV$jn?mX!r.3la'48sE1uoO%,b3KYGo;!?n.O%ci$H\;XT#kNA4q3IIjHX_/oTJc"'PR]Ns@0di/H!G@#X=k5(cY6bR^_Af'Putip'Tp[Aimb@J#Beom>lg!;suc%I48O:D9RD>bVM(HFs"k?+UI#Wo"0o:8*tS1!UPX2qcFJF!9c(#hFB@L#"QZNBOc-VUa>:!QVbfef7&9=J)Ie:pHHpCkgV:1I'';K%Eb`KHK(\37,P=j21*U=L[@4@m`l*(#CnhFq\]m*,95/\u8lg4L?p=cu%qHKmR!qB+qY'272M$OPfFu<`f82(f8ITB,_R"Il3>R?p%GP?=AO-rI`a3lG!)_:$^4`d'oT=IgZ@3BScn&V(N8)WlB?$SCie3S@.>O\mu!_"hn7/gFqb73&gK5;W[i]06U.L\91M`^K@*n8Hb%3W."L<Yi<4Q-+JAiVnX^#nR)E>=K16A%ScoE=:@:Qi_JpSdA\mIJ:nGdcXNk^62Qa"tnFEXB>M9qIN($Z$Apg;*Dp<6,N70N4fRJ%3#L]*0=Z\ja_>UqaM<JbYO4&C^kSh)Dm+YB>S4`kU@_P7'\NXQVLBPX`Q@u"XMSAZ4l]YARFoosc1&ZH:9OtZ)bl>e_..#cZ/f$9%CVn3T+ig;iH&Ti[S]AhDRW*;dP-4&'96<,ZN]ZF<EUmSIE[G0bmjO=/9l213D5i9%(A@7D-/ACf?u0Hu>9($*E@dMK5JLpBUf,1#%,!C4!`h>UQc9JpS]9dMi(n5B4@RbA:$(Q,rc9J/'3h_Ts=e*?Ei7(8WA5Q+\`#(E4']IXlh2`M-SW)S`53?9Nce+'TamZq(0R_7U%a!6X>lUq)k(i6_V7cRu4V,BC=`Q($QIdLTC\g@nY9qV;[D-t9*;^(rij81<!WH'M/Q]A(V5f+'97lKD0[?P%<5*,%+DuuYs?YU(o%+6l3L,R/%>,/5qR7Rm4>fA4F*3UT^G0bWTf2)/Q3Ab0a6^3FYnq_=6W8&!NF'(B`q9B/B?&Cd'$@_V28X?D!?QYXQ`rHEqJ9tinD%RG&dgra9VHXFKDmpt-Z8]P54]=i.dPH2\62$/'=%_B1'dTg11)LC%nf+8_7T[r,gRUP(Smj?H=_6?^^/J!TSqqIPtG2[oTBAqi=V%`G5^DPt?LoaX5#t,=jm1']3D-qp^tSc2g"rj$7d7&b[i+k8o,akC3BBg+Wur=3(;UU.Nu1J(^8)Zrm.`7Buq?V=WTec_9%1F4/m_%ccaEh@tQDj$@Bu&86KF#k0*<j08UINmg10p^L>$rMfQ;hDF3-lZ^WqP%2_)?J.]('DRl]hOC+<,oN+UQl5qr`r:]/4LO>11V+AF6%U[3%SK7!3#CZf#6`'M6ps#dLS)=(%bjfMn5Fi"pT+seEb:V,Ua3jj7bAu8",0q0pDp?L7tFa)17UVg0fQU_>DSEj&r,\N"2bB9O`%W7%c!Id-"?R["toQ\Dbm^-3o]"$Ctf_+OO+M6W\+]o,)u%IP"VH'Q+`#P4gG6$QN*HP*h9'"114$-BTnZ\\ga@&!^qq6X!aY?.MJ%W!pu=RuGei//!F"N\)M]4->W4Ol2-!EU,HH1/Lg)4EbH"Q%>4\E6k=8:m-b]_2X%@IW&W`IOVsKTj[%,5PP&<kSJjbI/*b2%qdT$%HMhLHJagR`.!Rm=o](QM1Nl(C(>_j#=Xg9UQ5=rf5jAS36+<Ub!<Y?'_QmSsR1[H@\`#6h\aS2SbE<MJK4[ZC)L8&cT[_(RKn7Mc%G8&tfr`PVCWE`\"i\9CMO^blLSDD#&gElZh$&1+.2;r;#jiY[j9T#Eq1($AS7kcZo'[)iW9s?=];/(*JMjt9<Dfb$H@lCUY7]"@r%j"n,`^XuY9kqrm=/%tF[cM^#)BCdFY;`T?4Y5.BCl_SI\j(]AV$eCdP2ijd[nQ<T*dU&)tnlSl0V#>NhKLm%&9A;Qefo/`(8j3K@%"ZO9efXTCqnlXW.YmH3Ea(+j=*XeA*km/1fYuJ7u2&[#1O3RrqSJlbd_6n*#V(W7^A2"^(Z>V92S/Q[9)8@/F.oC-9)VH^PQD`9S%b=7lTij!(R@CWUU58P,:b59[QC]84G[CVQEm^f!bgT8l+[Z9Z,Vl$Z.@qPmMUSFM:]pO93E(_EVTq1YnA-^X$^@!^kCEEb+,Ejr*%4CLI4m#s5hkKKGD,9pr9aj,=h8`;7aD*7WRA<8D_)5@%6Q4AQH=jEf:^6?$p-s/[X4e#T]+f1POdRG^o@crWO/2Oi2e]3q4o>+In%aVA+84P2>0eFLfc-C8]3J4W`eh-7R/Y7SO@-@M@p>8\bhPj*J*AnS),P"V"3m%@a^P\hL`2utdZHo(V37tQk/bJ-.dlXl1-Bng5P%^@ZZWcqe]u>:bm"0UCg[KMeQsi1D""Fb"tt3@94_7fMW=*D^^sOSUoD9]>L='0W&t8cp6=X>J-r0Cf^\%S6j?RrddWh:-R0%l@LX%]%PIeLnIn2N=Zie#A]aNe\8>/.30/RLITG-0>0ME(s-nZGCi8MB.G]V?V(2R5-8);X??r#8YNGrNZ@mGDe+sdma@U`gc94FMb<kE%0Y[M@4jolleTCc3pa3X`T%bpO8/T%r_Y.m=`'kE4g'=.1_(@eJS/H0.Vlr=d>Z$'s'jY\S[N7uj<-_olo)("8p<(dB-!aZb<0!GN%\r5-plh'e3R/GXF1B/C&A/O=#E(P*e`Pp@hg%\UI[phq0VJ+JlqC9)83A+Z$e10jrfAbK&rDN;7\+L,_e/G:<%s+$FHOA#OV;\K/%PO.#T='-_>MPfGolkhAs2jYs/Qe'JSVIc&a,&B>ro8]SbD>pQd$-"[T4`<kBQq]!6Lko6CEo-W&Jl'SFA[m?)Si%1'1$:]HfS-VO%*foNp[W4"L`^qn*Xl+UiR(UW$OX@!Wl.P3-?UW25WKLo5$j\gJ;NNSl3s%104ij9mfV_lnI.i!E9V$:H2RGHt,^g@(rS58m`Df?A%137.*q=_X0hA@>*1cp7%PjDG;#W";c35F_12jInDb<GLD&Oe"\UE%XHafIT;/7E.&$l/fo7SM?S.5/_A<TW.?iU!JullYt+n#]>I%)dA::MRu!#fkGPDrFYYqq=h,AIJrtVG)#OPGbK@ghVH`C9(TIFBL6jI6!7bc/X/ba\0?:"M'LqL=KkbMe$hPck0MWEPrJ,C_nE$X%WH[llHP^kpEqIt2')*j1dB([Dc6/$phU#pEAhB(6%7=bE$(*Bl=.9*9:Gm3<nB3]`80CBO^=Za>$-CGuXhs"ENGM=jgf?<t<]>:U%?V5f"SsLOBgQh'[F/D^,KVR_9*9_jh2$UGc:i!sNaSlM``W6LNF[pXl/6&udggm[F+01dUH:%@I^k5iZ_R6XKj7%@&a(u^f93sLZ%9m`Io(#`pq^kA,H(#`pqf]L-]X9`/PJfI36]bS@DVk)RsJB:#;/&KnmYXO%@/&HRP_8oJhT&p,_C_eUW=:Wo5(R*S`&M+/D0;c)s%,$5>p5pXq3%M:7I=E802+bJeU&nYt7+o"GIH3=s8cEYF9H0r/p:m.f$[K!c-=F*0t+-89)aR4tFY&)sYUSD"nNW%`WcO]c-YG]\O%n3Fajgt%qGQ2/Eq'h%k=b?e=^(13De,CGC&&eP\P*'<C'"1nKUR)8H75S*9sc(-Ch#PSYNdj+E?b"E3nKKl:i9sdG1\m/R`n2h#m%2lQ5QA0eg/`DHr!-i'H,aV1_.hgWf,;M"+]"T&[!pjbB'GL:ekVd^&n^A0>3H+"3C=>gSREjB>.%.]Z)2F5TGNEs`?f[$n%<V4FA%.%<\dlV&BC'=@hKf9abP*G&=dkE.<:*9F,8g[;2:1OW6,Nj37!q_SN<0H]4-X)2kJ1@`6s::?I`*(n4CR#s0gSbjt`li7nd.r-YG%'lgB]S?l6.Y==g$KgD/E+PWnW2NX%t7!W4IC+i0c.K)_XXd@>XD/=*Zl_WEKf6Z[hY#]$jU3"R>\\KOqd'^%BPG6Sq/*3..?nbE8%*Ef%]^R@Lj_"7608erjD:JrKMaH1[Np+U_(M3.dYbV6`&L(;F'\%lM`Lb=dPq*IhA>8QX[3a<MKn6)e;:2BL08eOO8VPW*Z42))F%&XM\Z@ef]Cn7Y'L/]/^iXtRMV-m6^R-47o)NCOWcq4)46M:rJ/_X[b\K['(3QX-X;[j;6\=lUZLJSUNL/h>=BU5Y)9'<PE8;[aG`%1:%31OTrm(Xe&7_UGh)_^p;c]/3-iH):sfQSe$K,mO#6g%O:.O^jB)d2N](s(o.2aL<F[Ig0nq<O$*KQ!#(p&GcrG<1go&lg%7,-%)]MoQD8=d.*T"a,&gj+@Bd,#aZFSltkhLAKiGKh]JJqja3iiMm9IeY)9U4]`1_<:a2ShmKAWY'X$F[<@k3_CjR+pIN4),N^hGNDO%3o]F];6T[>3:$Ar#g6^DUFJq`FU4$Cr)b60<%3JSLr!SP_jFKi'K?>Y9f.eW;C@jP$Gs/(Lf$#"NjO7;cHmp7)m\[@6AR18ClRe5%6AVk*.i8JFV*H8$JdESb(.WU`A>'QcTL"0&E(cbc)OVT=#S-+MJAfbSl.DDLP(1/kHgmh`bM5`/I[n'9ZQb:YgcR:sSM?]MTD;HQ%E8U#Wl!,9Q/B@/"4tAIrERN,Ob5aBUG[h_m=;[q+`1&G6Z9n<=r5R2+5/u/Ik0-:W+;'>orWG1AY"r'ubh$S5COL_C^"4Pm*m!o(%?,nX&n[eZ-qqrT,*FQIN@iqp&0c$9CniP;.F8@<"?2@#^I'h+`?)Cr0"bA6%i*EWh"S$lZg.rY`B;E?jIOA21BqV(G=89!i1YRW]%JiepBLTH'BPMMa#pn),Ma<q4<;?bjiCZ(291Ci"SGf(1Z\JFC@Kk58qU-fG@(=ETdZl+SQ,rE]IL\KXFkF$G5k%"7ir1VW#95SNP%A&@4NW/M[ec"0cH2+m#U8'p6u@JgnSg5DB#I<3Lb)p9nd=3AM*`RX/BLUu@n?5,IHR\^Cg]B)O-_"`4mKuP`5S$CYfo#j=bM87_o%Fn7kbQSZeZi':;joNQb3MOa(%[9(D%d]L#HG(g;75ARml)\">5?J]6+WAh[0T9jiq20gtOBrEKdD&6.C)fo-PBAF&`^9GX7J%eS,%$+DZ'KA=,@@4[kKS)!-UL&)_7A`^V3FBMhK9#!l>MOUYZk/X4V%U.h!NTJ.<>lc*:DC[?gDq4_JEencX-,0o`n6I<9joMh?4Nd'C%::p(_**d<^D-fl4@![oC(7_7\0P2iG8E*f0lr:Z:Q84IGhH?@$l[-&kXsVBZFBRM-A^(DXR@GnqHa[`A3Q'<WIF"4e[s*e&0&->3%)mND1:qJji<:)Np29ArU#pncZiD0t7aA8YpH`M3as/4P2nT"EC_%.X6nSq]lb<fGLnS\n1%pi]o;E)n!is/s*4r&tR@AWWXCiqi4%r]fof/@n#-\D44)=5pUT'@^<IVZ7Y'$#7AQ1bOGF!JF6'/ma52fDga,^^h5GNc>7';"tS!Ym4Wb6d`[.;Z&4tpV=`e!9a#X9MtGp%b4.e\-OX*aj>ACc'iP8ncO1@aVQ+*3=#`@7P;GH6ruFO[PilROM8.'s6;^VNMC<4ZX"f`lY&m[)gO36oY;(_Inq&?tojgM:9+iU,%NS-`oVbEcjSDBVk"HS\Z`_%m=cG3BC"#,nLlu_N"bsqWE?Z3;jnQD%'nJml31_F*Vi'gLA"XIYcPW2+=#YdNVmkI*>o7F%OUa0UO%V=7_r;.LN&XQ9IOHG&kbH\:`ZV:[O9m6.>F;I5SVX<VJ*NoO\;$o+s-10^\,;I0o[7#VI?;,sJ]!d&4XL+$U?<AcFEKG\<219]h?%=k2MTVcFC+"0eiJSAGu_RZs.<8RYe4MX4[:65)>j0l$n5,CT5'IN'uZa"%icU7CCXQq"k$,%7H(J5ZKs9;G8)97h\ifCGA"=AT18%&35;\K.[-L3<2.EW4X0)`tV+ibCC*'*r/<+jnJjM#;OQh1=VOV50mpeQ4^?#a\eqWGt$Y9[LANRcV("lBM\l*<D=1OXu-q%"[,Z)%#_]u-WW;ssBSne[i%UE4o<PGIk&:?OZI,k7#ab-D#Lsg`0nj-\]]Lab_4Z#*)o]:hj>g6%O^mLc.*=Rp>gr;W:0:9r``@W8$;<KT%f1;#((f4?")C5AD9OWqDQnh+]o<LVSYUL/D"Wd\0WnF5)0A=>(5e-#?@aG38T0d$=5T<GZO^9$#".1"H,3p?`A.<M]%&2uO0Nm"$%\dC.UnKD+I0R5[u'Z+Z%!-Q(f+JU1_aU^0m-6nb.]F4iDM?#IMK7Mt_l,+r0C^HpVn,g6P_6A'0<<RadJ9a9X/piSp)B`E_i^'O(%A.F9W!hBCt!5g#QJ;*Jp"l;X&W'huRJ5)shZ3%fm6:U#,3jLG<%nJ?GP%qGF!PMlCJhEJ)_UNcB%*>JI2B.@rVsk-BP*4uc'U9AL%*0*H&"X#EF)X-9J,,m=&;btt=,!\XlO\IC8O@)KiaX(YO57e9WoK"B5-isU<36a]@ci[Vi6-E(J5q&M$#R*4@M]tMQ%tMj%>.jKa%/5Uc3WMhRs5Wbnq*]RXtO5tOc#L%hU[(cT.$)fnd08^82>S`GMRKdL_If1#)6![kH%XHLtipe4k=;V8sDGJ#;6lfC=oK$EaV22h-%+OiY]PK=5b"CT#/9eCT]'qlf=_3El&lpCn"#b$9B<X%I-CSF-'5ro&rJbGb,ERr#H)@$o(/s8KWM(!L3)qouqb]Y&'.(1JE165TK%A=o`M@T&:B7(*A<'-6?][oe?i#!=1=a?\+Q+DGWuFK.s[/1O#n:kVsp83CWS'*ZquYZ":n;$Mq$i]n+gD)a;"V`*UD('lt/-\uq5%FiXYB&/D/?"^j&!/V9XhOB$Rn,8,kLQn57*X9TT/WY"\/'VakZiNY25/tcWEU.,=1%8A"/(Ik2&^s58SHV#U6aaP8K9V*'",)1P'%;'N"Ne.$.Y$4k?ETE6ekY6Y?^.%F6:&LO>f$r.KBLtFLU*U"Aqan*(MUSu>\_GT+`'UkI#jri(`*[/`MM,D_&F[UgT8I(*SUSLii%A;(_s-pL\^Q8ORsf7AZ$;p2<kK+14:0l7@/;LG>R7NfBZoMo]<=].ZTUaniXNl'sX8B2r"3><Jg"WE#\C8gMF.\WOIlnUj/`rr9E%^f(CBG(lg:Clp`#:to-,TW+(K$?$IdfO)tj:`K`=%H[a"F%HU6c,ip\N^.XC?"d%9E5M-+OecAEJ_>uc%"/I&W!";;kJ5eMJBL>A%QN9`UU,*J7.RI-gi`L?Q"#EUu(*dZ*A@nRWT`'`+7QTW;*O%O,&Ms[6M?=CA]ZX-&EFADf]SQueR.1Mm:,ajR_N]^6#Y7HqS>'$A%fchC69HfQj7lt#Yit*+aL^=_"MLZeQ=c-4P$,/G%aap'n!r!<SLb'rB1$)dml=crE?3]K.A/Y&]F@;`fWe/n-(^1\+(3%uBJ6Eu6%UOX-B:oT?A9[J?G5XBrq!`PLWKaGPG$))qLo6<>Ek[8f-4O?A_VaK(OUB>oF`gnHL+TbmSRTPX'1FO[YYT].Sd(2TJeDj8'1j+aP%luX-&"Hu+2A:,&U#84r?:&"cJ4q`a?*;C`A,Yc6\Nca8?mhZ:/C.*9=3<Hp2j>UM7,-buQPj_lL5!aXJgHf'b0Z4_&-8:9/&j64-%>F'O&2e=fS:m(hUCH@ggV<C<9])sT0SskG/W]2S\bEs>HV;p1B*4CALAO..')CH)#5R4%c)mTfNF=F-i"Ec64$t5%G0SNd<`$T!'%>=0F7UJo0#%*TpfN&bj-1q!s!b(IhMRF[`L-;Ita>0ts)=_$q<l`1g'r/:Y1dQ(WT)[#"Z\;^Nn"5Llrn^:^_!3m-,`W0[<Kl\18%G+lej0OArA!ue`UDIW[>;dIBCTMfqM"#r8/E#A`Z[I0U*J6b-l)kTGM@mEKkb\[b"o8PU3:nL?TA&'L5)?XS7LG8f"aDD@,i9i[c%!=@gHYB$DX!.iIocnkq,:7__;E8,W"G_RtI@@e\n"mg1<NDNUF"tdZT-"phH9J33^J5HTiO>*%(@Mk&)igOkcT-RkSBW>ea"0*nK%@pfG&"7JS2(]Z:n(iC(FpHY&p09C@n".)l3.tZaQ9>k:KB968JQ@K=PQ^KTSWBqdHZme6m@Sr7IZU8+m-P:lXRO[f]hKOM4=nG0m%6F&!G"s,&GLp!Hs5d?#\,<-']E+4>/PbKG0Mepm!Kh*D,SVb0*kX>Cp+Z0R1'23<Y0e2]U0a-9^";q8$oNGdc`]4')YR70c=qVb-%&u2%uVLYcMN6Quq'N$j[BG1AQ^tT3`*AGGIE3BEdf`pR?-jMFjd8cG8)6j44#kX5M34VQ:Q-g!?[iJdUM7j!.VS9&=K*)&Vh0RF,%dCMbR'h#ONUPF`5%ZCOO(I:B\Nsm[6kj7RAI1aF<n=P4C&B3ruTT#aWA-dnoN2[a:Jo\l@%Rtb(h$[,>7OaiOdI<%1;6qLiMkFOq%mNW-o3Ym[_LbHW8+Sm#,(,<^`)\7*I.)Ir;?q!@rO1qO5V?m\5=%2LRMG-WFVa`VX$PJs3e`W_,E@&LX!@Y!s`cs+bL^P590jH"9%<>(#EBZq$H(M%@m%7dJg+=;VU"nIaC@!V#<@3LFX:)BkkiAD/^=<uh1!ssYG'(?<."CRFdcYJIkK^hYWf`fg..ac$V4;-j="TC"#%.1YfthGY0:ctn5:kYfr-WY;371DLKJJB+DJ<$a"N3WQ?mZq?EJkI<ns(Z?1=O@'8(fG!E5Zr#[[C3G,j!VeX5/X*CAR)oIr!BgUK%C.'"QV@`)R&<rtNX&))<"umT\#SQNUn@G;pCp^ssGRa!lT#a)7B$g6s9qpd)?)S(ZZHPU1hu`*jFTiI4aIA2V&a`/H-qP8]X=0l@%US/f>M=YCW#[lcZ.Z)Ke'EtXm0n[XPE!fRcK!d6DA.+,h_UK65:kRKp1;GA1(ka.q%seDt&di,jO^N_@&+C\K,$W^n?sZeJ2#\ep%9VUif2J7rZBUDT>)b_D'I76EG.=qg:M!6SO9LDZ'U7jmg(sn2R+9K^%bZC1+f,.[$L6li/PL.W&C)gF+&4%/,U8C(s8fUTN(!m1<%.2E!Y,Y\s45UUVi8E?^B_\?O\>ST-eW`=ja%pX@X#Q-'HbQ`t5\;Bhb;he1V,;'>K6kRKaEFeSE"IKN#FW=HqGaXrOTXJG((I]O#%'T"8j=&k:#4.(=J@>lhs+h1<flq4"1R4?5C1^qR$2p$-R6>%,_+G'Vdb.q]F!iU,Z8Y]spQA2]1,1nN$=X"5ae]9)H<S7$)JHNgF%#KImFH.)uEM(?LYJe]EDS-0+:"dCB8!9-D`nXs`Yb7UJ/@8rMR%L/n*6kWsn#Q><i&a<2QN`-s#K#*dV"KrFu8ShG.*X:VL1)as<%9P-U(BO@FG$5uE+#Dtmr%Hr>m']:j&RQb6jJ4Z:`1<59U>(mf+'jqa.)YNbLQt%UBJFlHd>o7)UqjT9!-q]3GJ055U$n'98@0?V4%.69d8Wm&S$&b6;6[oBdSi(_bDC_:ZP7A0F@BeTfR<B1C=dK,_cc3';0%'a1?`/4",lDl3B:]jTR+SIrP4W(558@!q!nu`bKBkk.\%0K[[mQ=L.Af*o2Bnq;$#DrSkiObl4G`$K@j^_BkLUaP/-![TJB,_BJ@_4*--R39_V7i#l_c"N(Pal]+WNBf>5.LKdcBUXIPN>POV%CkVm<3m9Uma;?>>BbcM=,f'Vi)\ZY-@/$sTU1RA8RCm7M-DHJ*,\0@eB]tnh"#W\iSA7Z`(g==dOn/P@ls4ff=d&*T-g5d<56NM>%I8F(7=dPaE,8i2^JdfO"oM6;_LEjX5LW5F]iO=$6[Gk56mm@LXK#;N$ZZ>4d19N-&)<mj%Y7$&lh=\(VTA7_3Ec'DD^m;HcP;^@b%:E>1//C=9C@`'?b%6CKsn&JCo.f4VWP?<*%HsV*?H_:,dbd"\H6%,c&8,HpF6G(%$SM9Ii)GFOTL2]3*.]e\E]nH1<Z/--qEgl:.%rlb'tQi&l*I.LDCo'P7Y:\+/r2k24BA">T^[=7H0J@%sD*qU]t>n>A,2D>f#YM5.aHKs?=l"t,bVi@&1i2nfIe(X86l$Pa;\b8\f%h[Z)$+@[kPK!3ikf=f%"9E)C'^,>q5!\oTCpICCtr*,BF\[5R5b1-\\"bU)V>p6=m>r1H+8K74)@HfNa@E`kk-A+i;lo:nIT>LQ*%TR_1=Qg2'"L=N2PYlsO0iRff[oK(b;2D6]<ROET'FH"YR%\9u-1T3@dqI&PJMap=(>'nc`9cGo3\H-+[\<?/(eHK*:nrid6n<P?h%rl*uE6'Aar5orRAjGkQ)*?tF+NTRackqsXe_0NP$X(j=GY"9)/7Go%j_TQ,i[2Acl"<>R,=#S]hZdlXj9+^6L4f&ohY]8Kt[4Da&%^o-KQi"gF9hf_;q>k/tI^J"%PG"h]hO,Y'nFi`aZh@P`8E=u%BBcc^ck0`IYNgFEZ8?gQ:$;-Qh'mRcu>\A5H&A$7u#?-AY@dA-a%!/'=:k-,V,Ds[]]43#9Z"T#]D/&;X)&VYgb++B[uB/S8N-;0^3?.#WY#Bm]t(2goWcW>EEn)/,-%$=$rm`m]XYD'%DYbR^q5;41+%p&=q`g(tU@[T'tjpi;%"pcj(dS*PchE4:RGGTIXoY`r"po."b&'=2S6XL3tn:+'@u#!:_!VdOAGgr2LVMi<RkJ@,ej/c*IqO'ADc%S@kt>dMc4ZOOg>qTPe$3C^5q-&(W[EB#[rSa(h_>p2P!9*tLR89CDc?(rIOOH6[3?OMbrG"ih!oOG:Ag.>ZuJWmf6BCMK"d'PI^J%I'd)_q%2d%2ecg,N;[6#`8iHb;]&`N7ARU8,T`dN>2-fVY"IAY-e"DW>RU]u:69">`kbotll=&D<JHHRPiQYndOB)*f4&'`FFg!u%*nqh5+$B)ZC,I[YXZD1^V]6C0/8!dNS3qPT@Ou@Z&\B)(LoMCY>]7PTR2O9^"I+E\8's?uCD?AdOI#/<(9&sX32*\6gur%W6,pW/%dkFP9#W2lo52%;f0X,FL!(72O":HnsEic)t%SV9kN'Zp4;6[RT_@iTn3kgN1*3q0UOPu-/EJ-tSI@]PtlnXt"OIH)QSb6FM973<M%r=r;U0,'O(N-/]8+^kH<jI_lf[)6\%fBffPJ9+'T!EY)k=F:GjDI+NYOHX[Un!hm4YXn+[Tq(]Dj3&_)YUs-C$OVn=>99!C\b;qX%A-%Q)>GEnb]1i3\)'"EZf5'CoB<_)=j)>Us!n.BTDBJr&:=arp/bt9K06[/^s.hKd0,ASJMtfgfNp5_Z3;#7_[,GB2SA;4Mk]UGU%`ggq8<7\lk(R@`'b\?OML;HL</(9'#AkB'Wb\>lM@mnV3f&\S,iLRBQ^J"biefSbUpBJQt(`Z42(UTj*67(;aAHEJV>LFF<)XT`D%*V"t'T0J0j/(--]J()'KM5WgM@dPir8W/ZWH_#r^3k-bLTq[30b(\FSbB,IRfI9q\[/ajs+3b@1V!U2W3JB>_LP"`e/0I/fGamu:%%IN4G9\FT1r07u>Pf0jOGt`hbgSY.=nic>II2fe8kXd/E%c,63Qq%![M%Jn5/Ml+Xi*Wpg)0rK)Z\@N"K(T@gE:n2;4/,'r;;37Q%MJO?I9uJdQm>U5jQJZG*g?@J(kE+-U^-pr:[73MM6R?RV&Ab8>`,e0U(qo/6KD!\TKjS+8M0Z"bWcI]0fE]MmfA\E6Vlbe-7X87Y%@jp^40^;I(6mH-CL\V9L4'5Ud)/[h!%\GOGU=DJnKHFH,J,/TcqI1nnCHlr-RUV&W2`*&,H#r7i'k3brf^F,Qh@G0APL,0]3>W9j%l-D]7F54dh6k&@p%ZA.`7,$F4M[P>:YnB]C\J;/TOoe[YDcbEac_Z8A/aMLDHjX:_O)MBmkil]mmG"<d=Xr6F^H*cCj/hWk02D2Q%e8jabe)l1Bmj,kWnS&V[l&P,t54-q(Vr?(-,(,]cS&)Bp)!AZ*AE+HT[Q+T&%9(:+>cHs(=cA^2&5S.+n1^B1onMXl/)2b@`ObSd%m)40bE,]LA/VL1t^:o'KeYbEALR`EC*JfHCjgFDI#i0F2f<+'A+!$*<qIo4#/ERJRG7A7Q$t;&,Zs/DI"8I#hTq&<kY4HZNKB^fY%p:1ps'ggR$+4d%P-<PHT$'g_o(I[Ofi$%IRVCVI#q\t%WTJ7PW(`k1).!E_ckWmo4VP(_t]YTP;D!1DeY9d>Gg\kdjDWMksK!d_,%GOV0ir)(hP*RP<SP4)ZH`Ec3.=JF*c20Tg#Ulo41VR\bph6$"V[n>FaOAf6kKTj4e3NGNZnKls<e=PF_o"6pJblNU'H,mCSM\`,1%7rb0pW=sJ);:un,$^A1!<Jgipdn]f(pguk4k8^YlX=l)oq/blJ(RRZqrC"#^LmYYAR>DEY^_hjn)t1h[]Ss)<*b:.4;tiKu`1\$i%*A30)mJ_!NZnB?!QlK_s`B/`Qng^5U36^?,>f'sRpYsn;G^nKj8=q`dAilqKbuILWQ$957[sjPW$VV,b(l&V3P0T(iio;`\73d"&%fi7L@'6+@SR&+t07hcOioV1>8ALurd,C:(/G=sc)(lc1o169D^Lmci['.Zu7*Ppbp#u8%FpsDG`fXVM0*3Vp$(>1mq@NTddLHfnt%'^"<tR,-(T`51n5!<L<l2CP!WF@lGU,"2u1MJ=Wqc$TXBR6sa,F%@$7>gp(I<_eI7Y^Dec6V9GM(Zr8TB2)%1Sc68WlN<crJU=m.%MuY2d/>E-PCl]iAaf#d&U4PBj8)*C3Dt(p;1gun$34GIM4AVeSn>9&kjoiug&i$S19Jf<2P\WQW4(#D^/QT@YB^A$FX_aVhs*[8,%Y?Z!"C5hZoIb/^JlYuQQ0N<if2Y&"=0f1tRR-Z%M%bB=,(!1??>H#Z)0:eQcB)B]WPtjci`Luo"l4&\K"qIEd9=WL+ok;q.g>9_Y%WjPeHJN\A@Rp>f1nV:tf$dHmROD#q3+XfpLBpY*^&;rl*2g"J[Bgq+L=T%PTTrZ,7837Bp.9q6:O^-FFI[%Iu)+%uGhd)l62+$AF%dNtFNi)g8-IpsQ_D!6;RB]gZSciM1#2X0R64m0Z>FZ]'k+<cQ&a7-tIap/'0Vm3cJAO7+/e0dCG+[rMaafl]-*W@90O-N5.,Cm)-%q?Xm;55OE&!/.;b7p]s<;/i5<G3p_H+hh?JH>YK;TnE[d[#gs5ds`&5MEc?4+J/s:*8#6kc\;G=iR;h/)[,9-4h%]6#1_G&eZc^%%&>*uSMu3_;\p8bt,XB2`[`MV:!Ydb:9^YWkW$='$Y1aS_&</EbK*Y6pdkF[M_R,^,;$AAd-eo7.#o'^V]DRnh,!T)%a\U;eLemi9%7=<7_L%p<=:aJoB#W!La<D=B6\L"TUHTp0.O9eO-b4SL)l,+)dk9&-ArB+n3aAoB"7&(u_id`1m1PV[:##]N5CW_G=5Nk\i)T9%u%n39g1QH*H?US[L`-W'8oWD:[9g!BXoZ05`4X!WS6dlS>#D\'M0'^9./\966`^tn?<D*([8q@[jp3,,cbO*N.XiF1YP*5]B2c\oI@%XJgd"DU$OpeRmo,)Vf,b/M-p5d8I?(9ZFoMRsOtVAdEZ.g"V3VSJW8"H^i&Q"=X35EV66&Ku)GrFFaj!OJ=))/OIn^Mg3hkd/Rb`%<U4h'a4Su=6BFIe\f!:dJ-]pC:Xa1Fj*?qEKcP`BmmkZW47'q352PRs?XeY,SaRS7YR\X[3J3f2YOaH*,#!B;hJ*L7^X(Wa3j4F'%pE0>'Bb]Hs'$5F@$8!V>;qNU;$0%ML8=)YlFW0`P+P=aFgSP6i"Jrp%k"7NP%.sG+o5Q2;7q1sU4d<uJ;"s["2iXehZpXZQ<(7CF%JCkp8mcKqV:aY2^3`P5*]#e>Re?PE'+1#-k[6C.)mbLA/S[@/4daNhhcKO[o;?io'1bU4brlnn/Z5lk*0C*KMOuUSS_sutt9Il?G%6)*78=6mm)JG(cZ<OW)[FA-ZbYi)[npu^e+0R&>+ZuopL3tK/kVbeMGq9IGk*8`?f+'i@U%C5`R7<b?1.EN'lXpm9loTk^J;ErFr%Fa)]0TH)BkoV'YDrGrCerj>s9m4tASTDNIHOX4*+BEu6<oR%\7(7J#j@*gpcic$\$8NN/rSZhG+?ZqbT:["r@ieQ@X/eJY%,/IX>%C56,Tmj-%D9\-F8LcosC1k9[nmg;mtGo?iB\1B^)S&NcAB0.;*.VV@O@Nin+!"))9;t=;O1GM&sDL?[F[@2sRLSj8l"Mc1DJnIgB%61f"Li>:gWn3$%lh+"pIqg"Zg6g78&&=5Pbo4DSHOZ()NHL,)ac;cE&j.6"A]%$7B+SN)rVF#@D6rgTq^')>iQhr3L':,+B5KT;\%-=&"pc-l0Hh`+uSNaG,#[UqlSZEPXpLp[-&QEFg39$*CW"$JRb0%glMHH'*O/\ski2a@,d2.TB4I-E[#$m>?T@dh:KOtF4*;OSc6%,`KOV(W8neQ3u$m&oM77n&gsS5</*)A4sFJZHP=16DUVNCJ8H%s$"E!OsqR6_:X`'-$Y:b=.;kina^POT1nL$,h1/_P[F_M;i,Rl%6;"[cLsD@<:Mbmt&&,CT,)CinQZ+'bk;cWSKQ5@;Rf!A>&7MF+-(l4hk9AZ3boG?6N![(WK$F^5\l0qJ`WTMpIGC)B_4b[CJTI=]%9W=NgJQI$FUR`L0j@k8lS>d'Z1L^90+-e]<K'>IkX9i<PQa8BN-4I&JHY#pYZSB7nYbj9MM]iM["N*\k;drJjc._DVec]@H3Np;g%$=@f(oYu?C2%@$2Y&3KFo`':Mf*dJjL,aRi5n7Il&BJA&PVA@fo]+,6V2FdHMlY++N)ucu*2F5QR:43)OVC:%VgFr,BX]fN4^$tX%r`mBN=_omCFed[q6j3W$`XkD]j&/Vk0Z,4eal\Hq9]EXWd*HKG9u5ZY=#]Y]r+_0#fdCa3PrTu*%^Rd/FV6kY-Hg&.8Y?Gh%\ug<%IF$_Ifr-@Z_o)22@tWoDGH31;n\_Lb!#E:%6u,kf*N!E\6YV9H@PKt+kJdDqU!Jm=JTM+0-0YW46urHhJ=d-,!$X*7&QmihaFfa\%+l!'R[sSe'JQ:+kV\]@'Q;]hi1dg]^4Npht0*'pFR+l!(!6fFk6qb#jQjr9!?+sX!&si'\Kb&]>NA-tE*5ughKAm!Kckm*.4ogQA%fW2V8Am&*O>`@+t$qlO.S@Q!q1!M9U"ZA:h49-H]e<NG?_RfXc*e5Mj#66#6>4MXn6d+h*i;d7lk!%UW\/nm#*?XHI*<91C\,(g]%?k?)1mBp63N15P(!:));=)e3_kgDelh#T2H/[:`2M%5%](!ChJM@m2$IT@s\Irp^+#6874#,Re`0EF++Qsi3,=r[OQ+JkX4>5%*:%>CJ>N+@fHjc\DJ6SM*PJn3\t2X"k@L79o`_A0slAqgT5GRqM6ffr>g<1e'9XL\W%!('fD'(AS*&E@/$X"$FEZWmgs.fQ:GNg28lt%Q.u<N8\Q2u%KHX4>I'PZqT*fhQ!ED\J0Yj75TuF^l%TN9R98/1qV:baO2Pu<E%]$kj7!$k:B%W`fGVP0X%U:HKlJ5HjaMF]&FEiL%s2[R#AZhL%E<s.$ccuB[k9A.MPn`B\&*KiQ*1,ukol-H5Z**]/A4b"d.Kn:_ELRG*9c.RQH;3u33'BU>4qpX'2=$qp4/QT&7:=XG%R,?T@,\)C*8BPlT`WE3&'=.#]gr92n8kSL``!EF_7q>DA?kn,jR5?4o$DSiUc*mt[6@+@p>e-9#)iX'Z6VflfrW90a[+L29)@5:d%r7/9t.P.ee1`feRNA/:@O/t\+X>BC&XK'3$c<&^H;RC[5"<L^":3I/?Ye[9379gR^jA1NL<FOel)JF+jR%bmrG[/d<CFMWIb"?59%("^s^'"m&ZGngohL!=9C,[qosK:rsJ"k(eK%$E[hSXBV[\<SO`pN.DIG'UGS1fjV@+gZ<E<,m$9,<ZlA`B!:?C$ZH[Bg"IkoTYMh%DIL(e]4l;&KN)r2/X.MIWjiAHk8$ur2U=^ihR?Edle(FU+eVS@MB.p2:1U?8qS9&_FbG8o70c4,,57[CVt'S$TDC*!>?db??&TXg%"t0\e9DnNYr;MBirp[sb1!Bc(Zq"sWeoe4tAgk9M6BVs]S8C_WpUj=bLHC*CdA$cr*+'oJ>A!V&H(<s.A(jQb'WOdYL&%SS(F'^`%M58\t'!.P?H:-`a(SVnTTgO=m&3YuHagbI8l^W\n#,8I=N^UXJAA`5m]A_a)4M;80PbO#)\a?*:(7M5/oXO-SEci.P/b<MN3XbZL%<`r@6@<T5,5=/)`SM5C]BX<rFPcL+pVHJ^AS#%9CpA:Q.dM/Or,M-Om##]LG$7.OA68MWMG%I[irQ.lIbKsLZ/JE(D2<UBr/=/_K%UtP*XmDX3N/hZrid:Kip@aD4#QCTd2p3f01f1bVCYD7?V)480%"c=Rk@iJdAa6((U_@uc[EE`%uH?6]1q7.cJ1kMe]HKda5R<teG%R$9<g>Ib(c'6:i-(t#Klb$dnVA2Xtn/^fG16ap*l&L=(7m0dX(P!U'Y@Rqa-9mJ?DN(iLlY!e^4ZBT%c==/r6#1C-T7doB((VLPk%/h(sGX4,s:QUH?TDW*,qM',Yr^7^QU-:+CAW+(nq8CO;a65$994<(QWol.Pc!1-+#M-I8Q'M2cT+s8brR9UNDcoln-A._N+\eW4p%Z3Zc59X$-_PQa^2KF>Eh/m5eCXdVM,*BD=J&HW7o0jQLhJHU=F>F^KU,Y9KSF=!A@_VQQJ\Nn#=4[$p3";6`46rZ&I'$`d/5qZhi%Y.[a&j_<WbV3s-6O@Qgrk1:#eKH"?7ZfI7[KdMn/f[YIEo&RRcf+KL`]1nde2dCWqR"'RYNL^.+SB;?=rWP9I3s55?[WI`+jdr*I%B%&MhP6BII;aMH>kIP?=o(*Z78B&6YH8$m3n`j`;T26+7;aXZ0RO?*(TJZid&jgI;L'YUTJGS!`m2cI$n`(!Noc%a`2QYfmkFE$i%mEH<CL<LAs+#Nbu^:&0a/uC['7%Z0&%Cs?H`^`EA*6NSCLS3,,EX1Ug>D%!K!?d1TfbT?ZMC^<Cod,SEjK7*ofqGltL2`.W,K?C=%"[>$r?/5_8Up7a&L3o_X+q/s.Ihdhf\NW[7dcZ2BJ;u7.TDF^Kk</EaFF25\aKpDj!`YV=MSqMEXrKp7-O__$88-=@3X*\?CD"g3%`R#L4H<JpMaRm/0boQ!Z[ZSO2G%k6M"0&;=S*;9:er\J7C^%U1IQhFNCp#Xm8:gnr2.RU,;2j0faD/F(8H_#[;eE*@PK&V9@<Ca'%UA5$eE,)gN_;\a<dEQ8]96GuuV86;D(hEo,Lekii\]>U-&>DGD#%?5*rg@e38=HKkFP9$=VLZ<:X%NJ$pe=qLGmF)=q6@R:eY?jT%"_U*2'Vl[A4=BD./5`K=1s8mWcH>G7O6.eafZHtB"Q&kDBd.@6^3PI43"Np?m[!3=(gA-b>>k!*j`;gKp8QBT8(P(*DHM?!BK3Y%%jnHdW;1Jp9g6<5<`6tr8V6'Y+Ym`QUs%",8:[rXh86$h#h1(ST[qV`(#B@PY9Kh5ss6\8db7Xe#FX&78aND>&%#'KS/`bA7Z(4-b%P@-RFkI#]n72_4scCF1Kp`p"pA6u`7#Bk&X6AqJ$KMNObgn3sVn^%7G<"k(3NQA$8Nl.C`'H_"?M"kh#[Y00j9G#*q6Q[S"EYh;d%2>BmiY[I/0Oek?J@b\'-;rGL=Y+<!/"P#f1`Y=kJ0deF=>Za^s*UtGRH;i+;+`0k.<VgVHa/qHok.ffc4UI5NhhJIf^54unaOSbq%K5n4B.its)I/1h)a7.`HcqOSJL,Ac[7Y)\o?)qaDFCRqIC<Rb4$+9s\[:$hk9s-1]bWf4dHY:FbicJD>g4Qa]d,N*46<oQQ&];uM%3UFRCDGgI]_<@8HJB_r`E49iA2:s&N@9Ttjj)JPT%9I$p+2UT1QDt.Qm7o!KfctZse?)+L"F("Ei)@]?/DDm;$)cZP>l8AP&ka$'%\M_N!a2\mZE(98jO$`[dJA%.NR-imX+ZYc('M5h=A?$#H6j0I*0uWmW%+aL!^t,ua+h9kYP*69lojCQ-+WOm+IR84'*e_"Ag88lq%[;m&T$gA4B)M#N2L^5'=+Vs\;`n4)'=qMEufm1F6$a7)TM>Df%eEm+X;d5d2rVV7hn#c1^'F"paR(U2!LmC.C(oOH0NF((JdOl\+%5U$hE0$\;aa6!&JbG^b>c0S(M<nQDRe158*J)'am;boE9IEn0&_ltl9bE/u@XWL?9%cdiuR2$os1jNfdmgsh3`8TH9PWr"*]tqB0%GRe.2%^F#JR&Il"R-/A81\Ik>9@mV@2jLYEOQ&$aW((2:T3bPMW=G!'<!mc5BKV3F%p0'**0ZO""qCGB87uuqK(6kaYQV\bA'hTJ%dY#D=D]iir:KU\CIG-c',%5"^4=GZ$gB?$Q*L4I]pY2V;<g39/>e!eE?ld6M1p#KN9'e>/IqMgY\En!grlA3U'e8Y?*V,iCEE@hq%WUOkk*+s-?!1Io[cdHmDUDD#!US=b"56s_d$.*q=OP7-r^AHVY9]L,k,T"TQXXP30VZh10/?_HdfR7qbap3oD645J:dt]4N_j_\U%R0j)g]OrB1#o`kNP&[3ra/5<fELuK%78!=B0)uBo=h_XWIj@nlRU\R9VbYBgf4/Ha-ZRs0,UIn$1%r6GF#b-,Rib6!a<%7hkZ?bV%V#be&"$51YXTpjC)"g#0LUK_X7Ri8@Ig!_&b^g>:=EM7lFe(.7;n/Dk:lTYC>t`Z*'sS@QT;J7m5TLdJM6Y_A6?jQ5f#?<ZpgAB4%'GnLs%s`EMgKh`2ri#1E5Z]lm%LeBJST(&/7.P@*4Z$Vu#]ZksI+_*6o=rW)*pk;i'ht84IdYJ`C!m]h[X[dQ$;Ck[K:#X3$.X+:%K+dd'jQZife[Y<LcHslB&HMmI!<>IP8Z?EU)dk<8M#`s%F?+:MLeI`cMD5WSD&@<"mn$Lt*o[Ph2e2"n,cgV>EkQ\MS,iME+S^A2%_7U*%!s,#Z.m>6S3!njGc,GEN8*i>&B#efR]7:c`jG2V/+rHtr?1'T0G7k@>"Hu6Pp'sB=;!=8`%1[M/7`$\r+$JAP`6>l1TdY7g%dL^dG5#!5/9*_XR"n193*W"Lj:2geRM-:%@V+YB#oPTgG[I-h7[Y'Sr9q1I)2;2bW&QA)6G6/8m!F)iO<QogY.K!MX#$95P3@T?E%7)3%.,c)a7M*N_uS%rou?X<]``P6(fdPe+]&FD/ZN'#S(^%0`0f>;F!H)SMJZpT7$#1^%=SND.Y`fk0R@WK`+!ekF(?^BW=e#Qnt%.40s8<?ba*44/dh!2RtWdl:W@5j5Te(oCdf:L>Pe]5`^9MR`HEG!)0?Usn_-h/lMT"s5,gkID\sRh@dTh/8Re0i!hk^Z?H&:L6RM%=+0@%k<6oZP4aO:.0/Hm=Dc0u@q$D9e'N%\L2q<mLGVHPD4%ar/l,MeP'3B%M5;4B<,C#76fURTpKCt@/<XT=F4t33=*Btb<k%CV%ZhMAG^@9I,eON>XT\0,46(Ch-8SY_?'oK:YEr`"m!2>$;EH!I_p78S6Su#Y3,d>)/#o8Rk@QKaoj[At.G!=U\P22CGg:r_hJ!h.#%d:aX&!l7&D-qu'0)>B")?)p;r3^V'Z%nZ1GAE560SXUdsA@'1sRo&%<!!.`iaTgCd>n@qTQbI:-N:I%)#D)Y,=NmS(9M3@'8TZrm%2&_EDR/*';.X'(Rb_s;s1Mk5g#8;Jj#+f3U`.P\%*EdUknc`S\cet^W#MC3bkfPT2LG)/F\;$IbR!N)";)>GFpZ!"p'Pf?18!5lu%/FT&I"?YBK.@i1C]H?&A5f0WZ0p4H^1m[+f@!!NOFS5oK_KFYq7t5n)a\/?PP46eQb5:c<:^8Nc,=U$IoW<NSXacFeJihb*!0Rnc%aB"d.U_0o8G27\5!@D35"UgAfa;qE%`Mbd'&0Zh,&8/W>4Khs]#VZ[O5D!5g-lY@(af_&A9LX=V.\nNI&kS9RX7C-MMH7)=7e_l!%Tp6E&ecPg6BB#m^J2gigJ`R0AUc\-_'H60?\MIHff..t/$/t3:FpBPUYd4FgXotX6&1GI('O1FM1LOWg*Hae_qc]!`Hk>J>'Ge;<%.#PL_;t@q2?f=0jr4!B!+-SOj;>;k:(2OQ[)#<c@?#b>K&O%a@lhhSkp%SFCa%2LDk\K;#KFa/rTC&NQBUp4YF?Ef@ilA!_YU`O%%))@AX/L0%21:iZp`*"[B'%VK0C:WgV]'@@)]A;b+-;+P*KB8O*9CCaf&!l"-]Q[V7-!+!Kj@V7pN8En;S0d2c<Q_PMA.4Kn9U:Vd%bi>_K4\g,`3AM-g7bc[mg$(t=B?@hW<dq>bXL[)5N$[)>A1[PoM2T#dB^>QH+"TEraI-]h>kG,q\'-*W1-li4K-TD).V:1m"6)\[%*Xqk^3*nD]DdU])OC:;D0DmeCKcMPclLoh(`%U[Cpe$ndD,/JQE=0jP(+;*"Z16/AgNr[H+G4-\\T0?e)^AeB.d:QW_\*0qN>o4L%O#8,2s+XdGST"Mp`t5u#c?b_mNMpfa=-?"diR8p824;;&4qb+u&H/6>Y1OXm^:F/U5cbe18XOpE;bT37s%f]`a/(ilkn,1J![r1H%)jdCi<ar\LM`dX"\Wu[H.*A#P-(kLHU6N5/8?,\1V;c&>,[_+!bs"!o=V^/NqhpHD&G)SFT783-l\2kt+Zs'a!,pXGY7fE)[\qQ0%oQ=HYBQj%;W=Kjn==NaD(Xq>K%aRHlboDrs4$t4&A:a<@-VS"$UY4lk!3W4DRG(ZNcr4pU>u3Nr5$dTY^R.SA0BW0)/u]&rMbt\<%(og:!o0L%MJj[\P$&%aA)pGO^P[Ge%Pf;jPLoCW5jTQqh`acn1]j.#s.&#(K5[pJDAH?pui%49lnjK60S1B6!Rt7,&^Btf\](7U#%3\$gO2[UYU4+g5UlT>OYh*F^pqP0HKp[aeZ]1p`8%See_ZLj,r5(q&;&Ol,'GUcjEV340r/&[5S.bbMC6m)-'-62H6[2"6\Q,Z'5%PtVN6Uba=B?Bf@SOGMF-VMgo(MT"6cg\!-:)?6",M*a#@>gI$<hdI$@)MJ(B4F0SM6mrTh4N`I*)?^=b2]G,@.`l1:.a<R%f\&.+%n&8rarhruO,FXF@]+2I!1tlpR`ZjfEQC6l`/h7S%Ensu&.I3Hi:"]afId16B377VhB#`dD]*M3QcNh_3M$@BuVl<<'Hrq;#GK[P9%'-Wu#T,>Q]+n*]%2@gM=,1n3dJ0H9/R<4nb^ps0?*`.NK5fKpmJ0JU!&g\q-MEl4Xf)ggZadkJX-@[TD\o53/%,/O9]''g44W'Y\%`.Z@Z)-ASH71,<JAjfL!O_C*I(;6"+c!N("i1hg7AQ*j.e(:ZgBNI\=2L[D+:j#tLJ$6f[g*-::$<FamN[]"cfSI-HSQ*p2\^IWL%QZfIJg>%S'KKG!Yb&n-%h<<\hh;!05dtY!bDS&Mu*A00igS(fTks+UE)u\+r(UkD71YF;;DEEg7,7FIEicn%b.i4Y`X?G;Ab-F+s%:p"kep"Wtu<I_tNGM%Rd,)1C2R*o\H6+lTM(ue<Dla/s-2uqi=gM&U.!PB+?/5\=*$M?)ZGi72om/UerXZMG7;9Knt&uK]\4$MC>%*r:XqK<sh/W!q^nqH_"jDD=9);8\gnl89^P9$=RK@?Wt=GRMN/;O17G2epr)Rmk:0(=$Arn.kdj9jG^;gR3")Z:f+;[@oPHLH[Wp%F#Q:9Of4jIOFD-Y`ZDEk[q'37+GX@u8r-tsf$0NAO9:?X,m*9KSq[jY,#n]+9Zr"3!A`kHeRn36OjG2_BbY!]h<d<,aj)G=7McZ/%<^.'Y5+RhW-U\t*SWrdC<[-A6KBE"!XhmJV*tnKJEVg7:2]#+iln'!h>nZh!L$O=,E^!_EA&S!%IU?o[E.ZO*MnN-aLmo/F&\E&k%>G6^'[*[%YbFWgIgulj&<)uYLH5r;mdbX*0iL<e^jrI.EDFg4I1+ToB$g$5n^?!he5Yn"*[m5IUme!X9A=f+ug\LE!=Lj_I-72;^%,4K_BhNsIO7V7+3&ddO__>BB.cXCcdnPYmnI*7EL-\,5Yg*)RKIL(d#QuS%G8?_C3+sKcPb=WAOO?u>d1`$be?*"5C&b2(%as\In%0a)u&6puu@E2iA*S8XGs<lgUPS&LhMKU?OZ,fJJjO:ZK&>X3\mbE*6s"Wg,mP7J&Gj[2"aA0;<V&=%*C7k!pO4A=m$EVU.M*$qhB%g_ZC0<B`MbJ2,dZnOuAX69^''4bm<ZQOeZ4VjNd3%hTC&K[5_j$Rqm,68RSX#_?3\&f<KOGHSKPG+:0AL.$6=,3iWE::,h4\KKQX%Q7Y-JbF:_"[_W2M2To_%[\_;sNBFUYY83+iQ$,]R<B[m,k+>0M[;'8\G"PP>2Vg4;r92?o4X+[=bNsgs<5Ei?7<tsUb\+l_Pusj3%4,!Bi`))/MRcFO,X2<)\<#1_GEisr]\A,b]LL1PP:!I)_Q$!.W<gqQ'5i.`Z)=Np=Gj@VRoU)ir*u"(/MG?@tiPaWfPb2r))%-Q6%`n0qs^[++ZET(W/l_>*;oq>LGklHYQVEkjWI_%_)Z"CeciVEP6DME7]@-(N,.Gln`]jCS`o,rhAP8*BaiOldhT/QjtB3-?Aan7rt%Oc8)[qB4ZP1R#@5R+QTKoo6dY%LF$KlsRd2,Y,JkXj6A35b=r>C[V'bU8_drR-t-22%9l0I34^g^5klC!<p1(Z0>fepea?>j;YlY%OTH9e[fS?^)=BK8SE]Q#Dt4Uc(_t:lfQDG#3*dV`(8"CS#9U\/?,C]3e<=FGNt3W+7nF(GeK\?AAV]&H0aX(MI2ZZDiVK4[C(\A2%bRi-:?`I%2>ot0.nT93;$tRq]jbjhIkDS8+W'H*6Mr=US'@1b4An"FmL=)d7A3q/sij^.C6&`2k95"hO&eXMSNud_3O\%d1>L4s-%"C0aS;pQ8BWIH_kTD9ZRD.WtFHkH9C)Cgt)6@%5nE(h'V\@I]`4UjfRVF9'-(I9./W>Fq%<YXnO<oZf0FHJo^F:mqr!/NdD"FiE2%M0'=VM+D(HF:iPpLptB;VZZj/[Kq:80)?54@'/h#`NWkbqEf@LmTHh$AXLs>+sr5p(njIVP=6rMP!o`*P=<ifSP[WJ@17cnMO?'5%_pCQ,Qe<RI!J[L-1(/b.i1.WH7Bl?[WCA\^Y76Q";q4oJh_>-gP""LiJDZM?Jus&$T]M(#nAon93?T/pbBK(!JcV?oQgNdK=ft;l%7'9'(HEINdDj$g5I.0E02:-A4Ye=Q@?tC<R3XH;fOYTpi'=`H`/QIJiG1TD"4pAsF/Q7<]Y.6r4W?Q^YNg_G"fo2bbI,I*j`WPGZ%E^UYNPf-s&!2_JT^@<LoS`I4R[Y1[P&KWF1FBfm_'^UPkh-22-:Cf)e>hT4?qn+C_>$BG7AjtlTo*PZS\^ES\T.RS$%*Y7&8q`Jl%Z^k@cBHDU9C^F4pEh!<FJT#a6-t0D-5['R>)XT-f_[NtQ8BI0\(i0Mgccr4*`0LmgGH#Bb2-\+$\IsG"UuNCu6Cb@t]W`^32E)/<%nKl1]pWAfajcnguW0:gBm`q'tL2U3mcBS_c\Pa&m.j<&>2^u6Lp/lN$R1bOsl*7R(8gn.l]-C;1#"rr^oUKtK!*:9*UE)t/h]B'K%Y(XYYAe@Y<FPLbR05N(GdXs+lQ\UV,]0X<-]QSu\!@Rh0TC(WS3EmttA4oK&[KMgM<XhX/F:<fR03ehZC57.^aH\G94!)\5!^*Nh%-,?quO"(oP>'F:AZBHpb#/g!GOtWM$Xpk3QQO9@)^@]]s$=?+`;Y05n=cOtkVPB"C\MSUu`goe:4.\tHCH(&oihiIWJD`pcksW5>%Q\a(87Er8WB"8(Z3gtk?D9!<g@%N,[S8LEWnAngqK@u87a_`MmB!rrX-+n0**Uu(BQ(GE/N6UEi[iKGm6@96q4=46"pfNPiQ"q0#%5d"s$)fcHU].!Pe[\NTa$iqECLW:(/T[M&/1m*6s<NH61fo-;Q4.<t&\]p1+e'Wh]?T#OP,fBkj8<,AEXX>]jUsX'J(l4T?-5$Ic%GaPA'Gsut?RuX]d-;hD>W05r3;JC;M/h9*u`YncOdbW?-K:s=Q!EHoA=HJ3(KZZ^3FAs#$g;U'\B4Z)S7ro2gCh9AXr,:?c1`dVb%\g2`sI`8(YN0"l-Kc#9X"5[@B6o;[<dEF80GP#QQ-k10_%m]5`cZU_W1Yg#>0@-nG^M;_/4;c:hHXck?X3I4/mT6J8T6R3#?P.^3%WhfG*nWS01j74]A5gu?\ld'Oq*#j-o3sU%$O-]N'Y4;VOM>MicJgI_pHM8p2n<$r9:\YY8?qoJF7>,"[Rp]9:pFCjVTt'&_XMjTY%QG$&.ieIWoc67;hRS5\r.Zr""&1l>dHp^D^M?)l[3p;YIDBHT8:1W4$T2/amn-sA7/VM!qD;hL7h[jtKj6=E@KHk(/]P`*W*&@:n%\;)O_S0jM7%O1TnhjR2br708k%*V#Ud2?tZ3J]X"$!M3Lj':cr5K%Ud]1Otck9An!kTAgT.e4k`6emA2U+!t*\l7`5qQQ_Jli86d%Bt+]*2Y#!-)SCjkBfT9<9f'.]Q=HI6j"iBVT\T>]e2lEl\IQH%'1YP-L=6PW9JJY;Wj+'l,^^L]d$qj\,[h.QiN=/R^2cIM!kYQf%)(sYq?%qRaJV6TNfe_^_6*Z:+b9T"!A85a*9Kg\AO'6oM5)mAf$e*<;^j'kT]h['KQtS$A[Yn_?c>n4%8'<gci,Z#K#&cU"2Z\7'%rKfU=^&GX;H5/!7nb#+!(@e$s2dfeD?E+/T\RDT:$2b@EFF#UiFuED5i812B]@)ca4DBI"<!HTN!eEb##U_iVkK@cKNOTtQlpBA<%OCsKVS@-D5e_`"/(hNE.ZhZ<D+('Kq57II+qtfW.>mp9hr;C"%o#IAPqM28(rp([+iP5?U0E:TcN.:Tp)i`-^V^&KZl(C*r!@bmD%lhd"35C`Vf'8?2Re<BGTr`bTJ$kb/0MmrT_qWgqOa8Yq9Y4J9:[*^HV#<;mfS^#tV_WRlIFok27*9S9arW(1f8H@5;=W!Wl<"ocS%8kX73Gf17RK(@AV,MpQSH>@5O3!u5:m'4p[D^RCHR2tEp50WlDa0k]e?955(oH+hlq1`S@`bIpO])0_jm3p2cQiiD%`OL;*:iG7$%)nSFoqdlY!5HKosQb`Z(GT\GX&sd2174@K?CF"(V`^\Iu6:=e.9!f?Xdu0$r>l+XP0o_XurJN?E#?51_,oYuu[=LJpWU6/$$%*ei%>;MaA1Hu+6c_%,XK]'4aA(X<mBr,iF"H"h]pD*WIi]l.2"UmN3okt7PLObH7MMN@k4!LDiG\n"tb[cVcn4$;nYE:LD(;mfnYsJ%+%BX)[bGU>u0%F;A0\+A(=-j2lPI=;,T`8@?DUhF$L^bro>Vgtb23(A/R,m[a(&CK\De:,:gKkL'EZ[74TQ.1)YG&X41:K7Oj-Y]a!%_`bZL&ER/E9rN91FFkCi0K$M.FKp6]=P`h%d,%:lLQD&K\_bS'it)e@7h9[S0+XgD\fP`&2hhADbOmPIUN-d@nJK.)G$L)oG_=?$%*>5cYLO=rNL-kjo6tD#/Fp-]Xq0UV@`/U5jHD*d_32m![r!\L1(k1?C=Cu<!g(j`q-*:ukV/A8G\:l>:FqSW'TiBTRO,)h4ENrq9%_:M65'OU)?d'i@".\j<uG\lZ#OoGH#e>J(9mWt8/'5pYKDU)^3CH^PrUi4'==Xr7]`V<s-ffNN5qu^uaUm(BO%,KP8r:A)j+DS%m%"0jc`HN3V(I3I9\:S_p!aKG=2a8aKCrUk+.h)8BXPpl@\/cFnb+7Z*)I6sIp@GPKi6CukZ$+]ZCBPCK2h3.'W!N[E"E8Q`t`H:E4%6boqVpo.6DOkddT@?+?`.WBB(ZDLLh<-Y(b..rt8VmHRp/X%Qr+W(APkt5,DI?#a)Z_4$ti'%E/GPGp;aWM:KC+s\[mcudD]@XH8%Gup+4%^?q($GDII=IUJ`,LL,\"`2d:&q"1M=<D'?Ve#iPRt^Z0Hs(ZsU(0gQ1csQ%2dR^CTD+r'W2&oIW;UZhr6iIp$249SGguMK%%KW_O=MQEI`\>"t_s[^ZK,LrcA]$o5mc+iSGqO:S<f2s%DNb=uI@YhJ)XeuX"_!9T(0Bf)T4lU8jmQae@t66kk_t15?F8065`qY/%`YYs!5!l]2m8<*(l4NS?D->Bcp"Pg]I2e,"lAI6"?L.>LcJPDn6NSqR_UP@5!$jnFR:,0q:#@QL?oJ3H&989^s+52_P$]iUQqfIo%''3bp?AR0-e;#qbhW$N(CmH[N_l(=us%N($"4l*s:JKt>o+?)N+_qo-0(<7#!3^gU!P5hsm\'(j4(QF6/J7l%Wm:/a>:J0g,q85Z%Rl9B6//LdF$68VbOM=0\8'.:7Gs)g?=tg\P0\opI:=b(JMCk0_@!kNrqba<E\=6Y)OR>o1GfB[UK?kp\c%uI]Fb]GS&"a'urV,0V%p@#`46*hY\f=iu%F$2*/"<Ij$He5_<2idQdF,7W;!/?tr/\R86NCf\F"jnc[]X3*0M$IoIE6*gNBWnafq2b9r^[3F[9VLoA]lj06%f2I<:/-oqbf(]5OJ*Tn62\%io3#1<h,Y+6H5CEm.PMW57Ajq@F--C.B#Q]Ptau0.mjf,O_hb_I4]@JmA:O*uN:1LasJ%(oTr>W(S%mNo1<NSg9n`1cJ&%eSZTHY?-YW`p?mobiXaFB6h?@I!TQ[86=cDhELCIJUG@kkb4A^dg[(#+(,/OQMd_&<RqL#2*eH,t42J3N4F[%T`BR+cj#mUZtd?(<'[`Spb+cs2RoRgVZ"AGPTg1`.p>8!YgP&LA"coW8PjJmfjgGpqn.E+>`IX+,N/-0f=N$-?EZ:JJd?ZUEl>@B%MK_(4<=rU!Lf8'2M]>Tm%lqLRGfgUlH[h;*NlFe@a:WOa4QHeE[eGOsZ)_csM]>Tmn*BUme;nVQ$Yd8q&PPB5a:WZKa,:pGZkka>%><_-S+VI$$#laLY,FClHDBIpFNq<"D+\0<WVC)OeK;O_3TnIE,/6,9hQHgB8DE@t:<G?p)s6uj_-iEj?#!tdUZHN^BKWG>a/9<mI%Q8k!TonSS1qYiS+O=&7$#`RA<_Sf996WQQ`"I9fc6j10YAS7NDU')u"Q$0!S#.iQF^)N>hn?_Uf55,5+cA5KqraCVTBp9ms3`E*n%Ma\Mm9+pulHubX9KCXT+VcmW:NMMj,-rb$<!5'g-M+d:;2AjcjU,?#,Z,WPQ6>lu&f-H2k\3k>$_%o!UW5Qgkcdt2gn!Z#=pVdjR%52WP<BZ1oM7pE"7[RlRP*rcP:.O:-A='hDRR8*;=$$U>M@H2Y1qLnL:2!"=QG<$qJ/'kV9#>e8t=R'i%@49<YGjDTY6SQ#7IL/uT%c#SeX?fHiKMZ)iNM[Ylip[8AXG["Vr9@`N!]^T^!)!Ud?W6!O&W##l%!#PJN56O4^[9^Mrj)=q5B#.8jo4ZjT+TY?jol?SlK,pT!%7'UqR&b,(;=8r%TDeHtQA8/&^_]_!g7umB5[H<AGp](0>[]f^NrE&c*Lq_"+#o$N)qG_<oDKX?iMBW1VhSFP[)%\$La9/rL?E868%lNOdI,@G2s?$H!gck%T0(C_j+'Im!W0jW4@N.[B0DAiA,ictO[_4-L(gF[C"c<)Nc-"$ta`6L;lCFgOX5kB$!*Uu,PU#HonU@CS"%)%uV7#O"HB>b,C=mt&ts&VlHWQ@+[D%libh*E&eT-r`0f9<O;g;W3bP06J/^"+no0QG@mcmB0B&n8L2-,Be\35&Mlh>0"?GBuWca%m:.IuoEmX46&#>rdJj_,PL3K5$AF+3Sp!sa_-BgbB>p>EHeY?[Y+`-a?9Fm0.p*4mR$X8"h^%.0L),4kc!^[=]WiFs$UDNl:J@Dc%XCdd!W+4V6F@?nnT`4ZTCmRI"4E0j?QBU4bB0@<cmgn\_&cmeB'<.EHJ3WS4X=*ftO9m081*3,$I#_X*6,Pf]K9if31u,:5q)<5+%60n3Z]("[HG1#e6N(GCf6Xs1__4kf7$6sKmG]TR`#T@bY.MZb45W.ou`9[%)0IuHXkALk]@G*:`8%Q"I-gYqt+a%XYn#I`BAQ,<f%ODG>/7n=,b;M)?kmSH$6ZX6l;91-I8.Wos;D)9*er5]KpBL)cuQXDRf&\";]hE;\m,'6>GQ3OCbnu(I/@\Q*$:?l"^QIG\:O$QTl%qfk(_gndm8i$^!Fgeu0"'uCLPRlE;pLVPi:-Q2*?Qq`1K>XTNJS^/II'I'g5s(GP7_mna.FSL.(ni7.dDquIuC^Gn]R`*`$!_jTl%r>6;<1`=dCi.bQm6\J=>.A0/XAO/MM%3;@3k4@`e6%u-PCm$s(p4-?3/=si<<f"\ESJ^TC]EP4"F7Tq`*?<V#6hhCUFdTYT)M?&I%FBFCrdW0Q)fg-mbh:?t;]rDT+&3LItEOre:i1+p'^#%\Fm=$ME6f!Ak)BDoaF/-6KWQZ0tp>'&GYVU@[!,3?T-/ODp[3Rdc'^[\9%M>P-\J-`sHSrBMDA#V)EO-56Y&aRRC/1lDs7:++HNAg]h::%(_la+Q+6NHCRQP3[MhJ_IEgq9A8B!^XO5t0AP`p9!T!kOI+9_iP$%.ip1H;F]=u<Fi/:+f<0VR'r,:lWXD_faNSE2n:(_#_L5O.g(`d6Ylq<JjA[@5f.$ULpD<)Lk47[T=108YQ0!\+#3rN!A](+GPgoj%"SKT_]RpFoHL%uO>r8D7<:&O@hIUFR<+)Tn7'dN6ar/'B^;4$,A7a>tr!'NihO)RB`aOF9Zqq=kZpCZhi-;t6HuXsO:nKNDYO'KQ%.P:B41=g>h4A^+#'`E\[X`?;gA?q<p2j@>*"`6*a1-D%F"_\4Vl/je?,@<JhN$TTi'NS^*A47B;ONCX7`5qF^M&6>RKuVT`o(+\8%3=/tHM+RUl)T$.5jAWpD+Npq9#Ulma.)_g\ej`$97rtW/ggFY&"Y8c!pc*;e!"--M>/2:2XH_@7O?$.n7jT*'=j9V*Lt#V5YK`RB%KIJ+>gjnMjorSg?8P8_Tj,!-@:%3O@n9cS5Et`YLJFD&:SZ+om`ECLj02\F[C#+&mg2?G>&0O`>M0>jf0!77Nph]tDO.co3]kCM-%),IgNnmEe`;kF]tNQ,J?$VIKWKJ(:"$,j/(I%m=!oqe.e<'81,nDd5'IXlNM[O)Io&sL7eDSm"Jp*lQ>?\\[c3$+"HE>gLI@Gq6`%AK3e5c(qtacqlf98i3TuFo5CLDg3BhNEiR:6i7kf*g#<_;\<l^+]7AW*cdNji]YsC59bq(#n<D`<W0oX]8u1aaX$k(3!bJ+,c>$^%$;M#qd;X).%-SX*eir`LVd\Bnm]=6d>*ons0[?ko\CSEkC?U-s)XJ]kYee=GZ_mAD6k0*B;Pu3Y)c^R&'EN=n!5+4JXB[dt%5'`,%:lu/-!]=i*E"2JeKa-N/L0J-k(l#J3@H'`34M;qCU(jZ6,uI@(Kb.,.clf'l;ka<,Am@X2=I.g^d*S[)=j2YY>(af8b#N_\=,tAk%CU54$6P2tl&6E%ASkugtO]0QQniRd^12T4a-eWE=G.41#V$/odYkIT4m85+3;S=Cs3gB"P;)H4Aj`#t"#Q.?OG58pLkrQ;![Q-c0%%;_@GWDUFOUNsufAD84L:-'l`]l,JQEWb_A@PbJ_\\s,^gA6&HSWK?YFcmW>_ZH'K,d1F_`XgcPGSbh"e0u%[HPCE)6!7T.ic%R_%]b&E$a2"h44d>6WJV.%IRX7A[j>rfs$1&pADM<=G4%Q\P"f1CLj%Zad1bCMg)\gYF-iiA@olYA7(8IDGXYZl8='OiQFK^;9=W#>-%ZlCR=9q#B&cAWl-==^tbq=UmG0;P0hBF@+7Vl:TiQ$ZS'Vq7>^:i@(<kKd8++rNHmV]rgIaaUol!%Fjg969D*jMl8>bKo3&2&Y>I%N*YV$iIY=WiLt0Kn2i]bM_cTJfTWVo#I]nd"g'LiV7\[E*;fQ-:1[-Pg?/2t?tou)CTQg#bY'XtgIt#V,Mf)Qqi24LfWk.tT<*ne%^Wb9-9F[tmMK7%/#dt:KaW:a[WUZ51L.#r)MG_6kI61Z<fbBn"gPf@2Q=ApUcflL>O4<CPL"_6t6e\Y9=VR@%?Gfq&9K5A1d:?G'%U7RsZ"L^RZ'sT*sEDKW+j2+qKM:9!$]0u*XbH?/.Up8DU[pi8FBUFR?-R(q<`>fEto$dl[%GdV>.C?C"6%(:]*2?EOrR6lZ8d>cU%_@H&Zml6A@$Vt`+I]q8G*:0J=Nfr"_de+REJBI:]c4j`q\$sfk1hO93Z6_&LHnbn'`:+<PnFQtPQ<]9M!<XQo=Th2JC9GhLadB#*%5`)De2JGb\g8T=&#fk:gfMe[fmtdKZpheLVDJ2V]MjC4r[F.^T@QitQYRWE9eTo-0-S,0"NKZQe6E(Di6PKOfgf0pbhY_(P_SG.Q%>&Smd0c0DrZPh%@\_'@-F?6W]SQi!4]0\(S`t-#Hgq92:0UBPLmK/_TMZ6hYGj-/89`CXAUp.jod5JI?!te^ZjuHXsS:JAC0S4Aa%ZpX0aCQ=XuEtU]l1ejHEC"UZWLCX(GYWX1d[XQp<7O'%282D52SmKhJeAKD4E+IC+g@hpQG>iS9j*oYJB!OIN1Z:]a&$S)@^IEc#%_Ht%ic[)gcNNhVEW^F^iOBnpbLLW\:daIXYAG;'dcaU$d&BaLkcFZk^#95!OVN6^jhtk($IbO-);q\kgS-*igG"V&slL`f"4Y5*h%(2`f1dCATmD.uFt.V#ta8"NGpJA(@8Ypi_UU$cW=T%$JI6N,=HTHX+_.FaA'-VG_[#Hd?*:iRBjNi*ADFc>p'H]2<tY(#hsYNJ[l%6ZO;^(d,g*bLu30a.ukkqS="N(7&4.[KMY4(;eg&(4=KfT[N>&.Oc)7hdA$g(BpQ3G+.3lKI_N/j.R<%;V2jrGE"rLFDf&#Pa87a%.b&f;67T2Lq)fl+R_>ojD^f,UYW!<'gTg\oc.I:nK8,AYc\GjTFa$h=HK<%s[TS'Knj_C#%/;7H'Q<hb\D?G&NEI32;L-u?)QW=n%QIEVLOUb'=4Vo)j0l,$hb>=eb*Th'A=S%"@Hk;'e[dG.j7,>$C`]"H?*J^r[ERl^^**"0l/cq@@5m`O-@e/sM2/B[2es'qS5H8-n%Q'Rsf!-JQa\a@WkXmr<'I,S%eSAST=$kbnWU7GV7%8>m7ED)bFRU8,kLZ>2lNBQ"C)LA?O$G^hGV(mlH"t@n8>QHf4jV*q#0Q0b2%qJjhjI7h[b7p]GGhdXP0I:;99MnQqL)(h4[a;4u,qSQ>qbX,75:L`.i4S#gVEAKZ)Jl"PZPY:5Ym$Ab2"md?4^WYdA2h$t]4B8<u%%X+0:du+P='!@#*N.T'g]VM2`=rq^#>DEUfJ6>:N-hebuE.0t0NPG,(EI07-!crqmZd>]d<iO.b_sqT[kLURq6YrSG0.u75pusZW%-.n<Q7WU2fND34/0!c&AO"Y'm9$:>VdUOhQrTVt%1<-W%5*bl5IXO>@cn$a%,(Zf_j)I1-n3YsTGl453(:k0u`T=7^S/4#g@,Hat%N%bk-P]9;$:U4Z3Tm+tSK%St8JrMB7)i\28.qr9nm`IjQ8IjtsW:FX,E+U=4!s*:pbS+;tK/A'C?1:H)k2"8`<N(&"R"sZf_E50J%^$%a9"M[Io6@:&$2oUks/edl]-IQT8+(504p%ks=-2W#I32f,h]+RWskb:e(0*0+%:)gs>L)G[W&_Xge)r=A0RKj:sYbV&D_Wm$^%#hn^X?3kI?"e#tL%:1Y-pj=OK(K>D1qPKo4dqI&dKrA'QE8-GpX"KPSWi[>B!:H!h!^7$*+XFNh9?Acb.Cl]NH':U9j%o,AnksMg%&7)/ri.dZ@%T7J0<?^i1ZG5QTXSkZ4@JQfiEf8Is88a>8Z1oKQ_4)qKGY2j)WPp]]PhZgW+m4*4gebLX88P-a@2O5<\7(7fbWh\N%)bOWJT.gF-"I%VLaHb\LZmrRcWXE^t@g[,LgJr3N6)NGW,*^oK,a68D]W1.Q;$Q?-$]Vj,*$KcakS>[T7CW#l:bN/D@2m-Sa2lRS%Z)Lp*BS%hkRbu?dG)-d\8hs<pl@86_dR!gal8d'p1_CMBGROZ]%n1DL,(`HpXq;iZakrq.M,PHgAWPR$%G2+jP2"8*I-/<EK0Zmr%K*t+%%CE6SH<&VZXdY](`t<a/\,1juTR*SVG=p'7;:!#gCl7ZD!^E>2RTgu87g>Qa!%&+K-:^igW&/i<q6<jsY@iW&Z45d[g&t7C%'_?kSe:So8+CpGJrF?2$p@0J=,,(A8fqfug9"Q%%[a&pp7#LpugQG'Y@3=R<]+)$SS2<oOB?]oCO\?AYmY25f633.JD]:Y9T3dQ-%`9Xh$@t2_D8/;j!,E6kP"Udt9`8it+q:Qi3#P/)ZKe:c)f&5*mr^%p&.`o57Vq8W7/6mAGAfSfb8PY3h)IB872=o#`FT`.92%F,O%?]MrSp"6"5l)h6DV<'CI:cdeo?Nt4%He@Nlj0qbNE"%N$[1*:Ph;!?-9<Y<#D6r!*`-qMB!$g<)r*<:.h;_eJOK'Q%]N!sZPHbET%ND%Y-Q80Df!3P-R,ptliLU-IFnQq/E8o."QL<7%F-9#YI=_@6aCcj0N-LE+*E86eH^4_mnf:^#WC5`DC.uWM@Yt>jWRq6,N_-K<E%6Fpb[VX^rd.Cuqo_k^bBJ&E('NAkHD,0f794/@#hl_G"ZXK]aoN'P`&(kf>C<!"VSq__mA>O*UPEcJ=!]1\%YXf:)&E&bs7Xm/`I%L/;qXGWcr@J@j3f*E]-aI_>m8?+H)QU8bkbC1\cr'<l0<QGnA>aG#+1"0tK;NKZ@3>bSUuUPBn)rdW:,KV_`76+f+XKpbtI2o1mn%&70#Or:h`g!eU#`OFfk)0-N6H-6q\"]u`l@a&9K<J'/Kq<ac!bgEt<D+dmMhRfj@QI<mak=6:tsl:See^po92%n1+?\@Z^f64C"$%.#0MD(fs((itT*S>Rc7,!ZOh9ei.ek,d1["iYQBk.N9H_%D0M!-<Jsra:Bh<D;Q<t3r']0"!Yt+p_s(.`hEiJ@sPFah-^Z#*XZ8S%Hu4'X6Xa'3cOg(tj_G.l<0?E]akS0Y)2tg8>%)6$)N:dgJWF>X]D4O\S.,LUdPI)n+d?,kfYQ87_i\@XBA83l_Fhh&?suN4(WMd&%(b0/c?I.FLN"'AOZO$eF/%!1G$8iY>Z3s0Ln22?U?h->p^4rs<9uHcF6>tp<96Q$9+I_^?N"&bmkX7!Sq_[B@_UuFEgcZKY:LU=Y%2M>Pgbu,AtXE-]Q8p1pt64_(jU'&CWZ=R4LK!?%o@;L:uKo*)%??s%7[f(._WUMcEAns/C#%'a*aDoE/?_aIfQ*%0b0V0+d%69FI%!#edgA)%Q<@;<k@'[gMG[DIrUWP.i(b1'N+N`/9i5(YJ;5,gpC>121K4-\+!B[^GMLC9=`([E1L*mP*G2oO`_nsUQ(iAQqV<eZF(%n`(B4.pFn6*G:.LV0=3E-mTiu]j5feD@>aH+>;[?OCeIr&`Q]&2Jr?FW<b(cCiejGH%J<Wm7e#G7W+t`iUqmu?Y4AJ]roZ8C&GQS%MG[Q[Kd>qABIn2B-!(9]ITgE`g)IS,0hCSdFV!FYL%G2ZDC[mh<<.f$$/B?RWET@)0tnsARb>!%l?3*QDb][\GHY4Rr$Rcp%[8"G%:$Fo/0WCbu('b2P\dYl.*%8nXHI3$;?lQ2-6%)XD^pI]H"B__[Cj8d&emg*L'Vn&G,Ukl)8=<6=[loS%Q6)9dV?_f<Sm`a&1nJ;K%Om55@HGFY$Q6$`6VTDpU8o%26WjfN([H/8A-Wc[VafB0IS!-HhDIU1R5&>Ek\A3-,jWJt"8PL96C;9Z91EQtqmAC?jmR'9H,OGg%%6g;YjM`i'J(u^("6e,Hj"R*,3JnV]\o@Q3$OWG4dDk@g*Ql_JU,GmXe.'.'!DhNI6P#a^oQ0M&6OJms!BC\geV^9<8(P<r3$&l(s%+d6tg=\2q^S9":p`7i^q^4N2r=R5h$YpX+5AOh.in!j775!_Yl8+.3WK[:P>#$!jOeD`Y`C:[3.EMXMmI)us&?s6[D:\nW[.+<ME%BU3@kc$^cA)n4c'i]U_m$VT"!QJKsI_L$l"qe;XRoU[1\`\Iq>HNMo#(1;A_P#f7DKj'fKZ1X!EpdffeE29J%me`E@h@n,U:%Rd9%_4"IG61PTbFhTh2ORdJ\:H&[@lSk#Zh0FTss8="YCts<Q/-$&oE9BfaRWP-#=uoGCS?JBeZb*qW:EOU47XJ:U,aR@K7,ZseL,*u`%fc,=Ao0F8K*>*;eoF)X_T5#G\3f_Am;Mq"a$qk>IHh,fLU`Ht2jfrkl#+DQ.&[?DB<d7A91Nj6k>$>m`c66gd8R42sNofVqS!DrR%R#MN$\]Mo2[eun@*0A:8EmV4*2`3_Xk>3&o]Nr>Bpc7F4fuk-#F4_GLC5r!Kd/5W>ppj#A1S;^\MD?7`7mt^t+4hPiJhF#?6,s*M%fB`tl*<k-F"6_GpgU.a7cg`F:-1S4LZ?dgIN[nt>,11G;XIbBC)k4_febH[P_NEX!:<6%Km5cIa>4pTLl5jYKLY(sOpc8>^$LsDV%3=bV!LV;^13#U6j$m3Q`M.jWa:[m!B@^39[?3W%akd]Uf&<m3;4>u1.*^Eg$eH>#!m'U4AGRb_)*b#$14>*0,X&,InrEGp'R&\q$%%r1_$IaQ&O+8`0VCH*FXZFVCKL,0oGjiCqM^FT9(Ed=@'%o-f[oDW2oiQ3d!aV-@ep-X+(c?lmoqm'n%TMGgG:m+1bK(s`k;#6kX%7t;g7?Pt[NDQmtGIs[7ciPIc:C?<<'e@o66S!3]Ye^;8bFe?Vg5[$Xm1ikdGW@+#NRpdF&p_esW90OpZS!de>"2=];BgjIP2PlR5%;CSeK=3?YuW8b:cPd<WfiX:WAc<A`km(-()j<)sE._7MldtBP`[;r'FFsU@YQICe$WKjf?]%B^(b!FjJ*Z&!?CWbt)KN;DnWKgPb%CZVrof?3DtVcI+n)-V<R:$C;BhF/sX$41jb[(K\p$E]h6:=`@oEpSh)ajA2r-G!7W@CrKUiH+Ur=*]J@+PZm9k_&^khU07$.=:OX%OgodBK\k`jcclp5oiI>\jWL?EWZFjV5t@f[KQmUti^F3+DBaj42Og&bY=g<X>28m?#_JpkY'Ln9O@ZA&22.\q9-G^_70nKGh;*']%64c"-=+WdF!cn>..r@W"dEJ%U=M`B:6h\>QN`cK+Dg@]QO>7@sr[C15b!=!am^=;A!OZfDjAEu`Lp8XpFch4^[2b\r"HS3,IPaq,%!hc^Lreh1!e05!glur!AAeTcH1h(H670k*?ID6h$&.VV!FI6m.b?(M_/G4D!9=o6N5mJl^T')"C"T0"`j['6A\'X39&/;L,&6,SO%"JJ?-O!t2P<l"&N"C[P_[l#&enEdb2fq;093DkYBKN"Z"IANbrYp'9Y_9KAmA>%Bg<f0.R>=/O>hs,\aP466d<tg9H!93HHl`DB+%3_!=5-;&!I-0)1?Sm9!%KqjGN]Vms,>0`J_iumbeHjWmK)Cm>#H9UW`/WuSmL8Ws]FBRk]4$oc%6m?Q.e/i4K,OH=SX':-U)]_DW%_6,Nm#@I5M,/gcNqM4/\XEm7JQ/W(DPi%,7>(2C87D1?)k1;M%cmp)#X8*o'#uSuK[Ys8F(2`dYd9bXEYlbM#/S2]t_-k*W[AAYg%78^fggUpEc<qYKH4(1:IY2>tE^I4bjf(H'h06^K3((7(tXPU<!p>bUF/b,q/`t@/8FRmk/SB7T7b$O>5c8eOLe^_d-\VcCT:tIcZ%r7.A.&q>u@ZPn<82EECepbAfo(01>T6n@l<BZ!)$U<qelFlsoNl&TnklEFU\Dpc#F,(<c/\Nriq^I:<A$=6mWV'X#J\Ae_9)"mkD%ECB=I/,6Seh2dIqr-Qf'-JX6PRX+2%HSp,h,j:"`eLN0>EJRY$amqeZPH8ZJH@C"^=no2'::AAHbT=rRQ_,ll'8%htk];%(kni[M%G2*k4PQ_%'Z(!ZC@$4(bLk<SqAd;*/m8L3R"0FN2(i0(EJ4h>-Z2Q)uj:rdu/Go98IC/B=^AT:aN]MO^9H@El=eK*!Q)lFbo[YRT%frQZPKaJ*.fi5Y?h`f>q-K$(-Vn^`UY>h_%/6E1tZWYgk!E...EqBQ"i5HF6&!e=Aa'a!T0\XNU:.M/NlfKKGP9o+qB4?/Vk=%aS%a%K9UcIIe<Gl]h+<UXIm?2tm!GEch7$IJ\gq6%"+oGZ%fmKbHHbop8M:Ts00aW,ULZNrDX)MGP">6<"0;4[\PM`T4Ml@km&S,8sG%4b)QQSRknPBLopV3;$b-*2SV0.L&Tm7l%_\%@RYJ,DB-M?BiX^7(jWuGJIoi&Xkecm>jU,gjq1%Q0KHu-jj7Z?58nlH6m2k7b-qq%Wh(2aTlj,k9(g?RgoN&X8UX`7j&L$"1c18qMHc@#c'&d83&IgiC64_Gd/:J#9kLF99a$PF(32&=/H?@95GRX&a.o0i;BVET_\IF'%N2(#3U*$20&RDAB,apP+!NesNItZFLeqrNLTarjb7;Ik,hI8Nc%*R_.J3?t#iT"5nRXDsrZU7,t_uk=b@5!:n<f>$_(mJ$Yrku/b%+;^NF?o`<+.D1>5@'.;=!S25'QCB2QKOmDY^h.0\PpO4*2<#?&)WDUukDtlp*<7UfHH4,3;M?lD\^:&TBDV,#%-E@$VX1U\Srsa*%+h5ga5rQ414K5s^dN:+EiDh/Q<[t@u<DFC)`GKha*BPLi:LLk<.:UJh,fp*%-UQu*Ta$C+gc@:BTp?@c9DUJoE[[7pq.j$X1oc*>%]L2q_*lB8;@W/GL,j4c.,Gk_9f1*/A;%0%YN53rIFB#J-L9hP+U[]8RdF4!>USmpP=LhHa$jO2d1glXVp"S555UbGS:U8"-VpkFV%^Z\]/Xbn@EX-Z:XG;b:T".=H1?Bs<'+>]pF.N9NQgM+L<O1,np(96_+)NJ1k;787$#l"6#`N-_=3lo0nd1roQaD:d!>i*Y"8YLjj%>D_KV@"7<FnRBR-aRI?m?4E;6)9//Y*&8o4/7U;7"QdB6jbEgED7!s!DY<q%+u1;QY$K1;PXH;\K@Ts$9k8.!V$;3BAC?-#<2q-,%W9"`VrmrstIOZ!.i]'*=-7^<*W,rT4Z4F5a093-_EY!Mo,#'-S;T:Io*a'kHGSX0Npp"pB5#PMFEBb@:o@l]bAF@c`ps4,qCbSM2%c18s2=TO;'H/qRI>U##**a*n?`Q1IjrTN@>C]jG:ULR<9W0")P*21Fe(7fCoEpRA"A1`b*^!2ifjBXD^^kIg.bZ6)o>LN1P>+t#t%``]/!:L!ak2uuUd*/D21QOlt#eLDAnV>tVcF(9k[B`$;5^(T6/Bm%W<R'\.P#7I42l4KoPMjo"hB&Z3\nWlWm[+bTZM6KF%$9bn$%+U/)P+h^IgEZ.+G7Wj&lGodaJKOSnX`r\u']bkr,f&-<b7;nrM(Y(3i:^)U#amB-`*pltJAqlL1,,9-=?Eg-16kq::/MN_++q5:@%:d->C:+A#[L9CAiRM7D4]f?5m(ihgH4oqL3$UQcm^eV4=RTrZmDBA5!*cL%KSX0LRo!]4cL9Jq@93O7^IVrd*i0OrHK4ZPXr&C[k%X<UQhH$K$)lp(fZ&R<#iAaGkO1Z.!27?8nM1E^@(RS5W0e#j)uXot"#b*Ft#dEUP$Bnt.,SKBu':^bUoCJoHGqisdFH[FRWY00eL%]1VIjUdLT%JII2)i5WB&ZDk4\%tVYII#<<WCL(gj0?Hsd4i.nf_KQU)eAlgB*%k\uAtbT_QNM!RS@5GE(m:A?d#"AJ%m"@@#f93?%H1U?t#0T>oZ6up<%`&f300;]&p"o(O=2*hjMbqU"_p(TuE'?6s99aFbSH_``c'A@YP7\]RT'b#6$!T@e)KltaocC8?eh'"c&Dr8f%I`4uGf`?e?\D7#R8Y+:b72qSM\V?a&S.fY:&;Mi/*iUV]^G+Yk!M#P&AM>;r68@)$4?s4?;I1gQ<`gO>ddU5o?nq-OYG.L'I?@h8%&4"@!QP9GG\dPO*TnaF-T=\Jl:62Od&JF-o_Y#?om[H;^9$>IP3`4V,MupegP@['/D=3-nKBQSo/jG'[!Sl#=/0Xr38t#fCjgRNt%8H[d/=)f`KnY5A6VS*rGP,sCmE>FIoL`@t&;\kBf@:$l+1&X=@VGTNtC\Lfe%i'/k9ouRZirO>cEQ";U&\K4*beaOfM@RJ,;A_Bl%\Rtp:7FaU4eSYs2#e0[k.ALl\RpsubbK^$d4i/DkQr*1brSupo?;bce^.'b6@A$t0ge?+O$J"nJKk`h<r"$+LL?Sds'677(d>gD-%qm*]f^GM7=gnF.m)0L:3=WKoP2F574rU>dBdW.=ZADqAHo'Vo>P;UlB<uoD*VEC>&L/i<?mR@s``K^WY:uu7'C0dV50TYkp:s6b4%*\8Z0GGqG%A;DQZ?fA36W]7f#1cna.GK`iZ`q<pPMkG@&>]Pf(gCTAKQ'k/sMEJo'\@3o)!2kGNhk9DpZ[FFG#+Kaq8qH*%464TN%l)G:&/0XW-erpqUrG(o-=0<%%q14^0+#>H;ajgn*pK+L-h=-\4T:83#<ONA;%Tt2PbMf&_AF&D8'T9iY;)_!bM3Y-6!Lo0US]-@j%\2o-^a2=qH6XVF2b%bK\,\NKI+h0S[#L3+2>WlO3$<JVOk0Y5d^!I*n0@XCr7q?-W@p_I&@^-H`%Qr+p+,h4k)RgXelqj:CMt6Q9%Su=p)`j=dc<qp4lB)l+7`f>K"grO?&4\o37p:&M<I/TR9gucH)F4ZQ_'=RmoYEq6a^(/p3!P)db_h!;0NsK#GX)Ht_mj!.2=L`d%%$Y)\M^BLMNp/IuEYu`C`6_2j;]AmpkArtn<$oi)AaE`7@K0WQ;?kAX+ejAg6DG<(pAJl;uNgt*iHX9ksb(H7VKZD#X4da/K[OaKI%(:To7<l>)7eHon]B%TGH=hLMXD:H_Cn)/_gWE;&,,VRZMa=,IfkmYbTLd79N0r*m.7"l^4VB]JdY1oYRO.aHB#EN$k#/kioFi_(B%[Z"1mmKph)=i)+Zc2^fTQtBrC=$64=mGm$u6_PMM&nG@]`a%(#kVgll7QsZ7bEkBi%^is)-jD8MBYK7Xj*H.8Yau7QXpg#/&%]@"%'%d[8e1dsF/l"c4_Gi`%CPaEYG9=*!FBl6%,OU)XNr%K9gt.64/PcJt#Rq_D"0QX@L(1/@7]-YQoqqUj>Y*s2rkK.]Z6c5TPm]F'%K'.VIWL(.Q5r4W[>cQW?Pka1(LDPfKDH`H#P%Ag8afb/cZ"21][@B\%K\;S!G7UFdj(Xk`XS]Mq6L(]WV+l/T6I>/qh;AtW=-9KU%OCje37,o?5"uO3:BFZ]32TW.$>'_e-K`Pk1UmWU8=@,;rf""h%B+!+^S`()k?)e,]V9M?O!4B*m)%cLM+!2r>c.0[i#cg?^KV8O5%\]Q*?X<3eG$bk/I0VnC[UQ:3bU^F-m6.rgXH*!JtVZT)HQFjp*&J<T&lBRp<7"hi#Yl)HP&Vf:GAmC@XYY'h@YY+P\0Q]:ukjC`F%q!$8?&/c25i@@cQ9E^&X1<sUoB'6NO&'+psQFW)#,*aH-Z;fMIOLj]mH;N8k?C,cf.F<q@'E*:k4Xc7X//8O*6"*=]P\7)9KOILK%E%*+BM52IR7\ghn;X7MQQnW'JR]KatRc3pD`e7cW%9C1GKe^')LgCr5f$/F4/RuX).=>WZAe&e1;7l1d.bKVCCZ8BLARU*)Q5,8W%-K:.?*p?V$>XH<Miag5;`9]3[]DQd(Q5F/c5+g$Q2S\A&*XWg28r:#Y[<bB#Kpj&[Uq^)IiUDXYeT3nk3g3`I<V(51:TnS7>-aUj%k#NrXO2<6H>i,+0U9(.2#5<ruKm\*6UKjOIPe3MDGDNOoV-F,]&B1iE[tTI'589m!k9g,#9>H?cd^[SA+@qTq(]PBXY[(H;epBAE%;;fS`]o#/kCTY0Ii=JE^Xc+pl&&g_84eaDd'P[tVAcI[*rkk`1Xt"]k(`dj=BY=3kU3V`LF##_..m2,S/LYa:ajO(W`[MoL'2_pS%*oi)LYZ!R0e&pcI09Fh7,lubZ*O3OmebB2g\&;d[_['GpHNH`)#ng#1Tk%cIqP@b&JRV>?oa!4P&)'HrS;d'B7-7BSDChFikciB-%CYjh2E0lhT$PLLd4#8;p]6f>,_;F:H;Don<D/[-RLQHmS?1N\Tf>F7_5in3PSM;,nLf)TfDua_[NFiE786.2lDs&kPoZE9bZO'CQ%:We_oa!^2X,-+q'W-HuG<F0ijCr0A#feFm@KN0Ze-=G5Tk%-1R&jDh3+4JtsFgk2>dP;lmXE)H_Y2*&aGI3"#.46MQ,rc*`-5'q0%8kX)LV7O:04mK\6]:H\gT0X2I@29Mu6b(l2RrCjFKZ.YpaXE-SRA!tlL7'6um9FVH1_aji[jKN1jDD(>kcUrs>Q%``("cX+mB%_1%<ha-S!Af2'+d,]*RW@%:i?IP0DYRp32A/lL$>^i"naMJQCqMl-85;@h1I@D8q'(8j(NXD$hl\.QI/f(^8J1W=oXc<A(0ZToKbu$!%IA[rN&h8B6DRq$cEfA4+9aPqR\mmirDIqD\TdoA,>/iUXKUN9T"Os_5+e[EbErkr^UOQgor%'`s'2U4,"]Wjm:)X0`Ek3i<U.D5M%dV`A>QVa(t*__/pB;,r:!Hi4=d99]T_s[.^*XScI@6PYA!>S2pRt?bh5Qu=`@0D@=>%o.]<2.KW6rZu,@u,W9X(lZj$Ao[q8Zj46%E\=hV5MoMj2.g-)e6JTn0NKni/F-Sj]'N*!ZL"71j_^o&f`AB:kJLEno1;(R%Rh*rLRG_9!P3P>)ji!)K5THS4#O*K-?FW[O"Ofh%2WeDRkG8&Q!k3r))YNu[>%D6@O%[1]85*$T`NMuG$<<Zh_ogLc@\#E/<:@#_Q7$S_U<F>g"j=roM3Si+C8Wg%'liAJ?apLG]T1*I%cfmOa3IN0KFkKtk%o3)j9DpH?5/stjUoTKYT18j,1nZ<T9,MXZ;B`UV#pd\m#S.P^]-d]K#73th"t6&a,\1==PbYaM=D:pW:u\TF%C8D4Rj]+`iV7h*+&ub@B6Xb3&CqiB>RX'ukpj'q&:cq;/*+;ig%hd?:n+Nuq?oUld9mt:uhXqM7MKDfRb_HF;bV2#Q#Dn_:GLs@c%6,NFR]UA73<Ea^1.b+\Ip)%GYSr.6jf&re0?^!`8o(>">*IN@NB:(UCKg+?Lj?UobQ7Yto5d($(+^oBHk`@DBDT(\?H+B$Z0ln/Z%qf2O2Z_'rb.P@O&D;jt%7.T69]BCuIF<TTOHB`]`C_ffO3WoH"ro-6?0VB3m&huKmXN+8)$8k_HLclOTGg'.hpl_P>B!)bebrr5J%F-R#VYs2,T)t5&)WV&6^cuUac-!Td`dF8fhl$.?CKBF]bMo!p0aAi:FMS5dIX+X3;AgNLC-2^FR@4YCb1`$3V<s_7$puKL]_ISB=%W&%Lh4m8JQ>$Bch@4;WNQ'SsQKc7Ko6j=2(HK6R7=.FDEXqHVn9%f/&,n/39@`qbL)-96VAZjIS1@=@`TJkAA9DXTP-!#kok"GAH%-'n#V>anZl&niUd7&j.]AZAY%7]I)M-3MhaWl3/K^F(h&GY0OHa"s!b<MnD=!YQ;=k3.u.7$JM2P)>S"0N<Qr<Pm:RHL*CcM3&+7%H\jmcM=:pt39lm2K`*^)>U1G#5V?MXWY2?E9?8Y9j5bKc;C,nS;P?R['%b"];ifPHO1:h6nruDNVoQ<JME,JX\%AQ'W'nS]h)F%$%Q*?-%1=_VgUe8o!O\AOrhVn$uB.=LSiI8k-Kfs^UdKc(<&s[&JmboZ)X\aYD9`RVMqnj6h!A2N:SdZ(TfGQe&L'CldMeibZ2-ER[%X#,4;H):;i'%"^4HS@:l8_bA%'Fa@m6e;j'#/EJ3;%A>(#F\XJ1]fJSaI4*.784Ik'c`409!6=L314P;`MP=G6CM*!8[c8o4?"*\%V'SJZe6lqm9HP=F,)/SVakL*$cHlPg+WT:uBIpM@bCspm+<D&16K)S\LGWA;F#4*kn,:)NmO6+WGoDQ]bl,B+:ufHVq1>FX>%),:%9pPusR0PsohWshe%#kEU9^m%V2H`f'?-m%ZX>7P9n>%isQ#o3]/J6ZEfE]^KE"1S4Q5klt]$l9:S>4=[o+2lN)edVbcDJ*MMMWnn%D).[VHoCV<kNo9HP+*aPQl4LAZ'E/L#^3>=+bcO#5PTE")>P-^YjKq"5FV\+=8<`"iBCOU'L*h4d?%SPq&(""nm[cS@;3t,iXDrp%-YI*7=B9!H0La(PRte4@PbF%><a,B6.&4DIHes?Yb&A=_o@kj.ck0VPNa_1%%loB-C3;@+9Ah[uk":`3Ca''E;X<+92A$QP\Ml'N%R(ei!$;4NuKr(j`h,;6&<L=n&Ac-9(5o*B:#:VAi9P'`Q&>_a&.+9fK79Q:"R0snT8m1_Zes+Dc"fQ=4gWJCI3cp::8C[NN.P!?b%P_!A1Mo/FN;%u;3P@>uYN%Cqj/7hZOXf,\G^p"k$KTi8g\,kAJSLm>7n[PP,?jqdE>"iLCq:lE#VD?Lla:D3PV1knM')bku?C<7E%:tT!Q+'%Z-(h;%V%BZ.AZ*5"QJ<a7R;d!7qCmjUV4dHg9^KpO[7[[KEF*ZU*(N[Y[Wll0U@&>?8p8:MW7kX52#H#'W(]SsYVm1bd%+72de60,8DLdXmpnoQgb>\E,j\s2I#ec&pqTP3N*0sOi<nDmVRDL!D:0:.(DEe)u4bEF0O><6iQO(E6`1D_jXmq9oqI33Z[Z&qu1%fj07"QJE]4_O6>8HRMrVF0SL631;K:qr2=_m`\,fRn%@o1Ug92R6*POcMb9!o+92*I-h8A3nl,ac8LX%',THW`_=FtUDD\=`dBa;%K][+2acYg;>\J8ndb2XJ[2>6D3Ps_ic8IkDVoS;=Z]05u$4I30;FDg[94qJ*V6d:%h:\YHDp-LiZV:t9a+(V*NMA<=)L&XS02L\l%[1Dl;)PtD*a;'"jQ?*ogGXTh8?;#tZ'k\JpAqV!PJ[]Hg452r8ode?JL\""Y<GbZ$7%qI0"Mo8e5c(>>r&UJ+3"d@tYGp!]LtcmV%L4M@CL*u.<:82"HH+)W77cW+B1nu?H6LL/J8[*t=\cR1i$F^Th1TGa[L`GYITXej5df](^fqe"FV`&61Nt.Mt4Xa^(TAC:\a00oM%_ZP,+<!MUk+Qot&g1d(!/5Kstb?0(Loe+!a2C?FG2DF:a^=@]H/Do?7\a?Th^OH!js65$$s5cKCjWD5:nc/R:?b_$dnooTX^]*cL%J,8(&qT&X0gRnKAjj3u)a8c$4?iTnf^\lQqr:+.noREumq>09hrop'Tje)PKVm$-u?iTBj!G-]=c2[5#rkj6^T>1;R(;ai$~>%AI9_PrivateDataEnd